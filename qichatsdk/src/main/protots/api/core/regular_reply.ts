/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 5.26.1
 * source: api/core/regular_reply.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./../option";
import * as dependency_2 from "./../../google/protobuf/empty";
import * as dependency_3 from "./../../validate/validate";
import * as dependency_4 from "./../common/c_reply";
import * as dependency_5 from "./../common/c_base";
import * as pb_1 from "google-protobuf";
import * as grpc_1 from "@grpc/grpc-js";
export namespace api.core {
    export class RegularReplyCreateRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            name?: string;
            regular_time_frist?: number;
            content_frist?: string;
            regular_time_second?: number;
            content_second?: string;
            consult_id?: number;
            reply_type?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
                if ("regular_time_frist" in data && data.regular_time_frist != undefined) {
                    this.regular_time_frist = data.regular_time_frist;
                }
                if ("content_frist" in data && data.content_frist != undefined) {
                    this.content_frist = data.content_frist;
                }
                if ("regular_time_second" in data && data.regular_time_second != undefined) {
                    this.regular_time_second = data.regular_time_second;
                }
                if ("content_second" in data && data.content_second != undefined) {
                    this.content_second = data.content_second;
                }
                if ("consult_id" in data && data.consult_id != undefined) {
                    this.consult_id = data.consult_id;
                }
                if ("reply_type" in data && data.reply_type != undefined) {
                    this.reply_type = data.reply_type;
                }
            }
        }
        get name() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get regular_time_frist() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set regular_time_frist(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get content_frist() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set content_frist(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get regular_time_second() {
            return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
        }
        set regular_time_second(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        get content_second() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set content_second(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        get consult_id() {
            return pb_1.Message.getFieldWithDefault(this, 6, 0) as number;
        }
        set consult_id(value: number) {
            pb_1.Message.setField(this, 6, value);
        }
        get reply_type() {
            return pb_1.Message.getFieldWithDefault(this, 7, 0) as number;
        }
        set reply_type(value: number) {
            pb_1.Message.setField(this, 7, value);
        }
        static fromObject(data: {
            name?: string;
            regular_time_frist?: number;
            content_frist?: string;
            regular_time_second?: number;
            content_second?: string;
            consult_id?: number;
            reply_type?: number;
        }): RegularReplyCreateRequest {
            const message = new RegularReplyCreateRequest({});
            if (data.name != null) {
                message.name = data.name;
            }
            if (data.regular_time_frist != null) {
                message.regular_time_frist = data.regular_time_frist;
            }
            if (data.content_frist != null) {
                message.content_frist = data.content_frist;
            }
            if (data.regular_time_second != null) {
                message.regular_time_second = data.regular_time_second;
            }
            if (data.content_second != null) {
                message.content_second = data.content_second;
            }
            if (data.consult_id != null) {
                message.consult_id = data.consult_id;
            }
            if (data.reply_type != null) {
                message.reply_type = data.reply_type;
            }
            return message;
        }
        toObject() {
            const data: {
                name?: string;
                regular_time_frist?: number;
                content_frist?: string;
                regular_time_second?: number;
                content_second?: string;
                consult_id?: number;
                reply_type?: number;
            } = {};
            if (this.name != null) {
                data.name = this.name;
            }
            if (this.regular_time_frist != null) {
                data.regular_time_frist = this.regular_time_frist;
            }
            if (this.content_frist != null) {
                data.content_frist = this.content_frist;
            }
            if (this.regular_time_second != null) {
                data.regular_time_second = this.regular_time_second;
            }
            if (this.content_second != null) {
                data.content_second = this.content_second;
            }
            if (this.consult_id != null) {
                data.consult_id = this.consult_id;
            }
            if (this.reply_type != null) {
                data.reply_type = this.reply_type;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.name.length)
                writer.writeString(1, this.name);
            if (this.regular_time_frist != 0)
                writer.writeUint64(2, this.regular_time_frist);
            if (this.content_frist.length)
                writer.writeString(3, this.content_frist);
            if (this.regular_time_second != 0)
                writer.writeUint64(4, this.regular_time_second);
            if (this.content_second.length)
                writer.writeString(5, this.content_second);
            if (this.consult_id != 0)
                writer.writeInt64(6, this.consult_id);
            if (this.reply_type != 0)
                writer.writeInt32(7, this.reply_type);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): RegularReplyCreateRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new RegularReplyCreateRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.name = reader.readString();
                        break;
                    case 2:
                        message.regular_time_frist = reader.readUint64();
                        break;
                    case 3:
                        message.content_frist = reader.readString();
                        break;
                    case 4:
                        message.regular_time_second = reader.readUint64();
                        break;
                    case 5:
                        message.content_second = reader.readString();
                        break;
                    case 6:
                        message.consult_id = reader.readInt64();
                        break;
                    case 7:
                        message.reply_type = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): RegularReplyCreateRequest {
            return RegularReplyCreateRequest.deserialize(bytes);
        }
    }
    export class RegularReplyCreateResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            id?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
            }
        }
        get id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            id?: number;
        }): RegularReplyCreateResponse {
            const message = new RegularReplyCreateResponse({});
            if (data.id != null) {
                message.id = data.id;
            }
            return message;
        }
        toObject() {
            const data: {
                id?: number;
            } = {};
            if (this.id != null) {
                data.id = this.id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.id != 0)
                writer.writeInt64(1, this.id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): RegularReplyCreateResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new RegularReplyCreateResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.id = reader.readInt64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): RegularReplyCreateResponse {
            return RegularReplyCreateResponse.deserialize(bytes);
        }
    }
    export class RegularReplyDeleteRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            id?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
            }
        }
        get id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            id?: number;
        }): RegularReplyDeleteRequest {
            const message = new RegularReplyDeleteRequest({});
            if (data.id != null) {
                message.id = data.id;
            }
            return message;
        }
        toObject() {
            const data: {
                id?: number;
            } = {};
            if (this.id != null) {
                data.id = this.id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.id != 0)
                writer.writeInt64(1, this.id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): RegularReplyDeleteRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new RegularReplyDeleteRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.id = reader.readInt64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): RegularReplyDeleteRequest {
            return RegularReplyDeleteRequest.deserialize(bytes);
        }
    }
    export class RegularReplyUpdateRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            id?: number;
            name?: string;
            regular_time_frist?: number;
            content_frist?: string;
            regular_time_second?: number;
            content_second?: string;
            consult_id?: number;
            reply_type?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
                if ("regular_time_frist" in data && data.regular_time_frist != undefined) {
                    this.regular_time_frist = data.regular_time_frist;
                }
                if ("content_frist" in data && data.content_frist != undefined) {
                    this.content_frist = data.content_frist;
                }
                if ("regular_time_second" in data && data.regular_time_second != undefined) {
                    this.regular_time_second = data.regular_time_second;
                }
                if ("content_second" in data && data.content_second != undefined) {
                    this.content_second = data.content_second;
                }
                if ("consult_id" in data && data.consult_id != undefined) {
                    this.consult_id = data.consult_id;
                }
                if ("reply_type" in data && data.reply_type != undefined) {
                    this.reply_type = data.reply_type;
                }
            }
        }
        get id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get name() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get regular_time_frist() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set regular_time_frist(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        get content_frist() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set content_frist(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get regular_time_second() {
            return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
        }
        set regular_time_second(value: number) {
            pb_1.Message.setField(this, 5, value);
        }
        get content_second() {
            return pb_1.Message.getFieldWithDefault(this, 6, "") as string;
        }
        set content_second(value: string) {
            pb_1.Message.setField(this, 6, value);
        }
        get consult_id() {
            return pb_1.Message.getFieldWithDefault(this, 7, 0) as number;
        }
        set consult_id(value: number) {
            pb_1.Message.setField(this, 7, value);
        }
        get reply_type() {
            return pb_1.Message.getFieldWithDefault(this, 8, 0) as number;
        }
        set reply_type(value: number) {
            pb_1.Message.setField(this, 8, value);
        }
        static fromObject(data: {
            id?: number;
            name?: string;
            regular_time_frist?: number;
            content_frist?: string;
            regular_time_second?: number;
            content_second?: string;
            consult_id?: number;
            reply_type?: number;
        }): RegularReplyUpdateRequest {
            const message = new RegularReplyUpdateRequest({});
            if (data.id != null) {
                message.id = data.id;
            }
            if (data.name != null) {
                message.name = data.name;
            }
            if (data.regular_time_frist != null) {
                message.regular_time_frist = data.regular_time_frist;
            }
            if (data.content_frist != null) {
                message.content_frist = data.content_frist;
            }
            if (data.regular_time_second != null) {
                message.regular_time_second = data.regular_time_second;
            }
            if (data.content_second != null) {
                message.content_second = data.content_second;
            }
            if (data.consult_id != null) {
                message.consult_id = data.consult_id;
            }
            if (data.reply_type != null) {
                message.reply_type = data.reply_type;
            }
            return message;
        }
        toObject() {
            const data: {
                id?: number;
                name?: string;
                regular_time_frist?: number;
                content_frist?: string;
                regular_time_second?: number;
                content_second?: string;
                consult_id?: number;
                reply_type?: number;
            } = {};
            if (this.id != null) {
                data.id = this.id;
            }
            if (this.name != null) {
                data.name = this.name;
            }
            if (this.regular_time_frist != null) {
                data.regular_time_frist = this.regular_time_frist;
            }
            if (this.content_frist != null) {
                data.content_frist = this.content_frist;
            }
            if (this.regular_time_second != null) {
                data.regular_time_second = this.regular_time_second;
            }
            if (this.content_second != null) {
                data.content_second = this.content_second;
            }
            if (this.consult_id != null) {
                data.consult_id = this.consult_id;
            }
            if (this.reply_type != null) {
                data.reply_type = this.reply_type;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.id != 0)
                writer.writeInt64(1, this.id);
            if (this.name.length)
                writer.writeString(2, this.name);
            if (this.regular_time_frist != 0)
                writer.writeUint64(3, this.regular_time_frist);
            if (this.content_frist.length)
                writer.writeString(4, this.content_frist);
            if (this.regular_time_second != 0)
                writer.writeUint64(5, this.regular_time_second);
            if (this.content_second.length)
                writer.writeString(6, this.content_second);
            if (this.consult_id != 0)
                writer.writeInt64(7, this.consult_id);
            if (this.reply_type != 0)
                writer.writeInt32(8, this.reply_type);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): RegularReplyUpdateRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new RegularReplyUpdateRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.id = reader.readInt64();
                        break;
                    case 2:
                        message.name = reader.readString();
                        break;
                    case 3:
                        message.regular_time_frist = reader.readUint64();
                        break;
                    case 4:
                        message.content_frist = reader.readString();
                        break;
                    case 5:
                        message.regular_time_second = reader.readUint64();
                        break;
                    case 6:
                        message.content_second = reader.readString();
                        break;
                    case 7:
                        message.consult_id = reader.readInt64();
                        break;
                    case 8:
                        message.reply_type = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): RegularReplyUpdateRequest {
            return RegularReplyUpdateRequest.deserialize(bytes);
        }
    }
    export class RegularReplyQueryRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            id?: number;
            consult_id?: number;
            reply_type?: number;
            page?: number;
            pageSize?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
                if ("consult_id" in data && data.consult_id != undefined) {
                    this.consult_id = data.consult_id;
                }
                if ("reply_type" in data && data.reply_type != undefined) {
                    this.reply_type = data.reply_type;
                }
                if ("page" in data && data.page != undefined) {
                    this.page = data.page;
                }
                if ("pageSize" in data && data.pageSize != undefined) {
                    this.pageSize = data.pageSize;
                }
            }
        }
        get id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get consult_id() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set consult_id(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get reply_type() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set reply_type(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        get page() {
            return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
        }
        set page(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        get pageSize() {
            return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
        }
        set pageSize(value: number) {
            pb_1.Message.setField(this, 5, value);
        }
        static fromObject(data: {
            id?: number;
            consult_id?: number;
            reply_type?: number;
            page?: number;
            pageSize?: number;
        }): RegularReplyQueryRequest {
            const message = new RegularReplyQueryRequest({});
            if (data.id != null) {
                message.id = data.id;
            }
            if (data.consult_id != null) {
                message.consult_id = data.consult_id;
            }
            if (data.reply_type != null) {
                message.reply_type = data.reply_type;
            }
            if (data.page != null) {
                message.page = data.page;
            }
            if (data.pageSize != null) {
                message.pageSize = data.pageSize;
            }
            return message;
        }
        toObject() {
            const data: {
                id?: number;
                consult_id?: number;
                reply_type?: number;
                page?: number;
                pageSize?: number;
            } = {};
            if (this.id != null) {
                data.id = this.id;
            }
            if (this.consult_id != null) {
                data.consult_id = this.consult_id;
            }
            if (this.reply_type != null) {
                data.reply_type = this.reply_type;
            }
            if (this.page != null) {
                data.page = this.page;
            }
            if (this.pageSize != null) {
                data.pageSize = this.pageSize;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.id != 0)
                writer.writeInt64(1, this.id);
            if (this.consult_id != 0)
                writer.writeInt64(2, this.consult_id);
            if (this.reply_type != 0)
                writer.writeInt32(3, this.reply_type);
            if (this.page != 0)
                writer.writeUint32(4, this.page);
            if (this.pageSize != 0)
                writer.writeUint32(5, this.pageSize);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): RegularReplyQueryRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new RegularReplyQueryRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.id = reader.readInt64();
                        break;
                    case 2:
                        message.consult_id = reader.readInt64();
                        break;
                    case 3:
                        message.reply_type = reader.readInt32();
                        break;
                    case 4:
                        message.page = reader.readUint32();
                        break;
                    case 5:
                        message.pageSize = reader.readUint32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): RegularReplyQueryRequest {
            return RegularReplyQueryRequest.deserialize(bytes);
        }
    }
    export class RegularReplyItem extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            id?: number;
            name?: string;
            regular_time_frist?: number;
            content_frist?: string;
            regular_time_second?: number;
            content_second?: string;
            consult_id?: number;
            reply_type?: number;
            consult_name?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
                if ("regular_time_frist" in data && data.regular_time_frist != undefined) {
                    this.regular_time_frist = data.regular_time_frist;
                }
                if ("content_frist" in data && data.content_frist != undefined) {
                    this.content_frist = data.content_frist;
                }
                if ("regular_time_second" in data && data.regular_time_second != undefined) {
                    this.regular_time_second = data.regular_time_second;
                }
                if ("content_second" in data && data.content_second != undefined) {
                    this.content_second = data.content_second;
                }
                if ("consult_id" in data && data.consult_id != undefined) {
                    this.consult_id = data.consult_id;
                }
                if ("reply_type" in data && data.reply_type != undefined) {
                    this.reply_type = data.reply_type;
                }
                if ("consult_name" in data && data.consult_name != undefined) {
                    this.consult_name = data.consult_name;
                }
            }
        }
        get id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get name() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get regular_time_frist() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set regular_time_frist(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        get content_frist() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set content_frist(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get regular_time_second() {
            return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
        }
        set regular_time_second(value: number) {
            pb_1.Message.setField(this, 5, value);
        }
        get content_second() {
            return pb_1.Message.getFieldWithDefault(this, 6, "") as string;
        }
        set content_second(value: string) {
            pb_1.Message.setField(this, 6, value);
        }
        get consult_id() {
            return pb_1.Message.getFieldWithDefault(this, 7, 0) as number;
        }
        set consult_id(value: number) {
            pb_1.Message.setField(this, 7, value);
        }
        get reply_type() {
            return pb_1.Message.getFieldWithDefault(this, 8, 0) as number;
        }
        set reply_type(value: number) {
            pb_1.Message.setField(this, 8, value);
        }
        get consult_name() {
            return pb_1.Message.getFieldWithDefault(this, 9, "") as string;
        }
        set consult_name(value: string) {
            pb_1.Message.setField(this, 9, value);
        }
        static fromObject(data: {
            id?: number;
            name?: string;
            regular_time_frist?: number;
            content_frist?: string;
            regular_time_second?: number;
            content_second?: string;
            consult_id?: number;
            reply_type?: number;
            consult_name?: string;
        }): RegularReplyItem {
            const message = new RegularReplyItem({});
            if (data.id != null) {
                message.id = data.id;
            }
            if (data.name != null) {
                message.name = data.name;
            }
            if (data.regular_time_frist != null) {
                message.regular_time_frist = data.regular_time_frist;
            }
            if (data.content_frist != null) {
                message.content_frist = data.content_frist;
            }
            if (data.regular_time_second != null) {
                message.regular_time_second = data.regular_time_second;
            }
            if (data.content_second != null) {
                message.content_second = data.content_second;
            }
            if (data.consult_id != null) {
                message.consult_id = data.consult_id;
            }
            if (data.reply_type != null) {
                message.reply_type = data.reply_type;
            }
            if (data.consult_name != null) {
                message.consult_name = data.consult_name;
            }
            return message;
        }
        toObject() {
            const data: {
                id?: number;
                name?: string;
                regular_time_frist?: number;
                content_frist?: string;
                regular_time_second?: number;
                content_second?: string;
                consult_id?: number;
                reply_type?: number;
                consult_name?: string;
            } = {};
            if (this.id != null) {
                data.id = this.id;
            }
            if (this.name != null) {
                data.name = this.name;
            }
            if (this.regular_time_frist != null) {
                data.regular_time_frist = this.regular_time_frist;
            }
            if (this.content_frist != null) {
                data.content_frist = this.content_frist;
            }
            if (this.regular_time_second != null) {
                data.regular_time_second = this.regular_time_second;
            }
            if (this.content_second != null) {
                data.content_second = this.content_second;
            }
            if (this.consult_id != null) {
                data.consult_id = this.consult_id;
            }
            if (this.reply_type != null) {
                data.reply_type = this.reply_type;
            }
            if (this.consult_name != null) {
                data.consult_name = this.consult_name;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.id != 0)
                writer.writeInt64(1, this.id);
            if (this.name.length)
                writer.writeString(2, this.name);
            if (this.regular_time_frist != 0)
                writer.writeUint64(3, this.regular_time_frist);
            if (this.content_frist.length)
                writer.writeString(4, this.content_frist);
            if (this.regular_time_second != 0)
                writer.writeUint64(5, this.regular_time_second);
            if (this.content_second.length)
                writer.writeString(6, this.content_second);
            if (this.consult_id != 0)
                writer.writeInt64(7, this.consult_id);
            if (this.reply_type != 0)
                writer.writeInt32(8, this.reply_type);
            if (this.consult_name.length)
                writer.writeString(9, this.consult_name);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): RegularReplyItem {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new RegularReplyItem();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.id = reader.readInt64();
                        break;
                    case 2:
                        message.name = reader.readString();
                        break;
                    case 3:
                        message.regular_time_frist = reader.readUint64();
                        break;
                    case 4:
                        message.content_frist = reader.readString();
                        break;
                    case 5:
                        message.regular_time_second = reader.readUint64();
                        break;
                    case 6:
                        message.content_second = reader.readString();
                        break;
                    case 7:
                        message.consult_id = reader.readInt64();
                        break;
                    case 8:
                        message.reply_type = reader.readInt32();
                        break;
                    case 9:
                        message.consult_name = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): RegularReplyItem {
            return RegularReplyItem.deserialize(bytes);
        }
    }
    export class UnBindRegularReplyConsultItemResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            items?: UnBindRegularReplyConsultItem[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("items" in data && data.items != undefined) {
                    this.items = data.items;
                }
            }
        }
        get items() {
            return pb_1.Message.getRepeatedWrapperField(this, UnBindRegularReplyConsultItem, 1) as UnBindRegularReplyConsultItem[];
        }
        set items(value: UnBindRegularReplyConsultItem[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        static fromObject(data: {
            items?: ReturnType<typeof UnBindRegularReplyConsultItem.prototype.toObject>[];
        }): UnBindRegularReplyConsultItemResponse {
            const message = new UnBindRegularReplyConsultItemResponse({});
            if (data.items != null) {
                message.items = data.items.map(item => UnBindRegularReplyConsultItem.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                items?: ReturnType<typeof UnBindRegularReplyConsultItem.prototype.toObject>[];
            } = {};
            if (this.items != null) {
                data.items = this.items.map((item: UnBindRegularReplyConsultItem) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.items.length)
                writer.writeRepeatedMessage(1, this.items, (item: UnBindRegularReplyConsultItem) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): UnBindRegularReplyConsultItemResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new UnBindRegularReplyConsultItemResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.items, () => pb_1.Message.addToRepeatedWrapperField(message, 1, UnBindRegularReplyConsultItem.deserialize(reader), UnBindRegularReplyConsultItem));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): UnBindRegularReplyConsultItemResponse {
            return UnBindRegularReplyConsultItemResponse.deserialize(bytes);
        }
    }
    export class UnBindRegularReplyConsultItemReq extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            consult_id?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("consult_id" in data && data.consult_id != undefined) {
                    this.consult_id = data.consult_id;
                }
            }
        }
        get consult_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set consult_id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            consult_id?: number;
        }): UnBindRegularReplyConsultItemReq {
            const message = new UnBindRegularReplyConsultItemReq({});
            if (data.consult_id != null) {
                message.consult_id = data.consult_id;
            }
            return message;
        }
        toObject() {
            const data: {
                consult_id?: number;
            } = {};
            if (this.consult_id != null) {
                data.consult_id = this.consult_id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.consult_id != 0)
                writer.writeInt32(1, this.consult_id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): UnBindRegularReplyConsultItemReq {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new UnBindRegularReplyConsultItemReq();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.consult_id = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): UnBindRegularReplyConsultItemReq {
            return UnBindRegularReplyConsultItemReq.deserialize(bytes);
        }
    }
    export class UnBindRegularReplyConsultItem extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            consult_id?: number;
            consult_name?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("consult_id" in data && data.consult_id != undefined) {
                    this.consult_id = data.consult_id;
                }
                if ("consult_name" in data && data.consult_name != undefined) {
                    this.consult_name = data.consult_name;
                }
            }
        }
        get consult_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set consult_id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get consult_name() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set consult_name(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            consult_id?: number;
            consult_name?: string;
        }): UnBindRegularReplyConsultItem {
            const message = new UnBindRegularReplyConsultItem({});
            if (data.consult_id != null) {
                message.consult_id = data.consult_id;
            }
            if (data.consult_name != null) {
                message.consult_name = data.consult_name;
            }
            return message;
        }
        toObject() {
            const data: {
                consult_id?: number;
                consult_name?: string;
            } = {};
            if (this.consult_id != null) {
                data.consult_id = this.consult_id;
            }
            if (this.consult_name != null) {
                data.consult_name = this.consult_name;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.consult_id != 0)
                writer.writeInt64(1, this.consult_id);
            if (this.consult_name.length)
                writer.writeString(2, this.consult_name);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): UnBindRegularReplyConsultItem {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new UnBindRegularReplyConsultItem();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.consult_id = reader.readInt64();
                        break;
                    case 2:
                        message.consult_name = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): UnBindRegularReplyConsultItem {
            return UnBindRegularReplyConsultItem.deserialize(bytes);
        }
    }
    export class RegularReplyResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            items?: RegularReplyItem[];
            total?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("items" in data && data.items != undefined) {
                    this.items = data.items;
                }
                if ("total" in data && data.total != undefined) {
                    this.total = data.total;
                }
            }
        }
        get items() {
            return pb_1.Message.getRepeatedWrapperField(this, RegularReplyItem, 1) as RegularReplyItem[];
        }
        set items(value: RegularReplyItem[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        get total() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set total(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            items?: ReturnType<typeof RegularReplyItem.prototype.toObject>[];
            total?: number;
        }): RegularReplyResponse {
            const message = new RegularReplyResponse({});
            if (data.items != null) {
                message.items = data.items.map(item => RegularReplyItem.fromObject(item));
            }
            if (data.total != null) {
                message.total = data.total;
            }
            return message;
        }
        toObject() {
            const data: {
                items?: ReturnType<typeof RegularReplyItem.prototype.toObject>[];
                total?: number;
            } = {};
            if (this.items != null) {
                data.items = this.items.map((item: RegularReplyItem) => item.toObject());
            }
            if (this.total != null) {
                data.total = this.total;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.items.length)
                writer.writeRepeatedMessage(1, this.items, (item: RegularReplyItem) => item.serialize(writer));
            if (this.total != 0)
                writer.writeInt32(2, this.total);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): RegularReplyResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new RegularReplyResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.items, () => pb_1.Message.addToRepeatedWrapperField(message, 1, RegularReplyItem.deserialize(reader), RegularReplyItem));
                        break;
                    case 2:
                        message.total = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): RegularReplyResponse {
            return RegularReplyResponse.deserialize(bytes);
        }
    }
    interface GrpcUnaryServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
    }
    interface GrpcStreamServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
        (message: P, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
    }
    interface GrpWritableServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
    }
    interface GrpcChunkServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
        (options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
    }
    interface GrpcPromiseServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): Promise<R>;
        (message: P, options?: grpc_1.CallOptions): Promise<R>;
    }
    export abstract class UnimplementedRegularReplyService {
        static definition = {
            Create: {
                path: "/api.core.RegularReply/Create",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: RegularReplyCreateRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => RegularReplyCreateRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: RegularReplyCreateResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => RegularReplyCreateResponse.deserialize(new Uint8Array(bytes))
            },
            Delete: {
                path: "/api.core.RegularReply/Delete",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: RegularReplyDeleteRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => RegularReplyDeleteRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: dependency_2.google.protobuf.Empty) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => dependency_2.google.protobuf.Empty.deserialize(new Uint8Array(bytes))
            },
            Update: {
                path: "/api.core.RegularReply/Update",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: RegularReplyUpdateRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => RegularReplyUpdateRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: dependency_2.google.protobuf.Empty) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => dependency_2.google.protobuf.Empty.deserialize(new Uint8Array(bytes))
            },
            Query: {
                path: "/api.core.RegularReply/Query",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: RegularReplyQueryRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => RegularReplyQueryRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: RegularReplyResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => RegularReplyResponse.deserialize(new Uint8Array(bytes))
            },
            QueryUnBindConsult: {
                path: "/api.core.RegularReply/QueryUnBindConsult",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: UnBindRegularReplyConsultItemReq) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => UnBindRegularReplyConsultItemReq.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: UnBindRegularReplyConsultItemResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => UnBindRegularReplyConsultItemResponse.deserialize(new Uint8Array(bytes))
            }
        };
        [method: string]: grpc_1.UntypedHandleCall;
        abstract Create(call: grpc_1.ServerUnaryCall<RegularReplyCreateRequest, RegularReplyCreateResponse>, callback: grpc_1.sendUnaryData<RegularReplyCreateResponse>): void;
        abstract Delete(call: grpc_1.ServerUnaryCall<RegularReplyDeleteRequest, dependency_2.google.protobuf.Empty>, callback: grpc_1.sendUnaryData<dependency_2.google.protobuf.Empty>): void;
        abstract Update(call: grpc_1.ServerUnaryCall<RegularReplyUpdateRequest, dependency_2.google.protobuf.Empty>, callback: grpc_1.sendUnaryData<dependency_2.google.protobuf.Empty>): void;
        abstract Query(call: grpc_1.ServerUnaryCall<RegularReplyQueryRequest, RegularReplyResponse>, callback: grpc_1.sendUnaryData<RegularReplyResponse>): void;
        abstract QueryUnBindConsult(call: grpc_1.ServerUnaryCall<UnBindRegularReplyConsultItemReq, UnBindRegularReplyConsultItemResponse>, callback: grpc_1.sendUnaryData<UnBindRegularReplyConsultItemResponse>): void;
    }
    export class RegularReplyClient extends grpc_1.makeGenericClientConstructor(UnimplementedRegularReplyService.definition, "RegularReply", {}) {
        constructor(address: string, credentials: grpc_1.ChannelCredentials, options?: Partial<grpc_1.ChannelOptions>) {
            super(address, credentials, options);
        }
        Create: GrpcUnaryServiceInterface<RegularReplyCreateRequest, RegularReplyCreateResponse> = (message: RegularReplyCreateRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<RegularReplyCreateResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<RegularReplyCreateResponse>, callback?: grpc_1.requestCallback<RegularReplyCreateResponse>): grpc_1.ClientUnaryCall => {
            return super.Create(message, metadata, options, callback);
        };
        Delete: GrpcUnaryServiceInterface<RegularReplyDeleteRequest, dependency_2.google.protobuf.Empty> = (message: RegularReplyDeleteRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<dependency_2.google.protobuf.Empty>, options?: grpc_1.CallOptions | grpc_1.requestCallback<dependency_2.google.protobuf.Empty>, callback?: grpc_1.requestCallback<dependency_2.google.protobuf.Empty>): grpc_1.ClientUnaryCall => {
            return super.Delete(message, metadata, options, callback);
        };
        Update: GrpcUnaryServiceInterface<RegularReplyUpdateRequest, dependency_2.google.protobuf.Empty> = (message: RegularReplyUpdateRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<dependency_2.google.protobuf.Empty>, options?: grpc_1.CallOptions | grpc_1.requestCallback<dependency_2.google.protobuf.Empty>, callback?: grpc_1.requestCallback<dependency_2.google.protobuf.Empty>): grpc_1.ClientUnaryCall => {
            return super.Update(message, metadata, options, callback);
        };
        Query: GrpcUnaryServiceInterface<RegularReplyQueryRequest, RegularReplyResponse> = (message: RegularReplyQueryRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<RegularReplyResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<RegularReplyResponse>, callback?: grpc_1.requestCallback<RegularReplyResponse>): grpc_1.ClientUnaryCall => {
            return super.Query(message, metadata, options, callback);
        };
        QueryUnBindConsult: GrpcUnaryServiceInterface<UnBindRegularReplyConsultItemReq, UnBindRegularReplyConsultItemResponse> = (message: UnBindRegularReplyConsultItemReq, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<UnBindRegularReplyConsultItemResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<UnBindRegularReplyConsultItemResponse>, callback?: grpc_1.requestCallback<UnBindRegularReplyConsultItemResponse>): grpc_1.ClientUnaryCall => {
            return super.QueryUnBindConsult(message, metadata, options, callback);
        };
    }
}
