/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 5.26.1
 * source: api/core/chat_quality.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./../../google/protobuf/empty";
import * as dependency_2 from "./../../google/protobuf/timestamp";
import * as dependency_3 from "./../option";
import * as dependency_4 from "./../common/c_worker";
import * as dependency_5 from "./../common/c_base";
import * as dependency_6 from "./../../validate/validate";
import * as dependency_7 from "./worker";
import * as dependency_8 from "./../../google/protobuf/any";
import * as pb_1 from "google-protobuf";
import * as grpc_1 from "@grpc/grpc-js";
export namespace api.core {
    export enum QualityWorkerReportSortParam {
        CHECK_COUNT = 0,
        FINISHED_COUNT = 1,
        FINISHED_RATE = 2,
        COMBINE_CHECK_COUNT = 3,
        MUST_CHECK_COUNT = 4,
        REVIEW_CHECK_COUNT = 5,
        REVIEW_CHECK_RATE = 6,
        VERY_BAD_COUNT = 7,
        BAD_COUNT = 8,
        NORMAL_COUNT = 9,
        EXCELLENT_COUNT = 10,
        QUALIFIED_RATE = 11,
        TOTAL_CHECK_DURATION = 12,
        AVG_CHECK_DURATION = 13
    }
    export enum CheckedWorkerQualityViewListSortParam {
        FIRST_SEND_TIME = 0,
        CLIENT_MESSAGE_COUNT = 1,
        WORKER_MESSAGE_COUNT = 2,
        CHECK_DURATION = 3,
        CREATE_TIME = 4,
        SCORE_TIME = 5,
        REVIEW_TIME = 6
    }
    export class ChatQualityAssurancePageReq extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            page?: number;
            page_size?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("page" in data && data.page != undefined) {
                    this.page = data.page;
                }
                if ("page_size" in data && data.page_size != undefined) {
                    this.page_size = data.page_size;
                }
            }
        }
        get page() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set page(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get page_size() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set page_size(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            page?: number;
            page_size?: number;
        }): ChatQualityAssurancePageReq {
            const message = new ChatQualityAssurancePageReq({});
            if (data.page != null) {
                message.page = data.page;
            }
            if (data.page_size != null) {
                message.page_size = data.page_size;
            }
            return message;
        }
        toObject() {
            const data: {
                page?: number;
                page_size?: number;
            } = {};
            if (this.page != null) {
                data.page = this.page;
            }
            if (this.page_size != null) {
                data.page_size = this.page_size;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.page != 0)
                writer.writeUint32(1, this.page);
            if (this.page_size != 0)
                writer.writeUint32(2, this.page_size);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ChatQualityAssurancePageReq {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ChatQualityAssurancePageReq();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.page = reader.readUint32();
                        break;
                    case 2:
                        message.page_size = reader.readUint32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ChatQualityAssurancePageReq {
            return ChatQualityAssurancePageReq.deserialize(bytes);
        }
    }
    export class ChatQualitySettingsResp extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            is_customer_level_enabled?: boolean;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("is_customer_level_enabled" in data && data.is_customer_level_enabled != undefined) {
                    this.is_customer_level_enabled = data.is_customer_level_enabled;
                }
            }
        }
        get is_customer_level_enabled() {
            return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
        }
        set is_customer_level_enabled(value: boolean) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            is_customer_level_enabled?: boolean;
        }): ChatQualitySettingsResp {
            const message = new ChatQualitySettingsResp({});
            if (data.is_customer_level_enabled != null) {
                message.is_customer_level_enabled = data.is_customer_level_enabled;
            }
            return message;
        }
        toObject() {
            const data: {
                is_customer_level_enabled?: boolean;
            } = {};
            if (this.is_customer_level_enabled != null) {
                data.is_customer_level_enabled = this.is_customer_level_enabled;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.is_customer_level_enabled != false)
                writer.writeBool(1, this.is_customer_level_enabled);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ChatQualitySettingsResp {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ChatQualitySettingsResp();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.is_customer_level_enabled = reader.readBool();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ChatQualitySettingsResp {
            return ChatQualitySettingsResp.deserialize(bytes);
        }
    }
    export class SetChatQualitySettingsReq extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            is_customer_level_enabled?: boolean;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("is_customer_level_enabled" in data && data.is_customer_level_enabled != undefined) {
                    this.is_customer_level_enabled = data.is_customer_level_enabled;
                }
            }
        }
        get is_customer_level_enabled() {
            return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
        }
        set is_customer_level_enabled(value: boolean) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            is_customer_level_enabled?: boolean;
        }): SetChatQualitySettingsReq {
            const message = new SetChatQualitySettingsReq({});
            if (data.is_customer_level_enabled != null) {
                message.is_customer_level_enabled = data.is_customer_level_enabled;
            }
            return message;
        }
        toObject() {
            const data: {
                is_customer_level_enabled?: boolean;
            } = {};
            if (this.is_customer_level_enabled != null) {
                data.is_customer_level_enabled = this.is_customer_level_enabled;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.is_customer_level_enabled != false)
                writer.writeBool(1, this.is_customer_level_enabled);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SetChatQualitySettingsReq {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SetChatQualitySettingsReq();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.is_customer_level_enabled = reader.readBool();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): SetChatQualitySettingsReq {
            return SetChatQualitySettingsReq.deserialize(bytes);
        }
    }
    export class ChatQualityCustomerLevel extends pb_1.Message {
        #one_of_decls: number[][] = [[3]];
        constructor(data?: any[] | ({
            id?: number;
            extern_level?: number;
        } & (({
            custom_name?: string;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
                if ("extern_level" in data && data.extern_level != undefined) {
                    this.extern_level = data.extern_level;
                }
                if ("custom_name" in data && data.custom_name != undefined) {
                    this.custom_name = data.custom_name;
                }
            }
        }
        get id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get extern_level() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set extern_level(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get custom_name() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set custom_name(value: string) {
            pb_1.Message.setOneofField(this, 3, this.#one_of_decls[0], value);
        }
        get has_custom_name() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get _custom_name() {
            const cases: {
                [index: number]: "none" | "custom_name";
            } = {
                0: "none",
                3: "custom_name"
            };
            return cases[pb_1.Message.computeOneofCase(this, [3])];
        }
        static fromObject(data: {
            id?: number;
            extern_level?: number;
            custom_name?: string;
        }): ChatQualityCustomerLevel {
            const message = new ChatQualityCustomerLevel({});
            if (data.id != null) {
                message.id = data.id;
            }
            if (data.extern_level != null) {
                message.extern_level = data.extern_level;
            }
            if (data.custom_name != null) {
                message.custom_name = data.custom_name;
            }
            return message;
        }
        toObject() {
            const data: {
                id?: number;
                extern_level?: number;
                custom_name?: string;
            } = {};
            if (this.id != null) {
                data.id = this.id;
            }
            if (this.extern_level != null) {
                data.extern_level = this.extern_level;
            }
            if (this.custom_name != null) {
                data.custom_name = this.custom_name;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.id != 0)
                writer.writeUint32(1, this.id);
            if (this.extern_level != 0)
                writer.writeUint32(2, this.extern_level);
            if (this.has_custom_name)
                writer.writeString(3, this.custom_name);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ChatQualityCustomerLevel {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ChatQualityCustomerLevel();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.id = reader.readUint32();
                        break;
                    case 2:
                        message.extern_level = reader.readUint32();
                        break;
                    case 3:
                        message.custom_name = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ChatQualityCustomerLevel {
            return ChatQualityCustomerLevel.deserialize(bytes);
        }
    }
    export class SetChatQualityCustomerLevelItem extends pb_1.Message {
        #one_of_decls: number[][] = [[1], [2]];
        constructor(data?: any[] | ({} & (({
            id?: number;
        }) | ({
            custom_name?: string;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
                if ("custom_name" in data && data.custom_name != undefined) {
                    this.custom_name = data.custom_name;
                }
            }
        }
        get id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set id(value: number) {
            pb_1.Message.setOneofField(this, 1, this.#one_of_decls[0], value);
        }
        get has_id() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get custom_name() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set custom_name(value: string) {
            pb_1.Message.setOneofField(this, 2, this.#one_of_decls[1], value);
        }
        get has_custom_name() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get _id() {
            const cases: {
                [index: number]: "none" | "id";
            } = {
                0: "none",
                1: "id"
            };
            return cases[pb_1.Message.computeOneofCase(this, [1])];
        }
        get _custom_name() {
            const cases: {
                [index: number]: "none" | "custom_name";
            } = {
                0: "none",
                2: "custom_name"
            };
            return cases[pb_1.Message.computeOneofCase(this, [2])];
        }
        static fromObject(data: {
            id?: number;
            custom_name?: string;
        }): SetChatQualityCustomerLevelItem {
            const message = new SetChatQualityCustomerLevelItem({});
            if (data.id != null) {
                message.id = data.id;
            }
            if (data.custom_name != null) {
                message.custom_name = data.custom_name;
            }
            return message;
        }
        toObject() {
            const data: {
                id?: number;
                custom_name?: string;
            } = {};
            if (this.id != null) {
                data.id = this.id;
            }
            if (this.custom_name != null) {
                data.custom_name = this.custom_name;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_id)
                writer.writeUint32(1, this.id);
            if (this.has_custom_name)
                writer.writeString(2, this.custom_name);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SetChatQualityCustomerLevelItem {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SetChatQualityCustomerLevelItem();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.id = reader.readUint32();
                        break;
                    case 2:
                        message.custom_name = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): SetChatQualityCustomerLevelItem {
            return SetChatQualityCustomerLevelItem.deserialize(bytes);
        }
    }
    export class SetChatQualityCustomerLevel extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            set_list?: SetChatQualityCustomerLevelItem[];
            delete_ids?: number[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1, 2], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("set_list" in data && data.set_list != undefined) {
                    this.set_list = data.set_list;
                }
                if ("delete_ids" in data && data.delete_ids != undefined) {
                    this.delete_ids = data.delete_ids;
                }
            }
        }
        get set_list() {
            return pb_1.Message.getRepeatedWrapperField(this, SetChatQualityCustomerLevelItem, 1) as SetChatQualityCustomerLevelItem[];
        }
        set set_list(value: SetChatQualityCustomerLevelItem[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        get delete_ids() {
            return pb_1.Message.getFieldWithDefault(this, 2, []) as number[];
        }
        set delete_ids(value: number[]) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            set_list?: ReturnType<typeof SetChatQualityCustomerLevelItem.prototype.toObject>[];
            delete_ids?: number[];
        }): SetChatQualityCustomerLevel {
            const message = new SetChatQualityCustomerLevel({});
            if (data.set_list != null) {
                message.set_list = data.set_list.map(item => SetChatQualityCustomerLevelItem.fromObject(item));
            }
            if (data.delete_ids != null) {
                message.delete_ids = data.delete_ids;
            }
            return message;
        }
        toObject() {
            const data: {
                set_list?: ReturnType<typeof SetChatQualityCustomerLevelItem.prototype.toObject>[];
                delete_ids?: number[];
            } = {};
            if (this.set_list != null) {
                data.set_list = this.set_list.map((item: SetChatQualityCustomerLevelItem) => item.toObject());
            }
            if (this.delete_ids != null) {
                data.delete_ids = this.delete_ids;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.set_list.length)
                writer.writeRepeatedMessage(1, this.set_list, (item: SetChatQualityCustomerLevelItem) => item.serialize(writer));
            if (this.delete_ids.length)
                writer.writePackedUint32(2, this.delete_ids);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SetChatQualityCustomerLevel {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SetChatQualityCustomerLevel();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.set_list, () => pb_1.Message.addToRepeatedWrapperField(message, 1, SetChatQualityCustomerLevelItem.deserialize(reader), SetChatQualityCustomerLevelItem));
                        break;
                    case 2:
                        message.delete_ids = reader.readPackedUint32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): SetChatQualityCustomerLevel {
            return SetChatQualityCustomerLevel.deserialize(bytes);
        }
    }
    export class ChatQualityCustomerLevelListResp extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            items?: ChatQualityCustomerLevel[];
            total?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("items" in data && data.items != undefined) {
                    this.items = data.items;
                }
                if ("total" in data && data.total != undefined) {
                    this.total = data.total;
                }
            }
        }
        get items() {
            return pb_1.Message.getRepeatedWrapperField(this, ChatQualityCustomerLevel, 1) as ChatQualityCustomerLevel[];
        }
        set items(value: ChatQualityCustomerLevel[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        get total() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set total(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            items?: ReturnType<typeof ChatQualityCustomerLevel.prototype.toObject>[];
            total?: number;
        }): ChatQualityCustomerLevelListResp {
            const message = new ChatQualityCustomerLevelListResp({});
            if (data.items != null) {
                message.items = data.items.map(item => ChatQualityCustomerLevel.fromObject(item));
            }
            if (data.total != null) {
                message.total = data.total;
            }
            return message;
        }
        toObject() {
            const data: {
                items?: ReturnType<typeof ChatQualityCustomerLevel.prototype.toObject>[];
                total?: number;
            } = {};
            if (this.items != null) {
                data.items = this.items.map((item: ChatQualityCustomerLevel) => item.toObject());
            }
            if (this.total != null) {
                data.total = this.total;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.items.length)
                writer.writeRepeatedMessage(1, this.items, (item: ChatQualityCustomerLevel) => item.serialize(writer));
            if (this.total != 0)
                writer.writeUint64(2, this.total);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ChatQualityCustomerLevelListResp {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ChatQualityCustomerLevelListResp();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.items, () => pb_1.Message.addToRepeatedWrapperField(message, 1, ChatQualityCustomerLevel.deserialize(reader), ChatQualityCustomerLevel));
                        break;
                    case 2:
                        message.total = reader.readUint64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ChatQualityCustomerLevelListResp {
            return ChatQualityCustomerLevelListResp.deserialize(bytes);
        }
    }
    export class ChatQACheckSettingThreshold extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            key?: dependency_4.api.common.ThresholdType;
            value?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("key" in data && data.key != undefined) {
                    this.key = data.key;
                }
                if ("value" in data && data.value != undefined) {
                    this.value = data.value;
                }
            }
        }
        get key() {
            return pb_1.Message.getFieldWithDefault(this, 1, dependency_4.api.common.ThresholdType.serve_time_threshold) as dependency_4.api.common.ThresholdType;
        }
        set key(value: dependency_4.api.common.ThresholdType) {
            pb_1.Message.setField(this, 1, value);
        }
        get value() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set value(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            key?: dependency_4.api.common.ThresholdType;
            value?: number;
        }): ChatQACheckSettingThreshold {
            const message = new ChatQACheckSettingThreshold({});
            if (data.key != null) {
                message.key = data.key;
            }
            if (data.value != null) {
                message.value = data.value;
            }
            return message;
        }
        toObject() {
            const data: {
                key?: dependency_4.api.common.ThresholdType;
                value?: number;
            } = {};
            if (this.key != null) {
                data.key = this.key;
            }
            if (this.value != null) {
                data.value = this.value;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.key != dependency_4.api.common.ThresholdType.serve_time_threshold)
                writer.writeEnum(1, this.key);
            if (this.value != 0)
                writer.writeUint64(2, this.value);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ChatQACheckSettingThreshold {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ChatQACheckSettingThreshold();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.key = reader.readEnum();
                        break;
                    case 2:
                        message.value = reader.readUint64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ChatQACheckSettingThreshold {
            return ChatQACheckSettingThreshold.deserialize(bytes);
        }
    }
    export class ChatQACheckSettingReq extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            setting_type?: dependency_4.api.common.ChatQACheckSettingType;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("setting_type" in data && data.setting_type != undefined) {
                    this.setting_type = data.setting_type;
                }
            }
        }
        get setting_type() {
            return pb_1.Message.getFieldWithDefault(this, 1, dependency_4.api.common.ChatQACheckSettingType.NormalCheck) as dependency_4.api.common.ChatQACheckSettingType;
        }
        set setting_type(value: dependency_4.api.common.ChatQACheckSettingType) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            setting_type?: dependency_4.api.common.ChatQACheckSettingType;
        }): ChatQACheckSettingReq {
            const message = new ChatQACheckSettingReq({});
            if (data.setting_type != null) {
                message.setting_type = data.setting_type;
            }
            return message;
        }
        toObject() {
            const data: {
                setting_type?: dependency_4.api.common.ChatQACheckSettingType;
            } = {};
            if (this.setting_type != null) {
                data.setting_type = this.setting_type;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.setting_type != dependency_4.api.common.ChatQACheckSettingType.NormalCheck)
                writer.writeEnum(1, this.setting_type);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ChatQACheckSettingReq {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ChatQACheckSettingReq();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.setting_type = reader.readEnum();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ChatQACheckSettingReq {
            return ChatQACheckSettingReq.deserialize(bytes);
        }
    }
    export class ChatQACheckSettingResp extends pb_1.Message {
        #one_of_decls: number[][] = [[4]];
        constructor(data?: any[] | ({
            setting_type?: dependency_4.api.common.ChatQACheckSettingType;
            threshold_settings?: ChatQACheckSettingThreshold[];
            customer_levels?: ChatQACheckSettingRespCustomerLevel[];
        } & (({
            collab_num?: number;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [2, 3], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("setting_type" in data && data.setting_type != undefined) {
                    this.setting_type = data.setting_type;
                }
                if ("threshold_settings" in data && data.threshold_settings != undefined) {
                    this.threshold_settings = data.threshold_settings;
                }
                if ("customer_levels" in data && data.customer_levels != undefined) {
                    this.customer_levels = data.customer_levels;
                }
                if ("collab_num" in data && data.collab_num != undefined) {
                    this.collab_num = data.collab_num;
                }
            }
        }
        get setting_type() {
            return pb_1.Message.getFieldWithDefault(this, 1, dependency_4.api.common.ChatQACheckSettingType.NormalCheck) as dependency_4.api.common.ChatQACheckSettingType;
        }
        set setting_type(value: dependency_4.api.common.ChatQACheckSettingType) {
            pb_1.Message.setField(this, 1, value);
        }
        get threshold_settings() {
            return pb_1.Message.getRepeatedWrapperField(this, ChatQACheckSettingThreshold, 2) as ChatQACheckSettingThreshold[];
        }
        set threshold_settings(value: ChatQACheckSettingThreshold[]) {
            pb_1.Message.setRepeatedWrapperField(this, 2, value);
        }
        get customer_levels() {
            return pb_1.Message.getRepeatedWrapperField(this, ChatQACheckSettingRespCustomerLevel, 3) as ChatQACheckSettingRespCustomerLevel[];
        }
        set customer_levels(value: ChatQACheckSettingRespCustomerLevel[]) {
            pb_1.Message.setRepeatedWrapperField(this, 3, value);
        }
        get collab_num() {
            return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
        }
        set collab_num(value: number) {
            pb_1.Message.setOneofField(this, 4, this.#one_of_decls[0], value);
        }
        get has_collab_num() {
            return pb_1.Message.getField(this, 4) != null;
        }
        get _collab_num() {
            const cases: {
                [index: number]: "none" | "collab_num";
            } = {
                0: "none",
                4: "collab_num"
            };
            return cases[pb_1.Message.computeOneofCase(this, [4])];
        }
        static fromObject(data: {
            setting_type?: dependency_4.api.common.ChatQACheckSettingType;
            threshold_settings?: ReturnType<typeof ChatQACheckSettingThreshold.prototype.toObject>[];
            customer_levels?: ReturnType<typeof ChatQACheckSettingRespCustomerLevel.prototype.toObject>[];
            collab_num?: number;
        }): ChatQACheckSettingResp {
            const message = new ChatQACheckSettingResp({});
            if (data.setting_type != null) {
                message.setting_type = data.setting_type;
            }
            if (data.threshold_settings != null) {
                message.threshold_settings = data.threshold_settings.map(item => ChatQACheckSettingThreshold.fromObject(item));
            }
            if (data.customer_levels != null) {
                message.customer_levels = data.customer_levels.map(item => ChatQACheckSettingRespCustomerLevel.fromObject(item));
            }
            if (data.collab_num != null) {
                message.collab_num = data.collab_num;
            }
            return message;
        }
        toObject() {
            const data: {
                setting_type?: dependency_4.api.common.ChatQACheckSettingType;
                threshold_settings?: ReturnType<typeof ChatQACheckSettingThreshold.prototype.toObject>[];
                customer_levels?: ReturnType<typeof ChatQACheckSettingRespCustomerLevel.prototype.toObject>[];
                collab_num?: number;
            } = {};
            if (this.setting_type != null) {
                data.setting_type = this.setting_type;
            }
            if (this.threshold_settings != null) {
                data.threshold_settings = this.threshold_settings.map((item: ChatQACheckSettingThreshold) => item.toObject());
            }
            if (this.customer_levels != null) {
                data.customer_levels = this.customer_levels.map((item: ChatQACheckSettingRespCustomerLevel) => item.toObject());
            }
            if (this.collab_num != null) {
                data.collab_num = this.collab_num;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.setting_type != dependency_4.api.common.ChatQACheckSettingType.NormalCheck)
                writer.writeEnum(1, this.setting_type);
            if (this.threshold_settings.length)
                writer.writeRepeatedMessage(2, this.threshold_settings, (item: ChatQACheckSettingThreshold) => item.serialize(writer));
            if (this.customer_levels.length)
                writer.writeRepeatedMessage(3, this.customer_levels, (item: ChatQACheckSettingRespCustomerLevel) => item.serialize(writer));
            if (this.has_collab_num)
                writer.writeUint32(4, this.collab_num);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ChatQACheckSettingResp {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ChatQACheckSettingResp();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.setting_type = reader.readEnum();
                        break;
                    case 2:
                        reader.readMessage(message.threshold_settings, () => pb_1.Message.addToRepeatedWrapperField(message, 2, ChatQACheckSettingThreshold.deserialize(reader), ChatQACheckSettingThreshold));
                        break;
                    case 3:
                        reader.readMessage(message.customer_levels, () => pb_1.Message.addToRepeatedWrapperField(message, 3, ChatQACheckSettingRespCustomerLevel.deserialize(reader), ChatQACheckSettingRespCustomerLevel));
                        break;
                    case 4:
                        message.collab_num = reader.readUint32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ChatQACheckSettingResp {
            return ChatQACheckSettingResp.deserialize(bytes);
        }
    }
    export class ChatQACheckSettingRespCustomerLevel extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            id?: number;
            customer_levels?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
                if ("customer_levels" in data && data.customer_levels != undefined) {
                    this.customer_levels = data.customer_levels;
                }
            }
        }
        get id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get customer_levels() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set customer_levels(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            id?: number;
            customer_levels?: number;
        }): ChatQACheckSettingRespCustomerLevel {
            const message = new ChatQACheckSettingRespCustomerLevel({});
            if (data.id != null) {
                message.id = data.id;
            }
            if (data.customer_levels != null) {
                message.customer_levels = data.customer_levels;
            }
            return message;
        }
        toObject() {
            const data: {
                id?: number;
                customer_levels?: number;
            } = {};
            if (this.id != null) {
                data.id = this.id;
            }
            if (this.customer_levels != null) {
                data.customer_levels = this.customer_levels;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.id != 0)
                writer.writeInt32(1, this.id);
            if (this.customer_levels != 0)
                writer.writeInt32(2, this.customer_levels);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ChatQACheckSettingRespCustomerLevel {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ChatQACheckSettingRespCustomerLevel();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.id = reader.readInt32();
                        break;
                    case 2:
                        message.customer_levels = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ChatQACheckSettingRespCustomerLevel {
            return ChatQACheckSettingRespCustomerLevel.deserialize(bytes);
        }
    }
    export class SetChatQACheckSettingReq extends pb_1.Message {
        #one_of_decls: number[][] = [[4]];
        constructor(data?: any[] | ({
            setting_type?: dependency_4.api.common.ChatQACheckSettingType;
            threshold_settings?: ChatQACheckSettingThreshold[];
            customer_levels?: number[];
        } & (({
            collab_num?: number;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [2, 3], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("setting_type" in data && data.setting_type != undefined) {
                    this.setting_type = data.setting_type;
                }
                if ("threshold_settings" in data && data.threshold_settings != undefined) {
                    this.threshold_settings = data.threshold_settings;
                }
                if ("customer_levels" in data && data.customer_levels != undefined) {
                    this.customer_levels = data.customer_levels;
                }
                if ("collab_num" in data && data.collab_num != undefined) {
                    this.collab_num = data.collab_num;
                }
            }
        }
        get setting_type() {
            return pb_1.Message.getFieldWithDefault(this, 1, dependency_4.api.common.ChatQACheckSettingType.NormalCheck) as dependency_4.api.common.ChatQACheckSettingType;
        }
        set setting_type(value: dependency_4.api.common.ChatQACheckSettingType) {
            pb_1.Message.setField(this, 1, value);
        }
        get threshold_settings() {
            return pb_1.Message.getRepeatedWrapperField(this, ChatQACheckSettingThreshold, 2) as ChatQACheckSettingThreshold[];
        }
        set threshold_settings(value: ChatQACheckSettingThreshold[]) {
            pb_1.Message.setRepeatedWrapperField(this, 2, value);
        }
        get customer_levels() {
            return pb_1.Message.getFieldWithDefault(this, 3, []) as number[];
        }
        set customer_levels(value: number[]) {
            pb_1.Message.setField(this, 3, value);
        }
        get collab_num() {
            return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
        }
        set collab_num(value: number) {
            pb_1.Message.setOneofField(this, 4, this.#one_of_decls[0], value);
        }
        get has_collab_num() {
            return pb_1.Message.getField(this, 4) != null;
        }
        get _collab_num() {
            const cases: {
                [index: number]: "none" | "collab_num";
            } = {
                0: "none",
                4: "collab_num"
            };
            return cases[pb_1.Message.computeOneofCase(this, [4])];
        }
        static fromObject(data: {
            setting_type?: dependency_4.api.common.ChatQACheckSettingType;
            threshold_settings?: ReturnType<typeof ChatQACheckSettingThreshold.prototype.toObject>[];
            customer_levels?: number[];
            collab_num?: number;
        }): SetChatQACheckSettingReq {
            const message = new SetChatQACheckSettingReq({});
            if (data.setting_type != null) {
                message.setting_type = data.setting_type;
            }
            if (data.threshold_settings != null) {
                message.threshold_settings = data.threshold_settings.map(item => ChatQACheckSettingThreshold.fromObject(item));
            }
            if (data.customer_levels != null) {
                message.customer_levels = data.customer_levels;
            }
            if (data.collab_num != null) {
                message.collab_num = data.collab_num;
            }
            return message;
        }
        toObject() {
            const data: {
                setting_type?: dependency_4.api.common.ChatQACheckSettingType;
                threshold_settings?: ReturnType<typeof ChatQACheckSettingThreshold.prototype.toObject>[];
                customer_levels?: number[];
                collab_num?: number;
            } = {};
            if (this.setting_type != null) {
                data.setting_type = this.setting_type;
            }
            if (this.threshold_settings != null) {
                data.threshold_settings = this.threshold_settings.map((item: ChatQACheckSettingThreshold) => item.toObject());
            }
            if (this.customer_levels != null) {
                data.customer_levels = this.customer_levels;
            }
            if (this.collab_num != null) {
                data.collab_num = this.collab_num;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.setting_type != dependency_4.api.common.ChatQACheckSettingType.NormalCheck)
                writer.writeEnum(1, this.setting_type);
            if (this.threshold_settings.length)
                writer.writeRepeatedMessage(2, this.threshold_settings, (item: ChatQACheckSettingThreshold) => item.serialize(writer));
            if (this.customer_levels.length)
                writer.writePackedInt32(3, this.customer_levels);
            if (this.has_collab_num)
                writer.writeUint32(4, this.collab_num);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SetChatQACheckSettingReq {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SetChatQACheckSettingReq();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.setting_type = reader.readEnum();
                        break;
                    case 2:
                        reader.readMessage(message.threshold_settings, () => pb_1.Message.addToRepeatedWrapperField(message, 2, ChatQACheckSettingThreshold.deserialize(reader), ChatQACheckSettingThreshold));
                        break;
                    case 3:
                        message.customer_levels = reader.readPackedInt32();
                        break;
                    case 4:
                        message.collab_num = reader.readUint32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): SetChatQACheckSettingReq {
            return SetChatQACheckSettingReq.deserialize(bytes);
        }
    }
    export class QAAssignedWorker extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            worker_id?: number;
            worker_name?: string;
            is_assigned?: boolean;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("worker_id" in data && data.worker_id != undefined) {
                    this.worker_id = data.worker_id;
                }
                if ("worker_name" in data && data.worker_name != undefined) {
                    this.worker_name = data.worker_name;
                }
                if ("is_assigned" in data && data.is_assigned != undefined) {
                    this.is_assigned = data.is_assigned;
                }
            }
        }
        get worker_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set worker_id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get worker_name() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set worker_name(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get is_assigned() {
            return pb_1.Message.getFieldWithDefault(this, 3, false) as boolean;
        }
        set is_assigned(value: boolean) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            worker_id?: number;
            worker_name?: string;
            is_assigned?: boolean;
        }): QAAssignedWorker {
            const message = new QAAssignedWorker({});
            if (data.worker_id != null) {
                message.worker_id = data.worker_id;
            }
            if (data.worker_name != null) {
                message.worker_name = data.worker_name;
            }
            if (data.is_assigned != null) {
                message.is_assigned = data.is_assigned;
            }
            return message;
        }
        toObject() {
            const data: {
                worker_id?: number;
                worker_name?: string;
                is_assigned?: boolean;
            } = {};
            if (this.worker_id != null) {
                data.worker_id = this.worker_id;
            }
            if (this.worker_name != null) {
                data.worker_name = this.worker_name;
            }
            if (this.is_assigned != null) {
                data.is_assigned = this.is_assigned;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.worker_id != 0)
                writer.writeInt32(1, this.worker_id);
            if (this.worker_name.length)
                writer.writeString(2, this.worker_name);
            if (this.is_assigned != false)
                writer.writeBool(3, this.is_assigned);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): QAAssignedWorker {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new QAAssignedWorker();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.worker_id = reader.readInt32();
                        break;
                    case 2:
                        message.worker_name = reader.readString();
                        break;
                    case 3:
                        message.is_assigned = reader.readBool();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): QAAssignedWorker {
            return QAAssignedWorker.deserialize(bytes);
        }
    }
    export class QAAssignedWorkerListResp extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            items?: QAAssignedWorker[];
            total?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("items" in data && data.items != undefined) {
                    this.items = data.items;
                }
                if ("total" in data && data.total != undefined) {
                    this.total = data.total;
                }
            }
        }
        get items() {
            return pb_1.Message.getRepeatedWrapperField(this, QAAssignedWorker, 1) as QAAssignedWorker[];
        }
        set items(value: QAAssignedWorker[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        get total() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set total(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            items?: ReturnType<typeof QAAssignedWorker.prototype.toObject>[];
            total?: number;
        }): QAAssignedWorkerListResp {
            const message = new QAAssignedWorkerListResp({});
            if (data.items != null) {
                message.items = data.items.map(item => QAAssignedWorker.fromObject(item));
            }
            if (data.total != null) {
                message.total = data.total;
            }
            return message;
        }
        toObject() {
            const data: {
                items?: ReturnType<typeof QAAssignedWorker.prototype.toObject>[];
                total?: number;
            } = {};
            if (this.items != null) {
                data.items = this.items.map((item: QAAssignedWorker) => item.toObject());
            }
            if (this.total != null) {
                data.total = this.total;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.items.length)
                writer.writeRepeatedMessage(1, this.items, (item: QAAssignedWorker) => item.serialize(writer));
            if (this.total != 0)
                writer.writeUint64(2, this.total);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): QAAssignedWorkerListResp {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new QAAssignedWorkerListResp();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.items, () => pb_1.Message.addToRepeatedWrapperField(message, 1, QAAssignedWorker.deserialize(reader), QAAssignedWorker));
                        break;
                    case 2:
                        message.total = reader.readUint64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): QAAssignedWorkerListResp {
            return QAAssignedWorkerListResp.deserialize(bytes);
        }
    }
    export class SetQAAssignedWorkerReq extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            worker_id?: number;
            is_assigned?: boolean;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("worker_id" in data && data.worker_id != undefined) {
                    this.worker_id = data.worker_id;
                }
                if ("is_assigned" in data && data.is_assigned != undefined) {
                    this.is_assigned = data.is_assigned;
                }
            }
        }
        get worker_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set worker_id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get is_assigned() {
            return pb_1.Message.getFieldWithDefault(this, 2, false) as boolean;
        }
        set is_assigned(value: boolean) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            worker_id?: number;
            is_assigned?: boolean;
        }): SetQAAssignedWorkerReq {
            const message = new SetQAAssignedWorkerReq({});
            if (data.worker_id != null) {
                message.worker_id = data.worker_id;
            }
            if (data.is_assigned != null) {
                message.is_assigned = data.is_assigned;
            }
            return message;
        }
        toObject() {
            const data: {
                worker_id?: number;
                is_assigned?: boolean;
            } = {};
            if (this.worker_id != null) {
                data.worker_id = this.worker_id;
            }
            if (this.is_assigned != null) {
                data.is_assigned = this.is_assigned;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.worker_id != 0)
                writer.writeInt32(1, this.worker_id);
            if (this.is_assigned != false)
                writer.writeBool(2, this.is_assigned);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SetQAAssignedWorkerReq {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SetQAAssignedWorkerReq();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.worker_id = reader.readInt32();
                        break;
                    case 2:
                        message.is_assigned = reader.readBool();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): SetQAAssignedWorkerReq {
            return SetQAAssignedWorkerReq.deserialize(bytes);
        }
    }
    export class QualityWorkerReportRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            start_time?: dependency_2.google.protobuf.Timestamp;
            end_time?: dependency_2.google.protobuf.Timestamp;
            check_worker_id?: number;
            page?: number;
            pageSize?: number;
            sort_param?: QualityWorkerReportSortParam;
            sort_type?: dependency_5.api.common.SortType;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("start_time" in data && data.start_time != undefined) {
                    this.start_time = data.start_time;
                }
                if ("end_time" in data && data.end_time != undefined) {
                    this.end_time = data.end_time;
                }
                if ("check_worker_id" in data && data.check_worker_id != undefined) {
                    this.check_worker_id = data.check_worker_id;
                }
                if ("page" in data && data.page != undefined) {
                    this.page = data.page;
                }
                if ("pageSize" in data && data.pageSize != undefined) {
                    this.pageSize = data.pageSize;
                }
                if ("sort_param" in data && data.sort_param != undefined) {
                    this.sort_param = data.sort_param;
                }
                if ("sort_type" in data && data.sort_type != undefined) {
                    this.sort_type = data.sort_type;
                }
            }
        }
        get start_time() {
            return pb_1.Message.getWrapperField(this, dependency_2.google.protobuf.Timestamp, 1) as dependency_2.google.protobuf.Timestamp;
        }
        set start_time(value: dependency_2.google.protobuf.Timestamp) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_start_time() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get end_time() {
            return pb_1.Message.getWrapperField(this, dependency_2.google.protobuf.Timestamp, 2) as dependency_2.google.protobuf.Timestamp;
        }
        set end_time(value: dependency_2.google.protobuf.Timestamp) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_end_time() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get check_worker_id() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set check_worker_id(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        get page() {
            return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
        }
        set page(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        get pageSize() {
            return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
        }
        set pageSize(value: number) {
            pb_1.Message.setField(this, 5, value);
        }
        get sort_param() {
            return pb_1.Message.getFieldWithDefault(this, 6, QualityWorkerReportSortParam.CHECK_COUNT) as QualityWorkerReportSortParam;
        }
        set sort_param(value: QualityWorkerReportSortParam) {
            pb_1.Message.setField(this, 6, value);
        }
        get sort_type() {
            return pb_1.Message.getFieldWithDefault(this, 7, dependency_5.api.common.SortType.DESCEND) as dependency_5.api.common.SortType;
        }
        set sort_type(value: dependency_5.api.common.SortType) {
            pb_1.Message.setField(this, 7, value);
        }
        static fromObject(data: {
            start_time?: ReturnType<typeof dependency_2.google.protobuf.Timestamp.prototype.toObject>;
            end_time?: ReturnType<typeof dependency_2.google.protobuf.Timestamp.prototype.toObject>;
            check_worker_id?: number;
            page?: number;
            pageSize?: number;
            sort_param?: QualityWorkerReportSortParam;
            sort_type?: dependency_5.api.common.SortType;
        }): QualityWorkerReportRequest {
            const message = new QualityWorkerReportRequest({});
            if (data.start_time != null) {
                message.start_time = dependency_2.google.protobuf.Timestamp.fromObject(data.start_time);
            }
            if (data.end_time != null) {
                message.end_time = dependency_2.google.protobuf.Timestamp.fromObject(data.end_time);
            }
            if (data.check_worker_id != null) {
                message.check_worker_id = data.check_worker_id;
            }
            if (data.page != null) {
                message.page = data.page;
            }
            if (data.pageSize != null) {
                message.pageSize = data.pageSize;
            }
            if (data.sort_param != null) {
                message.sort_param = data.sort_param;
            }
            if (data.sort_type != null) {
                message.sort_type = data.sort_type;
            }
            return message;
        }
        toObject() {
            const data: {
                start_time?: ReturnType<typeof dependency_2.google.protobuf.Timestamp.prototype.toObject>;
                end_time?: ReturnType<typeof dependency_2.google.protobuf.Timestamp.prototype.toObject>;
                check_worker_id?: number;
                page?: number;
                pageSize?: number;
                sort_param?: QualityWorkerReportSortParam;
                sort_type?: dependency_5.api.common.SortType;
            } = {};
            if (this.start_time != null) {
                data.start_time = this.start_time.toObject();
            }
            if (this.end_time != null) {
                data.end_time = this.end_time.toObject();
            }
            if (this.check_worker_id != null) {
                data.check_worker_id = this.check_worker_id;
            }
            if (this.page != null) {
                data.page = this.page;
            }
            if (this.pageSize != null) {
                data.pageSize = this.pageSize;
            }
            if (this.sort_param != null) {
                data.sort_param = this.sort_param;
            }
            if (this.sort_type != null) {
                data.sort_type = this.sort_type;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_start_time)
                writer.writeMessage(1, this.start_time, () => this.start_time.serialize(writer));
            if (this.has_end_time)
                writer.writeMessage(2, this.end_time, () => this.end_time.serialize(writer));
            if (this.check_worker_id != 0)
                writer.writeInt32(3, this.check_worker_id);
            if (this.page != 0)
                writer.writeInt32(4, this.page);
            if (this.pageSize != 0)
                writer.writeInt32(5, this.pageSize);
            if (this.sort_param != QualityWorkerReportSortParam.CHECK_COUNT)
                writer.writeEnum(6, this.sort_param);
            if (this.sort_type != dependency_5.api.common.SortType.DESCEND)
                writer.writeEnum(7, this.sort_type);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): QualityWorkerReportRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new QualityWorkerReportRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.start_time, () => message.start_time = dependency_2.google.protobuf.Timestamp.deserialize(reader));
                        break;
                    case 2:
                        reader.readMessage(message.end_time, () => message.end_time = dependency_2.google.protobuf.Timestamp.deserialize(reader));
                        break;
                    case 3:
                        message.check_worker_id = reader.readInt32();
                        break;
                    case 4:
                        message.page = reader.readInt32();
                        break;
                    case 5:
                        message.pageSize = reader.readInt32();
                        break;
                    case 6:
                        message.sort_param = reader.readEnum();
                        break;
                    case 7:
                        message.sort_type = reader.readEnum();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): QualityWorkerReportRequest {
            return QualityWorkerReportRequest.deserialize(bytes);
        }
    }
    export class QualityWorkerReportEntity extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            worker_id?: number;
            worker_name?: string;
            check_count?: number;
            finished_count?: number;
            finished_rate?: number;
            combine_check_count?: number;
            combine_check_rate?: number;
            must_check_count?: number;
            must_check_rate?: number;
            review_check_count?: number;
            review_check_rate?: number;
            very_bad_count?: number;
            very_bad_rate?: number;
            bad_count?: number;
            bad_rate?: number;
            normal_count?: number;
            normal_rate?: number;
            excellent_count?: number;
            excellent_rate?: number;
            qualified_count?: number;
            qualified_rate?: number;
            total_check_duration?: string;
            Avg_check_duration?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("worker_id" in data && data.worker_id != undefined) {
                    this.worker_id = data.worker_id;
                }
                if ("worker_name" in data && data.worker_name != undefined) {
                    this.worker_name = data.worker_name;
                }
                if ("check_count" in data && data.check_count != undefined) {
                    this.check_count = data.check_count;
                }
                if ("finished_count" in data && data.finished_count != undefined) {
                    this.finished_count = data.finished_count;
                }
                if ("finished_rate" in data && data.finished_rate != undefined) {
                    this.finished_rate = data.finished_rate;
                }
                if ("combine_check_count" in data && data.combine_check_count != undefined) {
                    this.combine_check_count = data.combine_check_count;
                }
                if ("combine_check_rate" in data && data.combine_check_rate != undefined) {
                    this.combine_check_rate = data.combine_check_rate;
                }
                if ("must_check_count" in data && data.must_check_count != undefined) {
                    this.must_check_count = data.must_check_count;
                }
                if ("must_check_rate" in data && data.must_check_rate != undefined) {
                    this.must_check_rate = data.must_check_rate;
                }
                if ("review_check_count" in data && data.review_check_count != undefined) {
                    this.review_check_count = data.review_check_count;
                }
                if ("review_check_rate" in data && data.review_check_rate != undefined) {
                    this.review_check_rate = data.review_check_rate;
                }
                if ("very_bad_count" in data && data.very_bad_count != undefined) {
                    this.very_bad_count = data.very_bad_count;
                }
                if ("very_bad_rate" in data && data.very_bad_rate != undefined) {
                    this.very_bad_rate = data.very_bad_rate;
                }
                if ("bad_count" in data && data.bad_count != undefined) {
                    this.bad_count = data.bad_count;
                }
                if ("bad_rate" in data && data.bad_rate != undefined) {
                    this.bad_rate = data.bad_rate;
                }
                if ("normal_count" in data && data.normal_count != undefined) {
                    this.normal_count = data.normal_count;
                }
                if ("normal_rate" in data && data.normal_rate != undefined) {
                    this.normal_rate = data.normal_rate;
                }
                if ("excellent_count" in data && data.excellent_count != undefined) {
                    this.excellent_count = data.excellent_count;
                }
                if ("excellent_rate" in data && data.excellent_rate != undefined) {
                    this.excellent_rate = data.excellent_rate;
                }
                if ("qualified_count" in data && data.qualified_count != undefined) {
                    this.qualified_count = data.qualified_count;
                }
                if ("qualified_rate" in data && data.qualified_rate != undefined) {
                    this.qualified_rate = data.qualified_rate;
                }
                if ("total_check_duration" in data && data.total_check_duration != undefined) {
                    this.total_check_duration = data.total_check_duration;
                }
                if ("Avg_check_duration" in data && data.Avg_check_duration != undefined) {
                    this.Avg_check_duration = data.Avg_check_duration;
                }
            }
        }
        get worker_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set worker_id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get worker_name() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set worker_name(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get check_count() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set check_count(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        get finished_count() {
            return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
        }
        set finished_count(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        get finished_rate() {
            return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
        }
        set finished_rate(value: number) {
            pb_1.Message.setField(this, 5, value);
        }
        get combine_check_count() {
            return pb_1.Message.getFieldWithDefault(this, 6, 0) as number;
        }
        set combine_check_count(value: number) {
            pb_1.Message.setField(this, 6, value);
        }
        get combine_check_rate() {
            return pb_1.Message.getFieldWithDefault(this, 7, 0) as number;
        }
        set combine_check_rate(value: number) {
            pb_1.Message.setField(this, 7, value);
        }
        get must_check_count() {
            return pb_1.Message.getFieldWithDefault(this, 8, 0) as number;
        }
        set must_check_count(value: number) {
            pb_1.Message.setField(this, 8, value);
        }
        get must_check_rate() {
            return pb_1.Message.getFieldWithDefault(this, 9, 0) as number;
        }
        set must_check_rate(value: number) {
            pb_1.Message.setField(this, 9, value);
        }
        get review_check_count() {
            return pb_1.Message.getFieldWithDefault(this, 10, 0) as number;
        }
        set review_check_count(value: number) {
            pb_1.Message.setField(this, 10, value);
        }
        get review_check_rate() {
            return pb_1.Message.getFieldWithDefault(this, 11, 0) as number;
        }
        set review_check_rate(value: number) {
            pb_1.Message.setField(this, 11, value);
        }
        get very_bad_count() {
            return pb_1.Message.getFieldWithDefault(this, 12, 0) as number;
        }
        set very_bad_count(value: number) {
            pb_1.Message.setField(this, 12, value);
        }
        get very_bad_rate() {
            return pb_1.Message.getFieldWithDefault(this, 13, 0) as number;
        }
        set very_bad_rate(value: number) {
            pb_1.Message.setField(this, 13, value);
        }
        get bad_count() {
            return pb_1.Message.getFieldWithDefault(this, 14, 0) as number;
        }
        set bad_count(value: number) {
            pb_1.Message.setField(this, 14, value);
        }
        get bad_rate() {
            return pb_1.Message.getFieldWithDefault(this, 15, 0) as number;
        }
        set bad_rate(value: number) {
            pb_1.Message.setField(this, 15, value);
        }
        get normal_count() {
            return pb_1.Message.getFieldWithDefault(this, 16, 0) as number;
        }
        set normal_count(value: number) {
            pb_1.Message.setField(this, 16, value);
        }
        get normal_rate() {
            return pb_1.Message.getFieldWithDefault(this, 17, 0) as number;
        }
        set normal_rate(value: number) {
            pb_1.Message.setField(this, 17, value);
        }
        get excellent_count() {
            return pb_1.Message.getFieldWithDefault(this, 18, 0) as number;
        }
        set excellent_count(value: number) {
            pb_1.Message.setField(this, 18, value);
        }
        get excellent_rate() {
            return pb_1.Message.getFieldWithDefault(this, 19, 0) as number;
        }
        set excellent_rate(value: number) {
            pb_1.Message.setField(this, 19, value);
        }
        get qualified_count() {
            return pb_1.Message.getFieldWithDefault(this, 20, 0) as number;
        }
        set qualified_count(value: number) {
            pb_1.Message.setField(this, 20, value);
        }
        get qualified_rate() {
            return pb_1.Message.getFieldWithDefault(this, 21, 0) as number;
        }
        set qualified_rate(value: number) {
            pb_1.Message.setField(this, 21, value);
        }
        get total_check_duration() {
            return pb_1.Message.getFieldWithDefault(this, 22, "") as string;
        }
        set total_check_duration(value: string) {
            pb_1.Message.setField(this, 22, value);
        }
        get Avg_check_duration() {
            return pb_1.Message.getFieldWithDefault(this, 23, "") as string;
        }
        set Avg_check_duration(value: string) {
            pb_1.Message.setField(this, 23, value);
        }
        static fromObject(data: {
            worker_id?: number;
            worker_name?: string;
            check_count?: number;
            finished_count?: number;
            finished_rate?: number;
            combine_check_count?: number;
            combine_check_rate?: number;
            must_check_count?: number;
            must_check_rate?: number;
            review_check_count?: number;
            review_check_rate?: number;
            very_bad_count?: number;
            very_bad_rate?: number;
            bad_count?: number;
            bad_rate?: number;
            normal_count?: number;
            normal_rate?: number;
            excellent_count?: number;
            excellent_rate?: number;
            qualified_count?: number;
            qualified_rate?: number;
            total_check_duration?: string;
            Avg_check_duration?: string;
        }): QualityWorkerReportEntity {
            const message = new QualityWorkerReportEntity({});
            if (data.worker_id != null) {
                message.worker_id = data.worker_id;
            }
            if (data.worker_name != null) {
                message.worker_name = data.worker_name;
            }
            if (data.check_count != null) {
                message.check_count = data.check_count;
            }
            if (data.finished_count != null) {
                message.finished_count = data.finished_count;
            }
            if (data.finished_rate != null) {
                message.finished_rate = data.finished_rate;
            }
            if (data.combine_check_count != null) {
                message.combine_check_count = data.combine_check_count;
            }
            if (data.combine_check_rate != null) {
                message.combine_check_rate = data.combine_check_rate;
            }
            if (data.must_check_count != null) {
                message.must_check_count = data.must_check_count;
            }
            if (data.must_check_rate != null) {
                message.must_check_rate = data.must_check_rate;
            }
            if (data.review_check_count != null) {
                message.review_check_count = data.review_check_count;
            }
            if (data.review_check_rate != null) {
                message.review_check_rate = data.review_check_rate;
            }
            if (data.very_bad_count != null) {
                message.very_bad_count = data.very_bad_count;
            }
            if (data.very_bad_rate != null) {
                message.very_bad_rate = data.very_bad_rate;
            }
            if (data.bad_count != null) {
                message.bad_count = data.bad_count;
            }
            if (data.bad_rate != null) {
                message.bad_rate = data.bad_rate;
            }
            if (data.normal_count != null) {
                message.normal_count = data.normal_count;
            }
            if (data.normal_rate != null) {
                message.normal_rate = data.normal_rate;
            }
            if (data.excellent_count != null) {
                message.excellent_count = data.excellent_count;
            }
            if (data.excellent_rate != null) {
                message.excellent_rate = data.excellent_rate;
            }
            if (data.qualified_count != null) {
                message.qualified_count = data.qualified_count;
            }
            if (data.qualified_rate != null) {
                message.qualified_rate = data.qualified_rate;
            }
            if (data.total_check_duration != null) {
                message.total_check_duration = data.total_check_duration;
            }
            if (data.Avg_check_duration != null) {
                message.Avg_check_duration = data.Avg_check_duration;
            }
            return message;
        }
        toObject() {
            const data: {
                worker_id?: number;
                worker_name?: string;
                check_count?: number;
                finished_count?: number;
                finished_rate?: number;
                combine_check_count?: number;
                combine_check_rate?: number;
                must_check_count?: number;
                must_check_rate?: number;
                review_check_count?: number;
                review_check_rate?: number;
                very_bad_count?: number;
                very_bad_rate?: number;
                bad_count?: number;
                bad_rate?: number;
                normal_count?: number;
                normal_rate?: number;
                excellent_count?: number;
                excellent_rate?: number;
                qualified_count?: number;
                qualified_rate?: number;
                total_check_duration?: string;
                Avg_check_duration?: string;
            } = {};
            if (this.worker_id != null) {
                data.worker_id = this.worker_id;
            }
            if (this.worker_name != null) {
                data.worker_name = this.worker_name;
            }
            if (this.check_count != null) {
                data.check_count = this.check_count;
            }
            if (this.finished_count != null) {
                data.finished_count = this.finished_count;
            }
            if (this.finished_rate != null) {
                data.finished_rate = this.finished_rate;
            }
            if (this.combine_check_count != null) {
                data.combine_check_count = this.combine_check_count;
            }
            if (this.combine_check_rate != null) {
                data.combine_check_rate = this.combine_check_rate;
            }
            if (this.must_check_count != null) {
                data.must_check_count = this.must_check_count;
            }
            if (this.must_check_rate != null) {
                data.must_check_rate = this.must_check_rate;
            }
            if (this.review_check_count != null) {
                data.review_check_count = this.review_check_count;
            }
            if (this.review_check_rate != null) {
                data.review_check_rate = this.review_check_rate;
            }
            if (this.very_bad_count != null) {
                data.very_bad_count = this.very_bad_count;
            }
            if (this.very_bad_rate != null) {
                data.very_bad_rate = this.very_bad_rate;
            }
            if (this.bad_count != null) {
                data.bad_count = this.bad_count;
            }
            if (this.bad_rate != null) {
                data.bad_rate = this.bad_rate;
            }
            if (this.normal_count != null) {
                data.normal_count = this.normal_count;
            }
            if (this.normal_rate != null) {
                data.normal_rate = this.normal_rate;
            }
            if (this.excellent_count != null) {
                data.excellent_count = this.excellent_count;
            }
            if (this.excellent_rate != null) {
                data.excellent_rate = this.excellent_rate;
            }
            if (this.qualified_count != null) {
                data.qualified_count = this.qualified_count;
            }
            if (this.qualified_rate != null) {
                data.qualified_rate = this.qualified_rate;
            }
            if (this.total_check_duration != null) {
                data.total_check_duration = this.total_check_duration;
            }
            if (this.Avg_check_duration != null) {
                data.Avg_check_duration = this.Avg_check_duration;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.worker_id != 0)
                writer.writeInt32(1, this.worker_id);
            if (this.worker_name.length)
                writer.writeString(2, this.worker_name);
            if (this.check_count != 0)
                writer.writeInt32(3, this.check_count);
            if (this.finished_count != 0)
                writer.writeInt32(4, this.finished_count);
            if (this.finished_rate != 0)
                writer.writeInt32(5, this.finished_rate);
            if (this.combine_check_count != 0)
                writer.writeInt32(6, this.combine_check_count);
            if (this.combine_check_rate != 0)
                writer.writeInt32(7, this.combine_check_rate);
            if (this.must_check_count != 0)
                writer.writeInt32(8, this.must_check_count);
            if (this.must_check_rate != 0)
                writer.writeInt32(9, this.must_check_rate);
            if (this.review_check_count != 0)
                writer.writeInt32(10, this.review_check_count);
            if (this.review_check_rate != 0)
                writer.writeInt32(11, this.review_check_rate);
            if (this.very_bad_count != 0)
                writer.writeInt32(12, this.very_bad_count);
            if (this.very_bad_rate != 0)
                writer.writeDouble(13, this.very_bad_rate);
            if (this.bad_count != 0)
                writer.writeInt32(14, this.bad_count);
            if (this.bad_rate != 0)
                writer.writeDouble(15, this.bad_rate);
            if (this.normal_count != 0)
                writer.writeInt32(16, this.normal_count);
            if (this.normal_rate != 0)
                writer.writeDouble(17, this.normal_rate);
            if (this.excellent_count != 0)
                writer.writeInt32(18, this.excellent_count);
            if (this.excellent_rate != 0)
                writer.writeDouble(19, this.excellent_rate);
            if (this.qualified_count != 0)
                writer.writeInt32(20, this.qualified_count);
            if (this.qualified_rate != 0)
                writer.writeDouble(21, this.qualified_rate);
            if (this.total_check_duration.length)
                writer.writeString(22, this.total_check_duration);
            if (this.Avg_check_duration.length)
                writer.writeString(23, this.Avg_check_duration);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): QualityWorkerReportEntity {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new QualityWorkerReportEntity();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.worker_id = reader.readInt32();
                        break;
                    case 2:
                        message.worker_name = reader.readString();
                        break;
                    case 3:
                        message.check_count = reader.readInt32();
                        break;
                    case 4:
                        message.finished_count = reader.readInt32();
                        break;
                    case 5:
                        message.finished_rate = reader.readInt32();
                        break;
                    case 6:
                        message.combine_check_count = reader.readInt32();
                        break;
                    case 7:
                        message.combine_check_rate = reader.readInt32();
                        break;
                    case 8:
                        message.must_check_count = reader.readInt32();
                        break;
                    case 9:
                        message.must_check_rate = reader.readInt32();
                        break;
                    case 10:
                        message.review_check_count = reader.readInt32();
                        break;
                    case 11:
                        message.review_check_rate = reader.readInt32();
                        break;
                    case 12:
                        message.very_bad_count = reader.readInt32();
                        break;
                    case 13:
                        message.very_bad_rate = reader.readDouble();
                        break;
                    case 14:
                        message.bad_count = reader.readInt32();
                        break;
                    case 15:
                        message.bad_rate = reader.readDouble();
                        break;
                    case 16:
                        message.normal_count = reader.readInt32();
                        break;
                    case 17:
                        message.normal_rate = reader.readDouble();
                        break;
                    case 18:
                        message.excellent_count = reader.readInt32();
                        break;
                    case 19:
                        message.excellent_rate = reader.readDouble();
                        break;
                    case 20:
                        message.qualified_count = reader.readInt32();
                        break;
                    case 21:
                        message.qualified_rate = reader.readDouble();
                        break;
                    case 22:
                        message.total_check_duration = reader.readString();
                        break;
                    case 23:
                        message.Avg_check_duration = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): QualityWorkerReportEntity {
            return QualityWorkerReportEntity.deserialize(bytes);
        }
    }
    export class QualityWorkerReportStatistic extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            check_worker_count?: number;
            check_count?: number;
            finished_count?: number;
            finished_rate?: number;
            combine_check_count?: number;
            combine_check_rate?: number;
            must_check_count?: number;
            must_check_rate?: number;
            review_check_count?: number;
            review_check_rate?: number;
            total_check_duration?: string;
            avg_check_duration?: string;
            very_bad_count?: number;
            very_bad_rate?: number;
            bad_count?: number;
            bad_rate?: number;
            qualified_count?: number;
            qualified_rate?: number;
            total_check_worker_count?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("check_worker_count" in data && data.check_worker_count != undefined) {
                    this.check_worker_count = data.check_worker_count;
                }
                if ("check_count" in data && data.check_count != undefined) {
                    this.check_count = data.check_count;
                }
                if ("finished_count" in data && data.finished_count != undefined) {
                    this.finished_count = data.finished_count;
                }
                if ("finished_rate" in data && data.finished_rate != undefined) {
                    this.finished_rate = data.finished_rate;
                }
                if ("combine_check_count" in data && data.combine_check_count != undefined) {
                    this.combine_check_count = data.combine_check_count;
                }
                if ("combine_check_rate" in data && data.combine_check_rate != undefined) {
                    this.combine_check_rate = data.combine_check_rate;
                }
                if ("must_check_count" in data && data.must_check_count != undefined) {
                    this.must_check_count = data.must_check_count;
                }
                if ("must_check_rate" in data && data.must_check_rate != undefined) {
                    this.must_check_rate = data.must_check_rate;
                }
                if ("review_check_count" in data && data.review_check_count != undefined) {
                    this.review_check_count = data.review_check_count;
                }
                if ("review_check_rate" in data && data.review_check_rate != undefined) {
                    this.review_check_rate = data.review_check_rate;
                }
                if ("total_check_duration" in data && data.total_check_duration != undefined) {
                    this.total_check_duration = data.total_check_duration;
                }
                if ("avg_check_duration" in data && data.avg_check_duration != undefined) {
                    this.avg_check_duration = data.avg_check_duration;
                }
                if ("very_bad_count" in data && data.very_bad_count != undefined) {
                    this.very_bad_count = data.very_bad_count;
                }
                if ("very_bad_rate" in data && data.very_bad_rate != undefined) {
                    this.very_bad_rate = data.very_bad_rate;
                }
                if ("bad_count" in data && data.bad_count != undefined) {
                    this.bad_count = data.bad_count;
                }
                if ("bad_rate" in data && data.bad_rate != undefined) {
                    this.bad_rate = data.bad_rate;
                }
                if ("qualified_count" in data && data.qualified_count != undefined) {
                    this.qualified_count = data.qualified_count;
                }
                if ("qualified_rate" in data && data.qualified_rate != undefined) {
                    this.qualified_rate = data.qualified_rate;
                }
                if ("total_check_worker_count" in data && data.total_check_worker_count != undefined) {
                    this.total_check_worker_count = data.total_check_worker_count;
                }
            }
        }
        get check_worker_count() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set check_worker_count(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get check_count() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set check_count(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get finished_count() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set finished_count(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        get finished_rate() {
            return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
        }
        set finished_rate(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        get combine_check_count() {
            return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
        }
        set combine_check_count(value: number) {
            pb_1.Message.setField(this, 5, value);
        }
        get combine_check_rate() {
            return pb_1.Message.getFieldWithDefault(this, 6, 0) as number;
        }
        set combine_check_rate(value: number) {
            pb_1.Message.setField(this, 6, value);
        }
        get must_check_count() {
            return pb_1.Message.getFieldWithDefault(this, 7, 0) as number;
        }
        set must_check_count(value: number) {
            pb_1.Message.setField(this, 7, value);
        }
        get must_check_rate() {
            return pb_1.Message.getFieldWithDefault(this, 8, 0) as number;
        }
        set must_check_rate(value: number) {
            pb_1.Message.setField(this, 8, value);
        }
        get review_check_count() {
            return pb_1.Message.getFieldWithDefault(this, 9, 0) as number;
        }
        set review_check_count(value: number) {
            pb_1.Message.setField(this, 9, value);
        }
        get review_check_rate() {
            return pb_1.Message.getFieldWithDefault(this, 10, 0) as number;
        }
        set review_check_rate(value: number) {
            pb_1.Message.setField(this, 10, value);
        }
        get total_check_duration() {
            return pb_1.Message.getFieldWithDefault(this, 11, "") as string;
        }
        set total_check_duration(value: string) {
            pb_1.Message.setField(this, 11, value);
        }
        get avg_check_duration() {
            return pb_1.Message.getFieldWithDefault(this, 12, "") as string;
        }
        set avg_check_duration(value: string) {
            pb_1.Message.setField(this, 12, value);
        }
        get very_bad_count() {
            return pb_1.Message.getFieldWithDefault(this, 13, 0) as number;
        }
        set very_bad_count(value: number) {
            pb_1.Message.setField(this, 13, value);
        }
        get very_bad_rate() {
            return pb_1.Message.getFieldWithDefault(this, 14, 0) as number;
        }
        set very_bad_rate(value: number) {
            pb_1.Message.setField(this, 14, value);
        }
        get bad_count() {
            return pb_1.Message.getFieldWithDefault(this, 15, 0) as number;
        }
        set bad_count(value: number) {
            pb_1.Message.setField(this, 15, value);
        }
        get bad_rate() {
            return pb_1.Message.getFieldWithDefault(this, 16, 0) as number;
        }
        set bad_rate(value: number) {
            pb_1.Message.setField(this, 16, value);
        }
        get qualified_count() {
            return pb_1.Message.getFieldWithDefault(this, 17, 0) as number;
        }
        set qualified_count(value: number) {
            pb_1.Message.setField(this, 17, value);
        }
        get qualified_rate() {
            return pb_1.Message.getFieldWithDefault(this, 18, 0) as number;
        }
        set qualified_rate(value: number) {
            pb_1.Message.setField(this, 18, value);
        }
        get total_check_worker_count() {
            return pb_1.Message.getFieldWithDefault(this, 19, 0) as number;
        }
        set total_check_worker_count(value: number) {
            pb_1.Message.setField(this, 19, value);
        }
        static fromObject(data: {
            check_worker_count?: number;
            check_count?: number;
            finished_count?: number;
            finished_rate?: number;
            combine_check_count?: number;
            combine_check_rate?: number;
            must_check_count?: number;
            must_check_rate?: number;
            review_check_count?: number;
            review_check_rate?: number;
            total_check_duration?: string;
            avg_check_duration?: string;
            very_bad_count?: number;
            very_bad_rate?: number;
            bad_count?: number;
            bad_rate?: number;
            qualified_count?: number;
            qualified_rate?: number;
            total_check_worker_count?: number;
        }): QualityWorkerReportStatistic {
            const message = new QualityWorkerReportStatistic({});
            if (data.check_worker_count != null) {
                message.check_worker_count = data.check_worker_count;
            }
            if (data.check_count != null) {
                message.check_count = data.check_count;
            }
            if (data.finished_count != null) {
                message.finished_count = data.finished_count;
            }
            if (data.finished_rate != null) {
                message.finished_rate = data.finished_rate;
            }
            if (data.combine_check_count != null) {
                message.combine_check_count = data.combine_check_count;
            }
            if (data.combine_check_rate != null) {
                message.combine_check_rate = data.combine_check_rate;
            }
            if (data.must_check_count != null) {
                message.must_check_count = data.must_check_count;
            }
            if (data.must_check_rate != null) {
                message.must_check_rate = data.must_check_rate;
            }
            if (data.review_check_count != null) {
                message.review_check_count = data.review_check_count;
            }
            if (data.review_check_rate != null) {
                message.review_check_rate = data.review_check_rate;
            }
            if (data.total_check_duration != null) {
                message.total_check_duration = data.total_check_duration;
            }
            if (data.avg_check_duration != null) {
                message.avg_check_duration = data.avg_check_duration;
            }
            if (data.very_bad_count != null) {
                message.very_bad_count = data.very_bad_count;
            }
            if (data.very_bad_rate != null) {
                message.very_bad_rate = data.very_bad_rate;
            }
            if (data.bad_count != null) {
                message.bad_count = data.bad_count;
            }
            if (data.bad_rate != null) {
                message.bad_rate = data.bad_rate;
            }
            if (data.qualified_count != null) {
                message.qualified_count = data.qualified_count;
            }
            if (data.qualified_rate != null) {
                message.qualified_rate = data.qualified_rate;
            }
            if (data.total_check_worker_count != null) {
                message.total_check_worker_count = data.total_check_worker_count;
            }
            return message;
        }
        toObject() {
            const data: {
                check_worker_count?: number;
                check_count?: number;
                finished_count?: number;
                finished_rate?: number;
                combine_check_count?: number;
                combine_check_rate?: number;
                must_check_count?: number;
                must_check_rate?: number;
                review_check_count?: number;
                review_check_rate?: number;
                total_check_duration?: string;
                avg_check_duration?: string;
                very_bad_count?: number;
                very_bad_rate?: number;
                bad_count?: number;
                bad_rate?: number;
                qualified_count?: number;
                qualified_rate?: number;
                total_check_worker_count?: number;
            } = {};
            if (this.check_worker_count != null) {
                data.check_worker_count = this.check_worker_count;
            }
            if (this.check_count != null) {
                data.check_count = this.check_count;
            }
            if (this.finished_count != null) {
                data.finished_count = this.finished_count;
            }
            if (this.finished_rate != null) {
                data.finished_rate = this.finished_rate;
            }
            if (this.combine_check_count != null) {
                data.combine_check_count = this.combine_check_count;
            }
            if (this.combine_check_rate != null) {
                data.combine_check_rate = this.combine_check_rate;
            }
            if (this.must_check_count != null) {
                data.must_check_count = this.must_check_count;
            }
            if (this.must_check_rate != null) {
                data.must_check_rate = this.must_check_rate;
            }
            if (this.review_check_count != null) {
                data.review_check_count = this.review_check_count;
            }
            if (this.review_check_rate != null) {
                data.review_check_rate = this.review_check_rate;
            }
            if (this.total_check_duration != null) {
                data.total_check_duration = this.total_check_duration;
            }
            if (this.avg_check_duration != null) {
                data.avg_check_duration = this.avg_check_duration;
            }
            if (this.very_bad_count != null) {
                data.very_bad_count = this.very_bad_count;
            }
            if (this.very_bad_rate != null) {
                data.very_bad_rate = this.very_bad_rate;
            }
            if (this.bad_count != null) {
                data.bad_count = this.bad_count;
            }
            if (this.bad_rate != null) {
                data.bad_rate = this.bad_rate;
            }
            if (this.qualified_count != null) {
                data.qualified_count = this.qualified_count;
            }
            if (this.qualified_rate != null) {
                data.qualified_rate = this.qualified_rate;
            }
            if (this.total_check_worker_count != null) {
                data.total_check_worker_count = this.total_check_worker_count;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.check_worker_count != 0)
                writer.writeInt32(1, this.check_worker_count);
            if (this.check_count != 0)
                writer.writeInt32(2, this.check_count);
            if (this.finished_count != 0)
                writer.writeInt32(3, this.finished_count);
            if (this.finished_rate != 0)
                writer.writeInt32(4, this.finished_rate);
            if (this.combine_check_count != 0)
                writer.writeInt32(5, this.combine_check_count);
            if (this.combine_check_rate != 0)
                writer.writeInt32(6, this.combine_check_rate);
            if (this.must_check_count != 0)
                writer.writeInt32(7, this.must_check_count);
            if (this.must_check_rate != 0)
                writer.writeInt32(8, this.must_check_rate);
            if (this.review_check_count != 0)
                writer.writeInt32(9, this.review_check_count);
            if (this.review_check_rate != 0)
                writer.writeInt32(10, this.review_check_rate);
            if (this.total_check_duration.length)
                writer.writeString(11, this.total_check_duration);
            if (this.avg_check_duration.length)
                writer.writeString(12, this.avg_check_duration);
            if (this.very_bad_count != 0)
                writer.writeInt32(13, this.very_bad_count);
            if (this.very_bad_rate != 0)
                writer.writeInt32(14, this.very_bad_rate);
            if (this.bad_count != 0)
                writer.writeInt32(15, this.bad_count);
            if (this.bad_rate != 0)
                writer.writeInt32(16, this.bad_rate);
            if (this.qualified_count != 0)
                writer.writeInt32(17, this.qualified_count);
            if (this.qualified_rate != 0)
                writer.writeInt32(18, this.qualified_rate);
            if (this.total_check_worker_count != 0)
                writer.writeInt32(19, this.total_check_worker_count);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): QualityWorkerReportStatistic {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new QualityWorkerReportStatistic();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.check_worker_count = reader.readInt32();
                        break;
                    case 2:
                        message.check_count = reader.readInt32();
                        break;
                    case 3:
                        message.finished_count = reader.readInt32();
                        break;
                    case 4:
                        message.finished_rate = reader.readInt32();
                        break;
                    case 5:
                        message.combine_check_count = reader.readInt32();
                        break;
                    case 6:
                        message.combine_check_rate = reader.readInt32();
                        break;
                    case 7:
                        message.must_check_count = reader.readInt32();
                        break;
                    case 8:
                        message.must_check_rate = reader.readInt32();
                        break;
                    case 9:
                        message.review_check_count = reader.readInt32();
                        break;
                    case 10:
                        message.review_check_rate = reader.readInt32();
                        break;
                    case 11:
                        message.total_check_duration = reader.readString();
                        break;
                    case 12:
                        message.avg_check_duration = reader.readString();
                        break;
                    case 13:
                        message.very_bad_count = reader.readInt32();
                        break;
                    case 14:
                        message.very_bad_rate = reader.readInt32();
                        break;
                    case 15:
                        message.bad_count = reader.readInt32();
                        break;
                    case 16:
                        message.bad_rate = reader.readInt32();
                        break;
                    case 17:
                        message.qualified_count = reader.readInt32();
                        break;
                    case 18:
                        message.qualified_rate = reader.readInt32();
                        break;
                    case 19:
                        message.total_check_worker_count = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): QualityWorkerReportStatistic {
            return QualityWorkerReportStatistic.deserialize(bytes);
        }
    }
    export class QualityWorkerReportResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            statistic?: QualityWorkerReportStatistic;
            list?: QualityWorkerReportEntity[];
            total?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [2], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("statistic" in data && data.statistic != undefined) {
                    this.statistic = data.statistic;
                }
                if ("list" in data && data.list != undefined) {
                    this.list = data.list;
                }
                if ("total" in data && data.total != undefined) {
                    this.total = data.total;
                }
            }
        }
        get statistic() {
            return pb_1.Message.getWrapperField(this, QualityWorkerReportStatistic, 1) as QualityWorkerReportStatistic;
        }
        set statistic(value: QualityWorkerReportStatistic) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_statistic() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get list() {
            return pb_1.Message.getRepeatedWrapperField(this, QualityWorkerReportEntity, 2) as QualityWorkerReportEntity[];
        }
        set list(value: QualityWorkerReportEntity[]) {
            pb_1.Message.setRepeatedWrapperField(this, 2, value);
        }
        get total() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set total(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            statistic?: ReturnType<typeof QualityWorkerReportStatistic.prototype.toObject>;
            list?: ReturnType<typeof QualityWorkerReportEntity.prototype.toObject>[];
            total?: number;
        }): QualityWorkerReportResponse {
            const message = new QualityWorkerReportResponse({});
            if (data.statistic != null) {
                message.statistic = QualityWorkerReportStatistic.fromObject(data.statistic);
            }
            if (data.list != null) {
                message.list = data.list.map(item => QualityWorkerReportEntity.fromObject(item));
            }
            if (data.total != null) {
                message.total = data.total;
            }
            return message;
        }
        toObject() {
            const data: {
                statistic?: ReturnType<typeof QualityWorkerReportStatistic.prototype.toObject>;
                list?: ReturnType<typeof QualityWorkerReportEntity.prototype.toObject>[];
                total?: number;
            } = {};
            if (this.statistic != null) {
                data.statistic = this.statistic.toObject();
            }
            if (this.list != null) {
                data.list = this.list.map((item: QualityWorkerReportEntity) => item.toObject());
            }
            if (this.total != null) {
                data.total = this.total;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_statistic)
                writer.writeMessage(1, this.statistic, () => this.statistic.serialize(writer));
            if (this.list.length)
                writer.writeRepeatedMessage(2, this.list, (item: QualityWorkerReportEntity) => item.serialize(writer));
            if (this.total != 0)
                writer.writeInt32(3, this.total);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): QualityWorkerReportResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new QualityWorkerReportResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.statistic, () => message.statistic = QualityWorkerReportStatistic.deserialize(reader));
                        break;
                    case 2:
                        reader.readMessage(message.list, () => pb_1.Message.addToRepeatedWrapperField(message, 2, QualityWorkerReportEntity.deserialize(reader), QualityWorkerReportEntity));
                        break;
                    case 3:
                        message.total = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): QualityWorkerReportResponse {
            return QualityWorkerReportResponse.deserialize(bytes);
        }
    }
    export class QualityCheckWorkerNameAndIdMapEntity extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            check_worker_id?: number;
            check_worker_name?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("check_worker_id" in data && data.check_worker_id != undefined) {
                    this.check_worker_id = data.check_worker_id;
                }
                if ("check_worker_name" in data && data.check_worker_name != undefined) {
                    this.check_worker_name = data.check_worker_name;
                }
            }
        }
        get check_worker_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set check_worker_id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get check_worker_name() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set check_worker_name(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            check_worker_id?: number;
            check_worker_name?: string;
        }): QualityCheckWorkerNameAndIdMapEntity {
            const message = new QualityCheckWorkerNameAndIdMapEntity({});
            if (data.check_worker_id != null) {
                message.check_worker_id = data.check_worker_id;
            }
            if (data.check_worker_name != null) {
                message.check_worker_name = data.check_worker_name;
            }
            return message;
        }
        toObject() {
            const data: {
                check_worker_id?: number;
                check_worker_name?: string;
            } = {};
            if (this.check_worker_id != null) {
                data.check_worker_id = this.check_worker_id;
            }
            if (this.check_worker_name != null) {
                data.check_worker_name = this.check_worker_name;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.check_worker_id != 0)
                writer.writeInt32(1, this.check_worker_id);
            if (this.check_worker_name.length)
                writer.writeString(2, this.check_worker_name);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): QualityCheckWorkerNameAndIdMapEntity {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new QualityCheckWorkerNameAndIdMapEntity();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.check_worker_id = reader.readInt32();
                        break;
                    case 2:
                        message.check_worker_name = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): QualityCheckWorkerNameAndIdMapEntity {
            return QualityCheckWorkerNameAndIdMapEntity.deserialize(bytes);
        }
    }
    export class QualityCheckWorkerNameAndIdMapListResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            list?: QualityCheckWorkerNameAndIdMapEntity[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("list" in data && data.list != undefined) {
                    this.list = data.list;
                }
            }
        }
        get list() {
            return pb_1.Message.getRepeatedWrapperField(this, QualityCheckWorkerNameAndIdMapEntity, 1) as QualityCheckWorkerNameAndIdMapEntity[];
        }
        set list(value: QualityCheckWorkerNameAndIdMapEntity[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        static fromObject(data: {
            list?: ReturnType<typeof QualityCheckWorkerNameAndIdMapEntity.prototype.toObject>[];
        }): QualityCheckWorkerNameAndIdMapListResponse {
            const message = new QualityCheckWorkerNameAndIdMapListResponse({});
            if (data.list != null) {
                message.list = data.list.map(item => QualityCheckWorkerNameAndIdMapEntity.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                list?: ReturnType<typeof QualityCheckWorkerNameAndIdMapEntity.prototype.toObject>[];
            } = {};
            if (this.list != null) {
                data.list = this.list.map((item: QualityCheckWorkerNameAndIdMapEntity) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.list.length)
                writer.writeRepeatedMessage(1, this.list, (item: QualityCheckWorkerNameAndIdMapEntity) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): QualityCheckWorkerNameAndIdMapListResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new QualityCheckWorkerNameAndIdMapListResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.list, () => pb_1.Message.addToRepeatedWrapperField(message, 1, QualityCheckWorkerNameAndIdMapEntity.deserialize(reader), QualityCheckWorkerNameAndIdMapEntity));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): QualityCheckWorkerNameAndIdMapListResponse {
            return QualityCheckWorkerNameAndIdMapListResponse.deserialize(bytes);
        }
    }
    export class WorkersMapUseBySearchEntity extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            worker_id?: number;
            worker_name?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("worker_id" in data && data.worker_id != undefined) {
                    this.worker_id = data.worker_id;
                }
                if ("worker_name" in data && data.worker_name != undefined) {
                    this.worker_name = data.worker_name;
                }
            }
        }
        get worker_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set worker_id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get worker_name() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set worker_name(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            worker_id?: number;
            worker_name?: string;
        }): WorkersMapUseBySearchEntity {
            const message = new WorkersMapUseBySearchEntity({});
            if (data.worker_id != null) {
                message.worker_id = data.worker_id;
            }
            if (data.worker_name != null) {
                message.worker_name = data.worker_name;
            }
            return message;
        }
        toObject() {
            const data: {
                worker_id?: number;
                worker_name?: string;
            } = {};
            if (this.worker_id != null) {
                data.worker_id = this.worker_id;
            }
            if (this.worker_name != null) {
                data.worker_name = this.worker_name;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.worker_id != 0)
                writer.writeInt32(1, this.worker_id);
            if (this.worker_name.length)
                writer.writeString(2, this.worker_name);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): WorkersMapUseBySearchEntity {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new WorkersMapUseBySearchEntity();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.worker_id = reader.readInt32();
                        break;
                    case 2:
                        message.worker_name = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): WorkersMapUseBySearchEntity {
            return WorkersMapUseBySearchEntity.deserialize(bytes);
        }
    }
    export class WorkersMapUseBySearchEntityList extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            list?: WorkersMapUseBySearchEntity[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("list" in data && data.list != undefined) {
                    this.list = data.list;
                }
            }
        }
        get list() {
            return pb_1.Message.getRepeatedWrapperField(this, WorkersMapUseBySearchEntity, 1) as WorkersMapUseBySearchEntity[];
        }
        set list(value: WorkersMapUseBySearchEntity[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        static fromObject(data: {
            list?: ReturnType<typeof WorkersMapUseBySearchEntity.prototype.toObject>[];
        }): WorkersMapUseBySearchEntityList {
            const message = new WorkersMapUseBySearchEntityList({});
            if (data.list != null) {
                message.list = data.list.map(item => WorkersMapUseBySearchEntity.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                list?: ReturnType<typeof WorkersMapUseBySearchEntity.prototype.toObject>[];
            } = {};
            if (this.list != null) {
                data.list = this.list.map((item: WorkersMapUseBySearchEntity) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.list.length)
                writer.writeRepeatedMessage(1, this.list, (item: WorkersMapUseBySearchEntity) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): WorkersMapUseBySearchEntityList {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new WorkersMapUseBySearchEntityList();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.list, () => pb_1.Message.addToRepeatedWrapperField(message, 1, WorkersMapUseBySearchEntity.deserialize(reader), WorkersMapUseBySearchEntity));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): WorkersMapUseBySearchEntityList {
            return WorkersMapUseBySearchEntityList.deserialize(bytes);
        }
    }
    export class WorkerGroupNameIdEntity extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            work_group_id?: number;
            worker_group_name?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("work_group_id" in data && data.work_group_id != undefined) {
                    this.work_group_id = data.work_group_id;
                }
                if ("worker_group_name" in data && data.worker_group_name != undefined) {
                    this.worker_group_name = data.worker_group_name;
                }
            }
        }
        get work_group_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set work_group_id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get worker_group_name() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set worker_group_name(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            work_group_id?: number;
            worker_group_name?: string;
        }): WorkerGroupNameIdEntity {
            const message = new WorkerGroupNameIdEntity({});
            if (data.work_group_id != null) {
                message.work_group_id = data.work_group_id;
            }
            if (data.worker_group_name != null) {
                message.worker_group_name = data.worker_group_name;
            }
            return message;
        }
        toObject() {
            const data: {
                work_group_id?: number;
                worker_group_name?: string;
            } = {};
            if (this.work_group_id != null) {
                data.work_group_id = this.work_group_id;
            }
            if (this.worker_group_name != null) {
                data.worker_group_name = this.worker_group_name;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.work_group_id != 0)
                writer.writeInt32(1, this.work_group_id);
            if (this.worker_group_name.length)
                writer.writeString(2, this.worker_group_name);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): WorkerGroupNameIdEntity {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new WorkerGroupNameIdEntity();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.work_group_id = reader.readInt32();
                        break;
                    case 2:
                        message.worker_group_name = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): WorkerGroupNameIdEntity {
            return WorkerGroupNameIdEntity.deserialize(bytes);
        }
    }
    export class WorkerGroupAndWorkersListUseBySearchResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            list?: WorkerGroupNameIdEntity[];
            worker_list?: Map<number, WorkersMapUseBySearchEntityList>;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("list" in data && data.list != undefined) {
                    this.list = data.list;
                }
                if ("worker_list" in data && data.worker_list != undefined) {
                    this.worker_list = data.worker_list;
                }
            }
            if (!this.worker_list)
                this.worker_list = new Map();
        }
        get list() {
            return pb_1.Message.getRepeatedWrapperField(this, WorkerGroupNameIdEntity, 1) as WorkerGroupNameIdEntity[];
        }
        set list(value: WorkerGroupNameIdEntity[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        get worker_list() {
            return pb_1.Message.getField(this, 2) as any as Map<number, WorkersMapUseBySearchEntityList>;
        }
        set worker_list(value: Map<number, WorkersMapUseBySearchEntityList>) {
            pb_1.Message.setField(this, 2, value as any);
        }
        static fromObject(data: {
            list?: ReturnType<typeof WorkerGroupNameIdEntity.prototype.toObject>[];
            worker_list?: {
                [key: number]: ReturnType<typeof WorkersMapUseBySearchEntityList.prototype.toObject>;
            };
        }): WorkerGroupAndWorkersListUseBySearchResponse {
            const message = new WorkerGroupAndWorkersListUseBySearchResponse({});
            if (data.list != null) {
                message.list = data.list.map(item => WorkerGroupNameIdEntity.fromObject(item));
            }
            if (typeof data.worker_list == "object") {
                message.worker_list = new Map(Object.entries(data.worker_list).map(([key, value]) => [Number(key), WorkersMapUseBySearchEntityList.fromObject(value)]));
            }
            return message;
        }
        toObject() {
            const data: {
                list?: ReturnType<typeof WorkerGroupNameIdEntity.prototype.toObject>[];
                worker_list?: {
                    [key: number]: ReturnType<typeof WorkersMapUseBySearchEntityList.prototype.toObject>;
                };
            } = {};
            if (this.list != null) {
                data.list = this.list.map((item: WorkerGroupNameIdEntity) => item.toObject());
            }
            if (this.worker_list != null) {
                data.worker_list = (Object.fromEntries)((Array.from)(this.worker_list).map(([key, value]) => [key, value.toObject()]));
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.list.length)
                writer.writeRepeatedMessage(1, this.list, (item: WorkerGroupNameIdEntity) => item.serialize(writer));
            for (const [key, value] of this.worker_list) {
                writer.writeMessage(2, this.worker_list, () => {
                    writer.writeInt32(1, key);
                    writer.writeMessage(2, value, () => value.serialize(writer));
                });
            }
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): WorkerGroupAndWorkersListUseBySearchResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new WorkerGroupAndWorkersListUseBySearchResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.list, () => pb_1.Message.addToRepeatedWrapperField(message, 1, WorkerGroupNameIdEntity.deserialize(reader), WorkerGroupNameIdEntity));
                        break;
                    case 2:
                        reader.readMessage(message, () => pb_1.Map.deserializeBinary(message.worker_list as any, reader, reader.readInt32, () => {
                            let value;
                            reader.readMessage(message, () => value = WorkersMapUseBySearchEntityList.deserialize(reader));
                            return value;
                        }));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): WorkerGroupAndWorkersListUseBySearchResponse {
            return WorkerGroupAndWorkersListUseBySearchResponse.deserialize(bytes);
        }
    }
    export class CheckedWorkerQualityViewListRequest extends pb_1.Message {
        #one_of_decls: number[][] = [[9], [12], [13]];
        constructor(data?: any[] | ({
            start_time?: dependency_2.google.protobuf.Timestamp;
            end_time?: dependency_2.google.protobuf.Timestamp;
            check_worker_group_id?: number;
            worker_id?: number;
            check_worker_account?: string;
            user_level?: number;
            user_id?: string;
            service_duration?: number;
            check_worker_id?: number;
            check_duration?: number;
            page?: number;
            pageSize?: number;
            sort_param?: CheckedWorkerQualityViewListSortParam;
            sort_type?: dependency_5.api.common.SortType;
            worker_account?: string;
            source?: dependency_4.api.common.CheckViewSource;
        } & (({
            check_type?: dependency_4.api.common.WorkerCheckType;
        }) | ({
            check_score?: dependency_4.api.common.WorkerScoreType;
        }) | ({
            is_review?: boolean;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("start_time" in data && data.start_time != undefined) {
                    this.start_time = data.start_time;
                }
                if ("end_time" in data && data.end_time != undefined) {
                    this.end_time = data.end_time;
                }
                if ("check_worker_group_id" in data && data.check_worker_group_id != undefined) {
                    this.check_worker_group_id = data.check_worker_group_id;
                }
                if ("worker_id" in data && data.worker_id != undefined) {
                    this.worker_id = data.worker_id;
                }
                if ("check_worker_account" in data && data.check_worker_account != undefined) {
                    this.check_worker_account = data.check_worker_account;
                }
                if ("user_level" in data && data.user_level != undefined) {
                    this.user_level = data.user_level;
                }
                if ("user_id" in data && data.user_id != undefined) {
                    this.user_id = data.user_id;
                }
                if ("service_duration" in data && data.service_duration != undefined) {
                    this.service_duration = data.service_duration;
                }
                if ("check_type" in data && data.check_type != undefined) {
                    this.check_type = data.check_type;
                }
                if ("check_worker_id" in data && data.check_worker_id != undefined) {
                    this.check_worker_id = data.check_worker_id;
                }
                if ("check_duration" in data && data.check_duration != undefined) {
                    this.check_duration = data.check_duration;
                }
                if ("check_score" in data && data.check_score != undefined) {
                    this.check_score = data.check_score;
                }
                if ("is_review" in data && data.is_review != undefined) {
                    this.is_review = data.is_review;
                }
                if ("page" in data && data.page != undefined) {
                    this.page = data.page;
                }
                if ("pageSize" in data && data.pageSize != undefined) {
                    this.pageSize = data.pageSize;
                }
                if ("sort_param" in data && data.sort_param != undefined) {
                    this.sort_param = data.sort_param;
                }
                if ("sort_type" in data && data.sort_type != undefined) {
                    this.sort_type = data.sort_type;
                }
                if ("worker_account" in data && data.worker_account != undefined) {
                    this.worker_account = data.worker_account;
                }
                if ("source" in data && data.source != undefined) {
                    this.source = data.source;
                }
            }
        }
        get start_time() {
            return pb_1.Message.getWrapperField(this, dependency_2.google.protobuf.Timestamp, 1) as dependency_2.google.protobuf.Timestamp;
        }
        set start_time(value: dependency_2.google.protobuf.Timestamp) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_start_time() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get end_time() {
            return pb_1.Message.getWrapperField(this, dependency_2.google.protobuf.Timestamp, 2) as dependency_2.google.protobuf.Timestamp;
        }
        set end_time(value: dependency_2.google.protobuf.Timestamp) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_end_time() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get check_worker_group_id() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set check_worker_group_id(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        get worker_id() {
            return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
        }
        set worker_id(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        get check_worker_account() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set check_worker_account(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        get user_level() {
            return pb_1.Message.getFieldWithDefault(this, 6, 0) as number;
        }
        set user_level(value: number) {
            pb_1.Message.setField(this, 6, value);
        }
        get user_id() {
            return pb_1.Message.getFieldWithDefault(this, 7, "") as string;
        }
        set user_id(value: string) {
            pb_1.Message.setField(this, 7, value);
        }
        get service_duration() {
            return pb_1.Message.getFieldWithDefault(this, 8, 0) as number;
        }
        set service_duration(value: number) {
            pb_1.Message.setField(this, 8, value);
        }
        get check_type() {
            return pb_1.Message.getFieldWithDefault(this, 9, dependency_4.api.common.WorkerCheckType.WQT_COMMON) as dependency_4.api.common.WorkerCheckType;
        }
        set check_type(value: dependency_4.api.common.WorkerCheckType) {
            pb_1.Message.setOneofField(this, 9, this.#one_of_decls[0], value);
        }
        get has_check_type() {
            return pb_1.Message.getField(this, 9) != null;
        }
        get check_worker_id() {
            return pb_1.Message.getFieldWithDefault(this, 10, 0) as number;
        }
        set check_worker_id(value: number) {
            pb_1.Message.setField(this, 10, value);
        }
        get check_duration() {
            return pb_1.Message.getFieldWithDefault(this, 11, 0) as number;
        }
        set check_duration(value: number) {
            pb_1.Message.setField(this, 11, value);
        }
        get check_score() {
            return pb_1.Message.getFieldWithDefault(this, 12, dependency_4.api.common.WorkerScoreType.WST_UNKNOWN) as dependency_4.api.common.WorkerScoreType;
        }
        set check_score(value: dependency_4.api.common.WorkerScoreType) {
            pb_1.Message.setOneofField(this, 12, this.#one_of_decls[1], value);
        }
        get has_check_score() {
            return pb_1.Message.getField(this, 12) != null;
        }
        get is_review() {
            return pb_1.Message.getFieldWithDefault(this, 13, false) as boolean;
        }
        set is_review(value: boolean) {
            pb_1.Message.setOneofField(this, 13, this.#one_of_decls[2], value);
        }
        get has_is_review() {
            return pb_1.Message.getField(this, 13) != null;
        }
        get page() {
            return pb_1.Message.getFieldWithDefault(this, 14, 0) as number;
        }
        set page(value: number) {
            pb_1.Message.setField(this, 14, value);
        }
        get pageSize() {
            return pb_1.Message.getFieldWithDefault(this, 15, 0) as number;
        }
        set pageSize(value: number) {
            pb_1.Message.setField(this, 15, value);
        }
        get sort_param() {
            return pb_1.Message.getFieldWithDefault(this, 16, CheckedWorkerQualityViewListSortParam.FIRST_SEND_TIME) as CheckedWorkerQualityViewListSortParam;
        }
        set sort_param(value: CheckedWorkerQualityViewListSortParam) {
            pb_1.Message.setField(this, 16, value);
        }
        get sort_type() {
            return pb_1.Message.getFieldWithDefault(this, 17, dependency_5.api.common.SortType.DESCEND) as dependency_5.api.common.SortType;
        }
        set sort_type(value: dependency_5.api.common.SortType) {
            pb_1.Message.setField(this, 17, value);
        }
        get worker_account() {
            return pb_1.Message.getFieldWithDefault(this, 18, "") as string;
        }
        set worker_account(value: string) {
            pb_1.Message.setField(this, 18, value);
        }
        get source() {
            return pb_1.Message.getFieldWithDefault(this, 19, dependency_4.api.common.CheckViewSource.WORKER_QUALITY_SOURCE) as dependency_4.api.common.CheckViewSource;
        }
        set source(value: dependency_4.api.common.CheckViewSource) {
            pb_1.Message.setField(this, 19, value);
        }
        get _check_type() {
            const cases: {
                [index: number]: "none" | "check_type";
            } = {
                0: "none",
                9: "check_type"
            };
            return cases[pb_1.Message.computeOneofCase(this, [9])];
        }
        get _check_score() {
            const cases: {
                [index: number]: "none" | "check_score";
            } = {
                0: "none",
                12: "check_score"
            };
            return cases[pb_1.Message.computeOneofCase(this, [12])];
        }
        get _is_review() {
            const cases: {
                [index: number]: "none" | "is_review";
            } = {
                0: "none",
                13: "is_review"
            };
            return cases[pb_1.Message.computeOneofCase(this, [13])];
        }
        static fromObject(data: {
            start_time?: ReturnType<typeof dependency_2.google.protobuf.Timestamp.prototype.toObject>;
            end_time?: ReturnType<typeof dependency_2.google.protobuf.Timestamp.prototype.toObject>;
            check_worker_group_id?: number;
            worker_id?: number;
            check_worker_account?: string;
            user_level?: number;
            user_id?: string;
            service_duration?: number;
            check_type?: dependency_4.api.common.WorkerCheckType;
            check_worker_id?: number;
            check_duration?: number;
            check_score?: dependency_4.api.common.WorkerScoreType;
            is_review?: boolean;
            page?: number;
            pageSize?: number;
            sort_param?: CheckedWorkerQualityViewListSortParam;
            sort_type?: dependency_5.api.common.SortType;
            worker_account?: string;
            source?: dependency_4.api.common.CheckViewSource;
        }): CheckedWorkerQualityViewListRequest {
            const message = new CheckedWorkerQualityViewListRequest({});
            if (data.start_time != null) {
                message.start_time = dependency_2.google.protobuf.Timestamp.fromObject(data.start_time);
            }
            if (data.end_time != null) {
                message.end_time = dependency_2.google.protobuf.Timestamp.fromObject(data.end_time);
            }
            if (data.check_worker_group_id != null) {
                message.check_worker_group_id = data.check_worker_group_id;
            }
            if (data.worker_id != null) {
                message.worker_id = data.worker_id;
            }
            if (data.check_worker_account != null) {
                message.check_worker_account = data.check_worker_account;
            }
            if (data.user_level != null) {
                message.user_level = data.user_level;
            }
            if (data.user_id != null) {
                message.user_id = data.user_id;
            }
            if (data.service_duration != null) {
                message.service_duration = data.service_duration;
            }
            if (data.check_type != null) {
                message.check_type = data.check_type;
            }
            if (data.check_worker_id != null) {
                message.check_worker_id = data.check_worker_id;
            }
            if (data.check_duration != null) {
                message.check_duration = data.check_duration;
            }
            if (data.check_score != null) {
                message.check_score = data.check_score;
            }
            if (data.is_review != null) {
                message.is_review = data.is_review;
            }
            if (data.page != null) {
                message.page = data.page;
            }
            if (data.pageSize != null) {
                message.pageSize = data.pageSize;
            }
            if (data.sort_param != null) {
                message.sort_param = data.sort_param;
            }
            if (data.sort_type != null) {
                message.sort_type = data.sort_type;
            }
            if (data.worker_account != null) {
                message.worker_account = data.worker_account;
            }
            if (data.source != null) {
                message.source = data.source;
            }
            return message;
        }
        toObject() {
            const data: {
                start_time?: ReturnType<typeof dependency_2.google.protobuf.Timestamp.prototype.toObject>;
                end_time?: ReturnType<typeof dependency_2.google.protobuf.Timestamp.prototype.toObject>;
                check_worker_group_id?: number;
                worker_id?: number;
                check_worker_account?: string;
                user_level?: number;
                user_id?: string;
                service_duration?: number;
                check_type?: dependency_4.api.common.WorkerCheckType;
                check_worker_id?: number;
                check_duration?: number;
                check_score?: dependency_4.api.common.WorkerScoreType;
                is_review?: boolean;
                page?: number;
                pageSize?: number;
                sort_param?: CheckedWorkerQualityViewListSortParam;
                sort_type?: dependency_5.api.common.SortType;
                worker_account?: string;
                source?: dependency_4.api.common.CheckViewSource;
            } = {};
            if (this.start_time != null) {
                data.start_time = this.start_time.toObject();
            }
            if (this.end_time != null) {
                data.end_time = this.end_time.toObject();
            }
            if (this.check_worker_group_id != null) {
                data.check_worker_group_id = this.check_worker_group_id;
            }
            if (this.worker_id != null) {
                data.worker_id = this.worker_id;
            }
            if (this.check_worker_account != null) {
                data.check_worker_account = this.check_worker_account;
            }
            if (this.user_level != null) {
                data.user_level = this.user_level;
            }
            if (this.user_id != null) {
                data.user_id = this.user_id;
            }
            if (this.service_duration != null) {
                data.service_duration = this.service_duration;
            }
            if (this.check_type != null) {
                data.check_type = this.check_type;
            }
            if (this.check_worker_id != null) {
                data.check_worker_id = this.check_worker_id;
            }
            if (this.check_duration != null) {
                data.check_duration = this.check_duration;
            }
            if (this.check_score != null) {
                data.check_score = this.check_score;
            }
            if (this.is_review != null) {
                data.is_review = this.is_review;
            }
            if (this.page != null) {
                data.page = this.page;
            }
            if (this.pageSize != null) {
                data.pageSize = this.pageSize;
            }
            if (this.sort_param != null) {
                data.sort_param = this.sort_param;
            }
            if (this.sort_type != null) {
                data.sort_type = this.sort_type;
            }
            if (this.worker_account != null) {
                data.worker_account = this.worker_account;
            }
            if (this.source != null) {
                data.source = this.source;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_start_time)
                writer.writeMessage(1, this.start_time, () => this.start_time.serialize(writer));
            if (this.has_end_time)
                writer.writeMessage(2, this.end_time, () => this.end_time.serialize(writer));
            if (this.check_worker_group_id != 0)
                writer.writeInt32(3, this.check_worker_group_id);
            if (this.worker_id != 0)
                writer.writeInt32(4, this.worker_id);
            if (this.check_worker_account.length)
                writer.writeString(5, this.check_worker_account);
            if (this.user_level != 0)
                writer.writeInt32(6, this.user_level);
            if (this.user_id.length)
                writer.writeString(7, this.user_id);
            if (this.service_duration != 0)
                writer.writeInt32(8, this.service_duration);
            if (this.has_check_type)
                writer.writeEnum(9, this.check_type);
            if (this.check_worker_id != 0)
                writer.writeInt32(10, this.check_worker_id);
            if (this.check_duration != 0)
                writer.writeInt32(11, this.check_duration);
            if (this.has_check_score)
                writer.writeEnum(12, this.check_score);
            if (this.has_is_review)
                writer.writeBool(13, this.is_review);
            if (this.page != 0)
                writer.writeInt32(14, this.page);
            if (this.pageSize != 0)
                writer.writeInt32(15, this.pageSize);
            if (this.sort_param != CheckedWorkerQualityViewListSortParam.FIRST_SEND_TIME)
                writer.writeEnum(16, this.sort_param);
            if (this.sort_type != dependency_5.api.common.SortType.DESCEND)
                writer.writeEnum(17, this.sort_type);
            if (this.worker_account.length)
                writer.writeString(18, this.worker_account);
            if (this.source != dependency_4.api.common.CheckViewSource.WORKER_QUALITY_SOURCE)
                writer.writeEnum(19, this.source);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CheckedWorkerQualityViewListRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CheckedWorkerQualityViewListRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.start_time, () => message.start_time = dependency_2.google.protobuf.Timestamp.deserialize(reader));
                        break;
                    case 2:
                        reader.readMessage(message.end_time, () => message.end_time = dependency_2.google.protobuf.Timestamp.deserialize(reader));
                        break;
                    case 3:
                        message.check_worker_group_id = reader.readInt32();
                        break;
                    case 4:
                        message.worker_id = reader.readInt32();
                        break;
                    case 5:
                        message.check_worker_account = reader.readString();
                        break;
                    case 6:
                        message.user_level = reader.readInt32();
                        break;
                    case 7:
                        message.user_id = reader.readString();
                        break;
                    case 8:
                        message.service_duration = reader.readInt32();
                        break;
                    case 9:
                        message.check_type = reader.readEnum();
                        break;
                    case 10:
                        message.check_worker_id = reader.readInt32();
                        break;
                    case 11:
                        message.check_duration = reader.readInt32();
                        break;
                    case 12:
                        message.check_score = reader.readEnum();
                        break;
                    case 13:
                        message.is_review = reader.readBool();
                        break;
                    case 14:
                        message.page = reader.readInt32();
                        break;
                    case 15:
                        message.pageSize = reader.readInt32();
                        break;
                    case 16:
                        message.sort_param = reader.readEnum();
                        break;
                    case 17:
                        message.sort_type = reader.readEnum();
                        break;
                    case 18:
                        message.worker_account = reader.readString();
                        break;
                    case 19:
                        message.source = reader.readEnum();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CheckedWorkerQualityViewListRequest {
            return CheckedWorkerQualityViewListRequest.deserialize(bytes);
        }
    }
    export class CheckedWorkerQualityViewEntity extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            user_id?: number;
            user_nickname?: string;
            user_ip?: string;
            user_location?: string;
            os?: string;
            user_level?: string;
            first_send_time?: number;
            last_send_time?: number;
            service_duration?: string;
            worker_id?: number;
            worker_name?: string;
            client_message_count?: number;
            worker_message_count?: number;
            check_duration?: string;
            check_score?: dependency_4.api.common.WorkerScoreType;
            review_check_score?: dependency_4.api.common.WorkerScoreType;
            question_type?: string[];
            content?: string;
            review_content?: string;
            create_time?: number;
            review_time?: number;
            score_worker_name?: string;
            score_worker_id?: number;
            review_worker_name?: string;
            review_worker_id?: number;
            check_type?: dependency_4.api.common.WorkerCheckType;
            score_time?: number;
            chat_id?: number;
            binding_session_id?: number;
            id?: number;
            check_log?: dependency_7.api.core.QualitySessionReadLog[];
            workerQualitySessions?: dependency_8.google.protobuf.Any[];
            recharge_order_no?: string;
            recharge_order_time?: string;
            user_register_source?: string;
            last_push_time?: number;
            assign_time?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [17, 31, 32], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("user_id" in data && data.user_id != undefined) {
                    this.user_id = data.user_id;
                }
                if ("user_nickname" in data && data.user_nickname != undefined) {
                    this.user_nickname = data.user_nickname;
                }
                if ("user_ip" in data && data.user_ip != undefined) {
                    this.user_ip = data.user_ip;
                }
                if ("user_location" in data && data.user_location != undefined) {
                    this.user_location = data.user_location;
                }
                if ("os" in data && data.os != undefined) {
                    this.os = data.os;
                }
                if ("user_level" in data && data.user_level != undefined) {
                    this.user_level = data.user_level;
                }
                if ("first_send_time" in data && data.first_send_time != undefined) {
                    this.first_send_time = data.first_send_time;
                }
                if ("last_send_time" in data && data.last_send_time != undefined) {
                    this.last_send_time = data.last_send_time;
                }
                if ("service_duration" in data && data.service_duration != undefined) {
                    this.service_duration = data.service_duration;
                }
                if ("worker_id" in data && data.worker_id != undefined) {
                    this.worker_id = data.worker_id;
                }
                if ("worker_name" in data && data.worker_name != undefined) {
                    this.worker_name = data.worker_name;
                }
                if ("client_message_count" in data && data.client_message_count != undefined) {
                    this.client_message_count = data.client_message_count;
                }
                if ("worker_message_count" in data && data.worker_message_count != undefined) {
                    this.worker_message_count = data.worker_message_count;
                }
                if ("check_duration" in data && data.check_duration != undefined) {
                    this.check_duration = data.check_duration;
                }
                if ("check_score" in data && data.check_score != undefined) {
                    this.check_score = data.check_score;
                }
                if ("review_check_score" in data && data.review_check_score != undefined) {
                    this.review_check_score = data.review_check_score;
                }
                if ("question_type" in data && data.question_type != undefined) {
                    this.question_type = data.question_type;
                }
                if ("content" in data && data.content != undefined) {
                    this.content = data.content;
                }
                if ("review_content" in data && data.review_content != undefined) {
                    this.review_content = data.review_content;
                }
                if ("create_time" in data && data.create_time != undefined) {
                    this.create_time = data.create_time;
                }
                if ("review_time" in data && data.review_time != undefined) {
                    this.review_time = data.review_time;
                }
                if ("score_worker_name" in data && data.score_worker_name != undefined) {
                    this.score_worker_name = data.score_worker_name;
                }
                if ("score_worker_id" in data && data.score_worker_id != undefined) {
                    this.score_worker_id = data.score_worker_id;
                }
                if ("review_worker_name" in data && data.review_worker_name != undefined) {
                    this.review_worker_name = data.review_worker_name;
                }
                if ("review_worker_id" in data && data.review_worker_id != undefined) {
                    this.review_worker_id = data.review_worker_id;
                }
                if ("check_type" in data && data.check_type != undefined) {
                    this.check_type = data.check_type;
                }
                if ("score_time" in data && data.score_time != undefined) {
                    this.score_time = data.score_time;
                }
                if ("chat_id" in data && data.chat_id != undefined) {
                    this.chat_id = data.chat_id;
                }
                if ("binding_session_id" in data && data.binding_session_id != undefined) {
                    this.binding_session_id = data.binding_session_id;
                }
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
                if ("check_log" in data && data.check_log != undefined) {
                    this.check_log = data.check_log;
                }
                if ("workerQualitySessions" in data && data.workerQualitySessions != undefined) {
                    this.workerQualitySessions = data.workerQualitySessions;
                }
                if ("recharge_order_no" in data && data.recharge_order_no != undefined) {
                    this.recharge_order_no = data.recharge_order_no;
                }
                if ("recharge_order_time" in data && data.recharge_order_time != undefined) {
                    this.recharge_order_time = data.recharge_order_time;
                }
                if ("user_register_source" in data && data.user_register_source != undefined) {
                    this.user_register_source = data.user_register_source;
                }
                if ("last_push_time" in data && data.last_push_time != undefined) {
                    this.last_push_time = data.last_push_time;
                }
                if ("assign_time" in data && data.assign_time != undefined) {
                    this.assign_time = data.assign_time;
                }
            }
        }
        get user_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set user_id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get user_nickname() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set user_nickname(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get user_ip() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set user_ip(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get user_location() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set user_location(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get os() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set os(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        get user_level() {
            return pb_1.Message.getFieldWithDefault(this, 6, "") as string;
        }
        set user_level(value: string) {
            pb_1.Message.setField(this, 6, value);
        }
        get first_send_time() {
            return pb_1.Message.getFieldWithDefault(this, 7, 0) as number;
        }
        set first_send_time(value: number) {
            pb_1.Message.setField(this, 7, value);
        }
        get last_send_time() {
            return pb_1.Message.getFieldWithDefault(this, 8, 0) as number;
        }
        set last_send_time(value: number) {
            pb_1.Message.setField(this, 8, value);
        }
        get service_duration() {
            return pb_1.Message.getFieldWithDefault(this, 9, "") as string;
        }
        set service_duration(value: string) {
            pb_1.Message.setField(this, 9, value);
        }
        get worker_id() {
            return pb_1.Message.getFieldWithDefault(this, 10, 0) as number;
        }
        set worker_id(value: number) {
            pb_1.Message.setField(this, 10, value);
        }
        get worker_name() {
            return pb_1.Message.getFieldWithDefault(this, 11, "") as string;
        }
        set worker_name(value: string) {
            pb_1.Message.setField(this, 11, value);
        }
        get client_message_count() {
            return pb_1.Message.getFieldWithDefault(this, 12, 0) as number;
        }
        set client_message_count(value: number) {
            pb_1.Message.setField(this, 12, value);
        }
        get worker_message_count() {
            return pb_1.Message.getFieldWithDefault(this, 13, 0) as number;
        }
        set worker_message_count(value: number) {
            pb_1.Message.setField(this, 13, value);
        }
        get check_duration() {
            return pb_1.Message.getFieldWithDefault(this, 14, "") as string;
        }
        set check_duration(value: string) {
            pb_1.Message.setField(this, 14, value);
        }
        get check_score() {
            return pb_1.Message.getFieldWithDefault(this, 15, dependency_4.api.common.WorkerScoreType.WST_UNKNOWN) as dependency_4.api.common.WorkerScoreType;
        }
        set check_score(value: dependency_4.api.common.WorkerScoreType) {
            pb_1.Message.setField(this, 15, value);
        }
        get review_check_score() {
            return pb_1.Message.getFieldWithDefault(this, 16, dependency_4.api.common.WorkerScoreType.WST_UNKNOWN) as dependency_4.api.common.WorkerScoreType;
        }
        set review_check_score(value: dependency_4.api.common.WorkerScoreType) {
            pb_1.Message.setField(this, 16, value);
        }
        get question_type() {
            return pb_1.Message.getFieldWithDefault(this, 17, []) as string[];
        }
        set question_type(value: string[]) {
            pb_1.Message.setField(this, 17, value);
        }
        get content() {
            return pb_1.Message.getFieldWithDefault(this, 18, "") as string;
        }
        set content(value: string) {
            pb_1.Message.setField(this, 18, value);
        }
        get review_content() {
            return pb_1.Message.getFieldWithDefault(this, 19, "") as string;
        }
        set review_content(value: string) {
            pb_1.Message.setField(this, 19, value);
        }
        get create_time() {
            return pb_1.Message.getFieldWithDefault(this, 20, 0) as number;
        }
        set create_time(value: number) {
            pb_1.Message.setField(this, 20, value);
        }
        get review_time() {
            return pb_1.Message.getFieldWithDefault(this, 21, 0) as number;
        }
        set review_time(value: number) {
            pb_1.Message.setField(this, 21, value);
        }
        get score_worker_name() {
            return pb_1.Message.getFieldWithDefault(this, 22, "") as string;
        }
        set score_worker_name(value: string) {
            pb_1.Message.setField(this, 22, value);
        }
        get score_worker_id() {
            return pb_1.Message.getFieldWithDefault(this, 23, 0) as number;
        }
        set score_worker_id(value: number) {
            pb_1.Message.setField(this, 23, value);
        }
        get review_worker_name() {
            return pb_1.Message.getFieldWithDefault(this, 24, "") as string;
        }
        set review_worker_name(value: string) {
            pb_1.Message.setField(this, 24, value);
        }
        get review_worker_id() {
            return pb_1.Message.getFieldWithDefault(this, 25, 0) as number;
        }
        set review_worker_id(value: number) {
            pb_1.Message.setField(this, 25, value);
        }
        get check_type() {
            return pb_1.Message.getFieldWithDefault(this, 26, dependency_4.api.common.WorkerCheckType.WQT_COMMON) as dependency_4.api.common.WorkerCheckType;
        }
        set check_type(value: dependency_4.api.common.WorkerCheckType) {
            pb_1.Message.setField(this, 26, value);
        }
        get score_time() {
            return pb_1.Message.getFieldWithDefault(this, 27, 0) as number;
        }
        set score_time(value: number) {
            pb_1.Message.setField(this, 27, value);
        }
        get chat_id() {
            return pb_1.Message.getFieldWithDefault(this, 28, 0) as number;
        }
        set chat_id(value: number) {
            pb_1.Message.setField(this, 28, value);
        }
        get binding_session_id() {
            return pb_1.Message.getFieldWithDefault(this, 29, 0) as number;
        }
        set binding_session_id(value: number) {
            pb_1.Message.setField(this, 29, value);
        }
        get id() {
            return pb_1.Message.getFieldWithDefault(this, 30, 0) as number;
        }
        set id(value: number) {
            pb_1.Message.setField(this, 30, value);
        }
        get check_log() {
            return pb_1.Message.getRepeatedWrapperField(this, dependency_7.api.core.QualitySessionReadLog, 31) as dependency_7.api.core.QualitySessionReadLog[];
        }
        set check_log(value: dependency_7.api.core.QualitySessionReadLog[]) {
            pb_1.Message.setRepeatedWrapperField(this, 31, value);
        }
        get workerQualitySessions() {
            return pb_1.Message.getRepeatedWrapperField(this, dependency_8.google.protobuf.Any, 32) as dependency_8.google.protobuf.Any[];
        }
        set workerQualitySessions(value: dependency_8.google.protobuf.Any[]) {
            pb_1.Message.setRepeatedWrapperField(this, 32, value);
        }
        get recharge_order_no() {
            return pb_1.Message.getFieldWithDefault(this, 33, "") as string;
        }
        set recharge_order_no(value: string) {
            pb_1.Message.setField(this, 33, value);
        }
        get recharge_order_time() {
            return pb_1.Message.getFieldWithDefault(this, 34, "") as string;
        }
        set recharge_order_time(value: string) {
            pb_1.Message.setField(this, 34, value);
        }
        get user_register_source() {
            return pb_1.Message.getFieldWithDefault(this, 35, "") as string;
        }
        set user_register_source(value: string) {
            pb_1.Message.setField(this, 35, value);
        }
        get last_push_time() {
            return pb_1.Message.getFieldWithDefault(this, 36, 0) as number;
        }
        set last_push_time(value: number) {
            pb_1.Message.setField(this, 36, value);
        }
        get assign_time() {
            return pb_1.Message.getFieldWithDefault(this, 37, 0) as number;
        }
        set assign_time(value: number) {
            pb_1.Message.setField(this, 37, value);
        }
        static fromObject(data: {
            user_id?: number;
            user_nickname?: string;
            user_ip?: string;
            user_location?: string;
            os?: string;
            user_level?: string;
            first_send_time?: number;
            last_send_time?: number;
            service_duration?: string;
            worker_id?: number;
            worker_name?: string;
            client_message_count?: number;
            worker_message_count?: number;
            check_duration?: string;
            check_score?: dependency_4.api.common.WorkerScoreType;
            review_check_score?: dependency_4.api.common.WorkerScoreType;
            question_type?: string[];
            content?: string;
            review_content?: string;
            create_time?: number;
            review_time?: number;
            score_worker_name?: string;
            score_worker_id?: number;
            review_worker_name?: string;
            review_worker_id?: number;
            check_type?: dependency_4.api.common.WorkerCheckType;
            score_time?: number;
            chat_id?: number;
            binding_session_id?: number;
            id?: number;
            check_log?: ReturnType<typeof dependency_7.api.core.QualitySessionReadLog.prototype.toObject>[];
            workerQualitySessions?: ReturnType<typeof dependency_8.google.protobuf.Any.prototype.toObject>[];
            recharge_order_no?: string;
            recharge_order_time?: string;
            user_register_source?: string;
            last_push_time?: number;
            assign_time?: number;
        }): CheckedWorkerQualityViewEntity {
            const message = new CheckedWorkerQualityViewEntity({});
            if (data.user_id != null) {
                message.user_id = data.user_id;
            }
            if (data.user_nickname != null) {
                message.user_nickname = data.user_nickname;
            }
            if (data.user_ip != null) {
                message.user_ip = data.user_ip;
            }
            if (data.user_location != null) {
                message.user_location = data.user_location;
            }
            if (data.os != null) {
                message.os = data.os;
            }
            if (data.user_level != null) {
                message.user_level = data.user_level;
            }
            if (data.first_send_time != null) {
                message.first_send_time = data.first_send_time;
            }
            if (data.last_send_time != null) {
                message.last_send_time = data.last_send_time;
            }
            if (data.service_duration != null) {
                message.service_duration = data.service_duration;
            }
            if (data.worker_id != null) {
                message.worker_id = data.worker_id;
            }
            if (data.worker_name != null) {
                message.worker_name = data.worker_name;
            }
            if (data.client_message_count != null) {
                message.client_message_count = data.client_message_count;
            }
            if (data.worker_message_count != null) {
                message.worker_message_count = data.worker_message_count;
            }
            if (data.check_duration != null) {
                message.check_duration = data.check_duration;
            }
            if (data.check_score != null) {
                message.check_score = data.check_score;
            }
            if (data.review_check_score != null) {
                message.review_check_score = data.review_check_score;
            }
            if (data.question_type != null) {
                message.question_type = data.question_type;
            }
            if (data.content != null) {
                message.content = data.content;
            }
            if (data.review_content != null) {
                message.review_content = data.review_content;
            }
            if (data.create_time != null) {
                message.create_time = data.create_time;
            }
            if (data.review_time != null) {
                message.review_time = data.review_time;
            }
            if (data.score_worker_name != null) {
                message.score_worker_name = data.score_worker_name;
            }
            if (data.score_worker_id != null) {
                message.score_worker_id = data.score_worker_id;
            }
            if (data.review_worker_name != null) {
                message.review_worker_name = data.review_worker_name;
            }
            if (data.review_worker_id != null) {
                message.review_worker_id = data.review_worker_id;
            }
            if (data.check_type != null) {
                message.check_type = data.check_type;
            }
            if (data.score_time != null) {
                message.score_time = data.score_time;
            }
            if (data.chat_id != null) {
                message.chat_id = data.chat_id;
            }
            if (data.binding_session_id != null) {
                message.binding_session_id = data.binding_session_id;
            }
            if (data.id != null) {
                message.id = data.id;
            }
            if (data.check_log != null) {
                message.check_log = data.check_log.map(item => dependency_7.api.core.QualitySessionReadLog.fromObject(item));
            }
            if (data.workerQualitySessions != null) {
                message.workerQualitySessions = data.workerQualitySessions.map(item => dependency_8.google.protobuf.Any.fromObject(item));
            }
            if (data.recharge_order_no != null) {
                message.recharge_order_no = data.recharge_order_no;
            }
            if (data.recharge_order_time != null) {
                message.recharge_order_time = data.recharge_order_time;
            }
            if (data.user_register_source != null) {
                message.user_register_source = data.user_register_source;
            }
            if (data.last_push_time != null) {
                message.last_push_time = data.last_push_time;
            }
            if (data.assign_time != null) {
                message.assign_time = data.assign_time;
            }
            return message;
        }
        toObject() {
            const data: {
                user_id?: number;
                user_nickname?: string;
                user_ip?: string;
                user_location?: string;
                os?: string;
                user_level?: string;
                first_send_time?: number;
                last_send_time?: number;
                service_duration?: string;
                worker_id?: number;
                worker_name?: string;
                client_message_count?: number;
                worker_message_count?: number;
                check_duration?: string;
                check_score?: dependency_4.api.common.WorkerScoreType;
                review_check_score?: dependency_4.api.common.WorkerScoreType;
                question_type?: string[];
                content?: string;
                review_content?: string;
                create_time?: number;
                review_time?: number;
                score_worker_name?: string;
                score_worker_id?: number;
                review_worker_name?: string;
                review_worker_id?: number;
                check_type?: dependency_4.api.common.WorkerCheckType;
                score_time?: number;
                chat_id?: number;
                binding_session_id?: number;
                id?: number;
                check_log?: ReturnType<typeof dependency_7.api.core.QualitySessionReadLog.prototype.toObject>[];
                workerQualitySessions?: ReturnType<typeof dependency_8.google.protobuf.Any.prototype.toObject>[];
                recharge_order_no?: string;
                recharge_order_time?: string;
                user_register_source?: string;
                last_push_time?: number;
                assign_time?: number;
            } = {};
            if (this.user_id != null) {
                data.user_id = this.user_id;
            }
            if (this.user_nickname != null) {
                data.user_nickname = this.user_nickname;
            }
            if (this.user_ip != null) {
                data.user_ip = this.user_ip;
            }
            if (this.user_location != null) {
                data.user_location = this.user_location;
            }
            if (this.os != null) {
                data.os = this.os;
            }
            if (this.user_level != null) {
                data.user_level = this.user_level;
            }
            if (this.first_send_time != null) {
                data.first_send_time = this.first_send_time;
            }
            if (this.last_send_time != null) {
                data.last_send_time = this.last_send_time;
            }
            if (this.service_duration != null) {
                data.service_duration = this.service_duration;
            }
            if (this.worker_id != null) {
                data.worker_id = this.worker_id;
            }
            if (this.worker_name != null) {
                data.worker_name = this.worker_name;
            }
            if (this.client_message_count != null) {
                data.client_message_count = this.client_message_count;
            }
            if (this.worker_message_count != null) {
                data.worker_message_count = this.worker_message_count;
            }
            if (this.check_duration != null) {
                data.check_duration = this.check_duration;
            }
            if (this.check_score != null) {
                data.check_score = this.check_score;
            }
            if (this.review_check_score != null) {
                data.review_check_score = this.review_check_score;
            }
            if (this.question_type != null) {
                data.question_type = this.question_type;
            }
            if (this.content != null) {
                data.content = this.content;
            }
            if (this.review_content != null) {
                data.review_content = this.review_content;
            }
            if (this.create_time != null) {
                data.create_time = this.create_time;
            }
            if (this.review_time != null) {
                data.review_time = this.review_time;
            }
            if (this.score_worker_name != null) {
                data.score_worker_name = this.score_worker_name;
            }
            if (this.score_worker_id != null) {
                data.score_worker_id = this.score_worker_id;
            }
            if (this.review_worker_name != null) {
                data.review_worker_name = this.review_worker_name;
            }
            if (this.review_worker_id != null) {
                data.review_worker_id = this.review_worker_id;
            }
            if (this.check_type != null) {
                data.check_type = this.check_type;
            }
            if (this.score_time != null) {
                data.score_time = this.score_time;
            }
            if (this.chat_id != null) {
                data.chat_id = this.chat_id;
            }
            if (this.binding_session_id != null) {
                data.binding_session_id = this.binding_session_id;
            }
            if (this.id != null) {
                data.id = this.id;
            }
            if (this.check_log != null) {
                data.check_log = this.check_log.map((item: dependency_7.api.core.QualitySessionReadLog) => item.toObject());
            }
            if (this.workerQualitySessions != null) {
                data.workerQualitySessions = this.workerQualitySessions.map((item: dependency_8.google.protobuf.Any) => item.toObject());
            }
            if (this.recharge_order_no != null) {
                data.recharge_order_no = this.recharge_order_no;
            }
            if (this.recharge_order_time != null) {
                data.recharge_order_time = this.recharge_order_time;
            }
            if (this.user_register_source != null) {
                data.user_register_source = this.user_register_source;
            }
            if (this.last_push_time != null) {
                data.last_push_time = this.last_push_time;
            }
            if (this.assign_time != null) {
                data.assign_time = this.assign_time;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.user_id != 0)
                writer.writeInt32(1, this.user_id);
            if (this.user_nickname.length)
                writer.writeString(2, this.user_nickname);
            if (this.user_ip.length)
                writer.writeString(3, this.user_ip);
            if (this.user_location.length)
                writer.writeString(4, this.user_location);
            if (this.os.length)
                writer.writeString(5, this.os);
            if (this.user_level.length)
                writer.writeString(6, this.user_level);
            if (this.first_send_time != 0)
                writer.writeInt64(7, this.first_send_time);
            if (this.last_send_time != 0)
                writer.writeInt64(8, this.last_send_time);
            if (this.service_duration.length)
                writer.writeString(9, this.service_duration);
            if (this.worker_id != 0)
                writer.writeInt32(10, this.worker_id);
            if (this.worker_name.length)
                writer.writeString(11, this.worker_name);
            if (this.client_message_count != 0)
                writer.writeInt32(12, this.client_message_count);
            if (this.worker_message_count != 0)
                writer.writeInt32(13, this.worker_message_count);
            if (this.check_duration.length)
                writer.writeString(14, this.check_duration);
            if (this.check_score != dependency_4.api.common.WorkerScoreType.WST_UNKNOWN)
                writer.writeEnum(15, this.check_score);
            if (this.review_check_score != dependency_4.api.common.WorkerScoreType.WST_UNKNOWN)
                writer.writeEnum(16, this.review_check_score);
            if (this.question_type.length)
                writer.writeRepeatedString(17, this.question_type);
            if (this.content.length)
                writer.writeString(18, this.content);
            if (this.review_content.length)
                writer.writeString(19, this.review_content);
            if (this.create_time != 0)
                writer.writeInt64(20, this.create_time);
            if (this.review_time != 0)
                writer.writeInt64(21, this.review_time);
            if (this.score_worker_name.length)
                writer.writeString(22, this.score_worker_name);
            if (this.score_worker_id != 0)
                writer.writeInt32(23, this.score_worker_id);
            if (this.review_worker_name.length)
                writer.writeString(24, this.review_worker_name);
            if (this.review_worker_id != 0)
                writer.writeInt32(25, this.review_worker_id);
            if (this.check_type != dependency_4.api.common.WorkerCheckType.WQT_COMMON)
                writer.writeEnum(26, this.check_type);
            if (this.score_time != 0)
                writer.writeInt64(27, this.score_time);
            if (this.chat_id != 0)
                writer.writeInt64(28, this.chat_id);
            if (this.binding_session_id != 0)
                writer.writeInt64(29, this.binding_session_id);
            if (this.id != 0)
                writer.writeInt64(30, this.id);
            if (this.check_log.length)
                writer.writeRepeatedMessage(31, this.check_log, (item: dependency_7.api.core.QualitySessionReadLog) => item.serialize(writer));
            if (this.workerQualitySessions.length)
                writer.writeRepeatedMessage(32, this.workerQualitySessions, (item: dependency_8.google.protobuf.Any) => item.serialize(writer));
            if (this.recharge_order_no.length)
                writer.writeString(33, this.recharge_order_no);
            if (this.recharge_order_time.length)
                writer.writeString(34, this.recharge_order_time);
            if (this.user_register_source.length)
                writer.writeString(35, this.user_register_source);
            if (this.last_push_time != 0)
                writer.writeUint32(36, this.last_push_time);
            if (this.assign_time != 0)
                writer.writeUint32(37, this.assign_time);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CheckedWorkerQualityViewEntity {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CheckedWorkerQualityViewEntity();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.user_id = reader.readInt32();
                        break;
                    case 2:
                        message.user_nickname = reader.readString();
                        break;
                    case 3:
                        message.user_ip = reader.readString();
                        break;
                    case 4:
                        message.user_location = reader.readString();
                        break;
                    case 5:
                        message.os = reader.readString();
                        break;
                    case 6:
                        message.user_level = reader.readString();
                        break;
                    case 7:
                        message.first_send_time = reader.readInt64();
                        break;
                    case 8:
                        message.last_send_time = reader.readInt64();
                        break;
                    case 9:
                        message.service_duration = reader.readString();
                        break;
                    case 10:
                        message.worker_id = reader.readInt32();
                        break;
                    case 11:
                        message.worker_name = reader.readString();
                        break;
                    case 12:
                        message.client_message_count = reader.readInt32();
                        break;
                    case 13:
                        message.worker_message_count = reader.readInt32();
                        break;
                    case 14:
                        message.check_duration = reader.readString();
                        break;
                    case 15:
                        message.check_score = reader.readEnum();
                        break;
                    case 16:
                        message.review_check_score = reader.readEnum();
                        break;
                    case 17:
                        pb_1.Message.addToRepeatedField(message, 17, reader.readString());
                        break;
                    case 18:
                        message.content = reader.readString();
                        break;
                    case 19:
                        message.review_content = reader.readString();
                        break;
                    case 20:
                        message.create_time = reader.readInt64();
                        break;
                    case 21:
                        message.review_time = reader.readInt64();
                        break;
                    case 22:
                        message.score_worker_name = reader.readString();
                        break;
                    case 23:
                        message.score_worker_id = reader.readInt32();
                        break;
                    case 24:
                        message.review_worker_name = reader.readString();
                        break;
                    case 25:
                        message.review_worker_id = reader.readInt32();
                        break;
                    case 26:
                        message.check_type = reader.readEnum();
                        break;
                    case 27:
                        message.score_time = reader.readInt64();
                        break;
                    case 28:
                        message.chat_id = reader.readInt64();
                        break;
                    case 29:
                        message.binding_session_id = reader.readInt64();
                        break;
                    case 30:
                        message.id = reader.readInt64();
                        break;
                    case 31:
                        reader.readMessage(message.check_log, () => pb_1.Message.addToRepeatedWrapperField(message, 31, dependency_7.api.core.QualitySessionReadLog.deserialize(reader), dependency_7.api.core.QualitySessionReadLog));
                        break;
                    case 32:
                        reader.readMessage(message.workerQualitySessions, () => pb_1.Message.addToRepeatedWrapperField(message, 32, dependency_8.google.protobuf.Any.deserialize(reader), dependency_8.google.protobuf.Any));
                        break;
                    case 33:
                        message.recharge_order_no = reader.readString();
                        break;
                    case 34:
                        message.recharge_order_time = reader.readString();
                        break;
                    case 35:
                        message.user_register_source = reader.readString();
                        break;
                    case 36:
                        message.last_push_time = reader.readUint32();
                        break;
                    case 37:
                        message.assign_time = reader.readUint32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CheckedWorkerQualityViewEntity {
            return CheckedWorkerQualityViewEntity.deserialize(bytes);
        }
    }
    export class CheckerWorkerQualityViewStatistic extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            worker_count?: number;
            check_chat_count?: number;
            check_duration?: number;
            must_check_count?: number;
            combine_check_count?: number;
            review_check_count?: number;
            excellent_count?: number;
            normal_count?: number;
            very_bad_count?: number;
            bad_count?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("worker_count" in data && data.worker_count != undefined) {
                    this.worker_count = data.worker_count;
                }
                if ("check_chat_count" in data && data.check_chat_count != undefined) {
                    this.check_chat_count = data.check_chat_count;
                }
                if ("check_duration" in data && data.check_duration != undefined) {
                    this.check_duration = data.check_duration;
                }
                if ("must_check_count" in data && data.must_check_count != undefined) {
                    this.must_check_count = data.must_check_count;
                }
                if ("combine_check_count" in data && data.combine_check_count != undefined) {
                    this.combine_check_count = data.combine_check_count;
                }
                if ("review_check_count" in data && data.review_check_count != undefined) {
                    this.review_check_count = data.review_check_count;
                }
                if ("excellent_count" in data && data.excellent_count != undefined) {
                    this.excellent_count = data.excellent_count;
                }
                if ("normal_count" in data && data.normal_count != undefined) {
                    this.normal_count = data.normal_count;
                }
                if ("very_bad_count" in data && data.very_bad_count != undefined) {
                    this.very_bad_count = data.very_bad_count;
                }
                if ("bad_count" in data && data.bad_count != undefined) {
                    this.bad_count = data.bad_count;
                }
            }
        }
        get worker_count() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set worker_count(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get check_chat_count() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set check_chat_count(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get check_duration() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set check_duration(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        get must_check_count() {
            return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
        }
        set must_check_count(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        get combine_check_count() {
            return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
        }
        set combine_check_count(value: number) {
            pb_1.Message.setField(this, 5, value);
        }
        get review_check_count() {
            return pb_1.Message.getFieldWithDefault(this, 6, 0) as number;
        }
        set review_check_count(value: number) {
            pb_1.Message.setField(this, 6, value);
        }
        get excellent_count() {
            return pb_1.Message.getFieldWithDefault(this, 7, 0) as number;
        }
        set excellent_count(value: number) {
            pb_1.Message.setField(this, 7, value);
        }
        get normal_count() {
            return pb_1.Message.getFieldWithDefault(this, 8, 0) as number;
        }
        set normal_count(value: number) {
            pb_1.Message.setField(this, 8, value);
        }
        get very_bad_count() {
            return pb_1.Message.getFieldWithDefault(this, 9, 0) as number;
        }
        set very_bad_count(value: number) {
            pb_1.Message.setField(this, 9, value);
        }
        get bad_count() {
            return pb_1.Message.getFieldWithDefault(this, 10, 0) as number;
        }
        set bad_count(value: number) {
            pb_1.Message.setField(this, 10, value);
        }
        static fromObject(data: {
            worker_count?: number;
            check_chat_count?: number;
            check_duration?: number;
            must_check_count?: number;
            combine_check_count?: number;
            review_check_count?: number;
            excellent_count?: number;
            normal_count?: number;
            very_bad_count?: number;
            bad_count?: number;
        }): CheckerWorkerQualityViewStatistic {
            const message = new CheckerWorkerQualityViewStatistic({});
            if (data.worker_count != null) {
                message.worker_count = data.worker_count;
            }
            if (data.check_chat_count != null) {
                message.check_chat_count = data.check_chat_count;
            }
            if (data.check_duration != null) {
                message.check_duration = data.check_duration;
            }
            if (data.must_check_count != null) {
                message.must_check_count = data.must_check_count;
            }
            if (data.combine_check_count != null) {
                message.combine_check_count = data.combine_check_count;
            }
            if (data.review_check_count != null) {
                message.review_check_count = data.review_check_count;
            }
            if (data.excellent_count != null) {
                message.excellent_count = data.excellent_count;
            }
            if (data.normal_count != null) {
                message.normal_count = data.normal_count;
            }
            if (data.very_bad_count != null) {
                message.very_bad_count = data.very_bad_count;
            }
            if (data.bad_count != null) {
                message.bad_count = data.bad_count;
            }
            return message;
        }
        toObject() {
            const data: {
                worker_count?: number;
                check_chat_count?: number;
                check_duration?: number;
                must_check_count?: number;
                combine_check_count?: number;
                review_check_count?: number;
                excellent_count?: number;
                normal_count?: number;
                very_bad_count?: number;
                bad_count?: number;
            } = {};
            if (this.worker_count != null) {
                data.worker_count = this.worker_count;
            }
            if (this.check_chat_count != null) {
                data.check_chat_count = this.check_chat_count;
            }
            if (this.check_duration != null) {
                data.check_duration = this.check_duration;
            }
            if (this.must_check_count != null) {
                data.must_check_count = this.must_check_count;
            }
            if (this.combine_check_count != null) {
                data.combine_check_count = this.combine_check_count;
            }
            if (this.review_check_count != null) {
                data.review_check_count = this.review_check_count;
            }
            if (this.excellent_count != null) {
                data.excellent_count = this.excellent_count;
            }
            if (this.normal_count != null) {
                data.normal_count = this.normal_count;
            }
            if (this.very_bad_count != null) {
                data.very_bad_count = this.very_bad_count;
            }
            if (this.bad_count != null) {
                data.bad_count = this.bad_count;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.worker_count != 0)
                writer.writeInt32(1, this.worker_count);
            if (this.check_chat_count != 0)
                writer.writeInt32(2, this.check_chat_count);
            if (this.check_duration != 0)
                writer.writeInt64(3, this.check_duration);
            if (this.must_check_count != 0)
                writer.writeInt32(4, this.must_check_count);
            if (this.combine_check_count != 0)
                writer.writeInt32(5, this.combine_check_count);
            if (this.review_check_count != 0)
                writer.writeInt32(6, this.review_check_count);
            if (this.excellent_count != 0)
                writer.writeInt32(7, this.excellent_count);
            if (this.normal_count != 0)
                writer.writeInt32(8, this.normal_count);
            if (this.very_bad_count != 0)
                writer.writeInt32(9, this.very_bad_count);
            if (this.bad_count != 0)
                writer.writeInt32(10, this.bad_count);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CheckerWorkerQualityViewStatistic {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CheckerWorkerQualityViewStatistic();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.worker_count = reader.readInt32();
                        break;
                    case 2:
                        message.check_chat_count = reader.readInt32();
                        break;
                    case 3:
                        message.check_duration = reader.readInt64();
                        break;
                    case 4:
                        message.must_check_count = reader.readInt32();
                        break;
                    case 5:
                        message.combine_check_count = reader.readInt32();
                        break;
                    case 6:
                        message.review_check_count = reader.readInt32();
                        break;
                    case 7:
                        message.excellent_count = reader.readInt32();
                        break;
                    case 8:
                        message.normal_count = reader.readInt32();
                        break;
                    case 9:
                        message.very_bad_count = reader.readInt32();
                        break;
                    case 10:
                        message.bad_count = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CheckerWorkerQualityViewStatistic {
            return CheckerWorkerQualityViewStatistic.deserialize(bytes);
        }
    }
    export class CheckedWorkerQualityViewListResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            list?: CheckedWorkerQualityViewEntity[];
            statistic?: CheckerWorkerQualityViewStatistic;
            count?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("list" in data && data.list != undefined) {
                    this.list = data.list;
                }
                if ("statistic" in data && data.statistic != undefined) {
                    this.statistic = data.statistic;
                }
                if ("count" in data && data.count != undefined) {
                    this.count = data.count;
                }
            }
        }
        get list() {
            return pb_1.Message.getRepeatedWrapperField(this, CheckedWorkerQualityViewEntity, 1) as CheckedWorkerQualityViewEntity[];
        }
        set list(value: CheckedWorkerQualityViewEntity[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        get statistic() {
            return pb_1.Message.getWrapperField(this, CheckerWorkerQualityViewStatistic, 2) as CheckerWorkerQualityViewStatistic;
        }
        set statistic(value: CheckerWorkerQualityViewStatistic) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_statistic() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get count() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set count(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            list?: ReturnType<typeof CheckedWorkerQualityViewEntity.prototype.toObject>[];
            statistic?: ReturnType<typeof CheckerWorkerQualityViewStatistic.prototype.toObject>;
            count?: number;
        }): CheckedWorkerQualityViewListResponse {
            const message = new CheckedWorkerQualityViewListResponse({});
            if (data.list != null) {
                message.list = data.list.map(item => CheckedWorkerQualityViewEntity.fromObject(item));
            }
            if (data.statistic != null) {
                message.statistic = CheckerWorkerQualityViewStatistic.fromObject(data.statistic);
            }
            if (data.count != null) {
                message.count = data.count;
            }
            return message;
        }
        toObject() {
            const data: {
                list?: ReturnType<typeof CheckedWorkerQualityViewEntity.prototype.toObject>[];
                statistic?: ReturnType<typeof CheckerWorkerQualityViewStatistic.prototype.toObject>;
                count?: number;
            } = {};
            if (this.list != null) {
                data.list = this.list.map((item: CheckedWorkerQualityViewEntity) => item.toObject());
            }
            if (this.statistic != null) {
                data.statistic = this.statistic.toObject();
            }
            if (this.count != null) {
                data.count = this.count;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.list.length)
                writer.writeRepeatedMessage(1, this.list, (item: CheckedWorkerQualityViewEntity) => item.serialize(writer));
            if (this.has_statistic)
                writer.writeMessage(2, this.statistic, () => this.statistic.serialize(writer));
            if (this.count != 0)
                writer.writeInt32(3, this.count);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CheckedWorkerQualityViewListResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CheckedWorkerQualityViewListResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.list, () => pb_1.Message.addToRepeatedWrapperField(message, 1, CheckedWorkerQualityViewEntity.deserialize(reader), CheckedWorkerQualityViewEntity));
                        break;
                    case 2:
                        reader.readMessage(message.statistic, () => message.statistic = CheckerWorkerQualityViewStatistic.deserialize(reader));
                        break;
                    case 3:
                        message.count = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CheckedWorkerQualityViewListResponse {
            return CheckedWorkerQualityViewListResponse.deserialize(bytes);
        }
    }
    interface GrpcUnaryServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
    }
    interface GrpcStreamServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
        (message: P, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
    }
    interface GrpWritableServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
    }
    interface GrpcChunkServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
        (options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
    }
    interface GrpcPromiseServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): Promise<R>;
        (message: P, options?: grpc_1.CallOptions): Promise<R>;
    }
    export abstract class UnimplementedChatQualityService {
        static definition = {
            Settings: {
                path: "/api.core.ChatQuality/Settings",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: dependency_1.google.protobuf.Empty) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => dependency_1.google.protobuf.Empty.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: ChatQualitySettingsResp) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => ChatQualitySettingsResp.deserialize(new Uint8Array(bytes))
            },
            ModifySettings: {
                path: "/api.core.ChatQuality/ModifySettings",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: SetChatQualitySettingsReq) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => SetChatQualitySettingsReq.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: dependency_1.google.protobuf.Empty) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => dependency_1.google.protobuf.Empty.deserialize(new Uint8Array(bytes))
            },
            CustomerLevelList: {
                path: "/api.core.ChatQuality/CustomerLevelList",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: ChatQualityAssurancePageReq) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => ChatQualityAssurancePageReq.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: ChatQualityCustomerLevelListResp) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => ChatQualityCustomerLevelListResp.deserialize(new Uint8Array(bytes))
            },
            SetCustomerLevel: {
                path: "/api.core.ChatQuality/SetCustomerLevel",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: SetChatQualityCustomerLevel) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => SetChatQualityCustomerLevel.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: dependency_1.google.protobuf.Empty) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => dependency_1.google.protobuf.Empty.deserialize(new Uint8Array(bytes))
            },
            ChatQACheckSetting: {
                path: "/api.core.ChatQuality/ChatQACheckSetting",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: ChatQACheckSettingReq) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => ChatQACheckSettingReq.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: ChatQACheckSettingResp) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => ChatQACheckSettingResp.deserialize(new Uint8Array(bytes))
            },
            SetChatQACheckSetting: {
                path: "/api.core.ChatQuality/SetChatQACheckSetting",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: SetChatQACheckSettingReq) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => SetChatQACheckSettingReq.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: dependency_1.google.protobuf.Empty) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => dependency_1.google.protobuf.Empty.deserialize(new Uint8Array(bytes))
            },
            QAAssignedWorkerList: {
                path: "/api.core.ChatQuality/QAAssignedWorkerList",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: ChatQualityAssurancePageReq) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => ChatQualityAssurancePageReq.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: QAAssignedWorkerListResp) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => QAAssignedWorkerListResp.deserialize(new Uint8Array(bytes))
            },
            SetQAAssignedWorkerList: {
                path: "/api.core.ChatQuality/SetQAAssignedWorkerList",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: SetQAAssignedWorkerReq) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => SetQAAssignedWorkerReq.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: dependency_1.google.protobuf.Empty) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => dependency_1.google.protobuf.Empty.deserialize(new Uint8Array(bytes))
            },
            QualityWorkerReportExport: {
                path: "/api.core.ChatQuality/QualityWorkerReportExport",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: QualityWorkerReportRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => QualityWorkerReportRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: dependency_1.google.protobuf.Empty) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => dependency_1.google.protobuf.Empty.deserialize(new Uint8Array(bytes))
            },
            QualityWorkerReport: {
                path: "/api.core.ChatQuality/QualityWorkerReport",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: QualityWorkerReportRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => QualityWorkerReportRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: QualityWorkerReportResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => QualityWorkerReportResponse.deserialize(new Uint8Array(bytes))
            },
            QualityCheckWorkerNameAndIdMapList: {
                path: "/api.core.ChatQuality/QualityCheckWorkerNameAndIdMapList",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: dependency_1.google.protobuf.Empty) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => dependency_1.google.protobuf.Empty.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: QualityCheckWorkerNameAndIdMapListResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => QualityCheckWorkerNameAndIdMapListResponse.deserialize(new Uint8Array(bytes))
            },
            WorkerGroupAndWorkersListUseBySearch: {
                path: "/api.core.ChatQuality/WorkerGroupAndWorkersListUseBySearch",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: dependency_1.google.protobuf.Empty) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => dependency_1.google.protobuf.Empty.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: WorkerGroupAndWorkersListUseBySearchResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => WorkerGroupAndWorkersListUseBySearchResponse.deserialize(new Uint8Array(bytes))
            },
            CheckedWorkerQualityViewList: {
                path: "/api.core.ChatQuality/CheckedWorkerQualityViewList",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: CheckedWorkerQualityViewListRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => CheckedWorkerQualityViewListRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: CheckedWorkerQualityViewListResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => CheckedWorkerQualityViewListResponse.deserialize(new Uint8Array(bytes))
            },
            CheckedWorkerQualityViewListExport: {
                path: "/api.core.ChatQuality/CheckedWorkerQualityViewListExport",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: CheckedWorkerQualityViewListRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => CheckedWorkerQualityViewListRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: dependency_1.google.protobuf.Empty) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => dependency_1.google.protobuf.Empty.deserialize(new Uint8Array(bytes))
            }
        };
        [method: string]: grpc_1.UntypedHandleCall;
        abstract Settings(call: grpc_1.ServerUnaryCall<dependency_1.google.protobuf.Empty, ChatQualitySettingsResp>, callback: grpc_1.sendUnaryData<ChatQualitySettingsResp>): void;
        abstract ModifySettings(call: grpc_1.ServerUnaryCall<SetChatQualitySettingsReq, dependency_1.google.protobuf.Empty>, callback: grpc_1.sendUnaryData<dependency_1.google.protobuf.Empty>): void;
        abstract CustomerLevelList(call: grpc_1.ServerUnaryCall<ChatQualityAssurancePageReq, ChatQualityCustomerLevelListResp>, callback: grpc_1.sendUnaryData<ChatQualityCustomerLevelListResp>): void;
        abstract SetCustomerLevel(call: grpc_1.ServerUnaryCall<SetChatQualityCustomerLevel, dependency_1.google.protobuf.Empty>, callback: grpc_1.sendUnaryData<dependency_1.google.protobuf.Empty>): void;
        abstract ChatQACheckSetting(call: grpc_1.ServerUnaryCall<ChatQACheckSettingReq, ChatQACheckSettingResp>, callback: grpc_1.sendUnaryData<ChatQACheckSettingResp>): void;
        abstract SetChatQACheckSetting(call: grpc_1.ServerUnaryCall<SetChatQACheckSettingReq, dependency_1.google.protobuf.Empty>, callback: grpc_1.sendUnaryData<dependency_1.google.protobuf.Empty>): void;
        abstract QAAssignedWorkerList(call: grpc_1.ServerUnaryCall<ChatQualityAssurancePageReq, QAAssignedWorkerListResp>, callback: grpc_1.sendUnaryData<QAAssignedWorkerListResp>): void;
        abstract SetQAAssignedWorkerList(call: grpc_1.ServerUnaryCall<SetQAAssignedWorkerReq, dependency_1.google.protobuf.Empty>, callback: grpc_1.sendUnaryData<dependency_1.google.protobuf.Empty>): void;
        abstract QualityWorkerReportExport(call: grpc_1.ServerUnaryCall<QualityWorkerReportRequest, dependency_1.google.protobuf.Empty>, callback: grpc_1.sendUnaryData<dependency_1.google.protobuf.Empty>): void;
        abstract QualityWorkerReport(call: grpc_1.ServerUnaryCall<QualityWorkerReportRequest, QualityWorkerReportResponse>, callback: grpc_1.sendUnaryData<QualityWorkerReportResponse>): void;
        abstract QualityCheckWorkerNameAndIdMapList(call: grpc_1.ServerUnaryCall<dependency_1.google.protobuf.Empty, QualityCheckWorkerNameAndIdMapListResponse>, callback: grpc_1.sendUnaryData<QualityCheckWorkerNameAndIdMapListResponse>): void;
        abstract WorkerGroupAndWorkersListUseBySearch(call: grpc_1.ServerUnaryCall<dependency_1.google.protobuf.Empty, WorkerGroupAndWorkersListUseBySearchResponse>, callback: grpc_1.sendUnaryData<WorkerGroupAndWorkersListUseBySearchResponse>): void;
        abstract CheckedWorkerQualityViewList(call: grpc_1.ServerUnaryCall<CheckedWorkerQualityViewListRequest, CheckedWorkerQualityViewListResponse>, callback: grpc_1.sendUnaryData<CheckedWorkerQualityViewListResponse>): void;
        abstract CheckedWorkerQualityViewListExport(call: grpc_1.ServerUnaryCall<CheckedWorkerQualityViewListRequest, dependency_1.google.protobuf.Empty>, callback: grpc_1.sendUnaryData<dependency_1.google.protobuf.Empty>): void;
    }
    export class ChatQualityClient extends grpc_1.makeGenericClientConstructor(UnimplementedChatQualityService.definition, "ChatQuality", {}) {
        constructor(address: string, credentials: grpc_1.ChannelCredentials, options?: Partial<grpc_1.ChannelOptions>) {
            super(address, credentials, options);
        }
        Settings: GrpcUnaryServiceInterface<dependency_1.google.protobuf.Empty, ChatQualitySettingsResp> = (message: dependency_1.google.protobuf.Empty, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<ChatQualitySettingsResp>, options?: grpc_1.CallOptions | grpc_1.requestCallback<ChatQualitySettingsResp>, callback?: grpc_1.requestCallback<ChatQualitySettingsResp>): grpc_1.ClientUnaryCall => {
            return super.Settings(message, metadata, options, callback);
        };
        ModifySettings: GrpcUnaryServiceInterface<SetChatQualitySettingsReq, dependency_1.google.protobuf.Empty> = (message: SetChatQualitySettingsReq, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<dependency_1.google.protobuf.Empty>, options?: grpc_1.CallOptions | grpc_1.requestCallback<dependency_1.google.protobuf.Empty>, callback?: grpc_1.requestCallback<dependency_1.google.protobuf.Empty>): grpc_1.ClientUnaryCall => {
            return super.ModifySettings(message, metadata, options, callback);
        };
        CustomerLevelList: GrpcUnaryServiceInterface<ChatQualityAssurancePageReq, ChatQualityCustomerLevelListResp> = (message: ChatQualityAssurancePageReq, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<ChatQualityCustomerLevelListResp>, options?: grpc_1.CallOptions | grpc_1.requestCallback<ChatQualityCustomerLevelListResp>, callback?: grpc_1.requestCallback<ChatQualityCustomerLevelListResp>): grpc_1.ClientUnaryCall => {
            return super.CustomerLevelList(message, metadata, options, callback);
        };
        SetCustomerLevel: GrpcUnaryServiceInterface<SetChatQualityCustomerLevel, dependency_1.google.protobuf.Empty> = (message: SetChatQualityCustomerLevel, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<dependency_1.google.protobuf.Empty>, options?: grpc_1.CallOptions | grpc_1.requestCallback<dependency_1.google.protobuf.Empty>, callback?: grpc_1.requestCallback<dependency_1.google.protobuf.Empty>): grpc_1.ClientUnaryCall => {
            return super.SetCustomerLevel(message, metadata, options, callback);
        };
        ChatQACheckSetting: GrpcUnaryServiceInterface<ChatQACheckSettingReq, ChatQACheckSettingResp> = (message: ChatQACheckSettingReq, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<ChatQACheckSettingResp>, options?: grpc_1.CallOptions | grpc_1.requestCallback<ChatQACheckSettingResp>, callback?: grpc_1.requestCallback<ChatQACheckSettingResp>): grpc_1.ClientUnaryCall => {
            return super.ChatQACheckSetting(message, metadata, options, callback);
        };
        SetChatQACheckSetting: GrpcUnaryServiceInterface<SetChatQACheckSettingReq, dependency_1.google.protobuf.Empty> = (message: SetChatQACheckSettingReq, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<dependency_1.google.protobuf.Empty>, options?: grpc_1.CallOptions | grpc_1.requestCallback<dependency_1.google.protobuf.Empty>, callback?: grpc_1.requestCallback<dependency_1.google.protobuf.Empty>): grpc_1.ClientUnaryCall => {
            return super.SetChatQACheckSetting(message, metadata, options, callback);
        };
        QAAssignedWorkerList: GrpcUnaryServiceInterface<ChatQualityAssurancePageReq, QAAssignedWorkerListResp> = (message: ChatQualityAssurancePageReq, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<QAAssignedWorkerListResp>, options?: grpc_1.CallOptions | grpc_1.requestCallback<QAAssignedWorkerListResp>, callback?: grpc_1.requestCallback<QAAssignedWorkerListResp>): grpc_1.ClientUnaryCall => {
            return super.QAAssignedWorkerList(message, metadata, options, callback);
        };
        SetQAAssignedWorkerList: GrpcUnaryServiceInterface<SetQAAssignedWorkerReq, dependency_1.google.protobuf.Empty> = (message: SetQAAssignedWorkerReq, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<dependency_1.google.protobuf.Empty>, options?: grpc_1.CallOptions | grpc_1.requestCallback<dependency_1.google.protobuf.Empty>, callback?: grpc_1.requestCallback<dependency_1.google.protobuf.Empty>): grpc_1.ClientUnaryCall => {
            return super.SetQAAssignedWorkerList(message, metadata, options, callback);
        };
        QualityWorkerReportExport: GrpcUnaryServiceInterface<QualityWorkerReportRequest, dependency_1.google.protobuf.Empty> = (message: QualityWorkerReportRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<dependency_1.google.protobuf.Empty>, options?: grpc_1.CallOptions | grpc_1.requestCallback<dependency_1.google.protobuf.Empty>, callback?: grpc_1.requestCallback<dependency_1.google.protobuf.Empty>): grpc_1.ClientUnaryCall => {
            return super.QualityWorkerReportExport(message, metadata, options, callback);
        };
        QualityWorkerReport: GrpcUnaryServiceInterface<QualityWorkerReportRequest, QualityWorkerReportResponse> = (message: QualityWorkerReportRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<QualityWorkerReportResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<QualityWorkerReportResponse>, callback?: grpc_1.requestCallback<QualityWorkerReportResponse>): grpc_1.ClientUnaryCall => {
            return super.QualityWorkerReport(message, metadata, options, callback);
        };
        QualityCheckWorkerNameAndIdMapList: GrpcUnaryServiceInterface<dependency_1.google.protobuf.Empty, QualityCheckWorkerNameAndIdMapListResponse> = (message: dependency_1.google.protobuf.Empty, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<QualityCheckWorkerNameAndIdMapListResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<QualityCheckWorkerNameAndIdMapListResponse>, callback?: grpc_1.requestCallback<QualityCheckWorkerNameAndIdMapListResponse>): grpc_1.ClientUnaryCall => {
            return super.QualityCheckWorkerNameAndIdMapList(message, metadata, options, callback);
        };
        WorkerGroupAndWorkersListUseBySearch: GrpcUnaryServiceInterface<dependency_1.google.protobuf.Empty, WorkerGroupAndWorkersListUseBySearchResponse> = (message: dependency_1.google.protobuf.Empty, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<WorkerGroupAndWorkersListUseBySearchResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<WorkerGroupAndWorkersListUseBySearchResponse>, callback?: grpc_1.requestCallback<WorkerGroupAndWorkersListUseBySearchResponse>): grpc_1.ClientUnaryCall => {
            return super.WorkerGroupAndWorkersListUseBySearch(message, metadata, options, callback);
        };
        CheckedWorkerQualityViewList: GrpcUnaryServiceInterface<CheckedWorkerQualityViewListRequest, CheckedWorkerQualityViewListResponse> = (message: CheckedWorkerQualityViewListRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<CheckedWorkerQualityViewListResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<CheckedWorkerQualityViewListResponse>, callback?: grpc_1.requestCallback<CheckedWorkerQualityViewListResponse>): grpc_1.ClientUnaryCall => {
            return super.CheckedWorkerQualityViewList(message, metadata, options, callback);
        };
        CheckedWorkerQualityViewListExport: GrpcUnaryServiceInterface<CheckedWorkerQualityViewListRequest, dependency_1.google.protobuf.Empty> = (message: CheckedWorkerQualityViewListRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<dependency_1.google.protobuf.Empty>, options?: grpc_1.CallOptions | grpc_1.requestCallback<dependency_1.google.protobuf.Empty>, callback?: grpc_1.requestCallback<dependency_1.google.protobuf.Empty>): grpc_1.ClientUnaryCall => {
            return super.CheckedWorkerQualityViewListExport(message, metadata, options, callback);
        };
    }
}
