/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 5.26.1
 * source: api/core/events_tracking.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./../../google/protobuf/empty";
import * as dependency_2 from "./../../google/protobuf/timestamp";
import * as dependency_3 from "./../../validate/validate";
import * as dependency_4 from "./../option";
import * as dependency_5 from "./../common/c_worker";
import * as dependency_6 from "./../common/c_tenant";
import * as pb_1 from "google-protobuf";
import * as grpc_1 from "@grpc/grpc-js";
export namespace api.core {
    export enum ClickEvents {
        ClickEvents_LOGIN = 0,
        ClickEvents_LOGOUT = 1,
        ClickEvents_MULTI_WINDOW = 2,
        ClickEvents_ACCEPT_TASK = 3,
        ClickEvents_PENDING_RESPONSE = 4,
        ClickEvents_TIMEOUT_RESPONSE = 5,
        ClickEvents_IN_SERVICE = 6,
        ClickEvents_CHAT_HISTORY = 7,
        ClickEvents_CHAT_HISTORY_UID = 8,
        ClickEvents_CHAT_HISTORY_USERNAME = 9,
        ClickEvents_CHAT_HISTORY_RESET = 10,
        ClickEvents_CHAT_HISTORY_SEARCH = 11,
        ClickEvents_CHAT_HISTORY_CHECK = 12,
        ClickEvents_MINIMIZE = 13,
        ClickEvents_MAXIMIZE = 14,
        ClickEvents_CLOSE = 15,
        ClickEvents_STATUS_CHANGE = 100,
        ClickEvents_STATUS_CHANGE_CANCEL = 101,
        ClickEvents_STATUS_CHANGE_CONFIRM = 102,
        ClickEvents_STATUS_UNBIND = 103,
        ClickEvents_SEARCH = 104,
        ClickEvents_SESSION_LIST = 105,
        ClickEvents_COPY_UID = 200,
        ClickEvents_REFRESH = 201,
        ClickEvents_TRANSFER = 202,
        ClickEvents_TRANSFER_CONSULT_TYPE = 203,
        ClickEvents_TRANSFER_CONSULT = 204,
        ClickEvents_TRANSFER_CONSULT_CLOSE = 205,
        ClickEvents_MENU_HIDE = 206,
        ClickEvents_MENU_SHOW = 207,
        ClickEvents_FILE_UPLOAD = 208,
        ClickEvents_EMOJI = 209,
        ClickEvents_SCREENSHOT = 210,
        ClickEvents_SESSION_SEARCH = 211,
        ClickEvents_SESSION_SEARCH_CLOSE = 212,
        ClickEvents_SESSION_SEARCH_DATE = 213,
        ClickEvents_SESSION_SEARCH_KEYWORDS = 214,
        ClickEvents_SESSION_SEARCH_CONSULT = 215,
        ClickEvents_SESSION_SEARCH_IMG = 216,
        ClickEvents_SESSION_SEARCH_IMG_DOWNLOAD = 217,
        ClickEvents_SESSION_SEARCH_IMG_COPY = 218,
        ClickEvents_SESSION_SEARCH_VIDEO = 219,
        ClickEvents_SESSION_SEARCH_VIDEO_DOWNLOAD = 220,
        ClickEvents_SESSION_SEARCH_VIDEO_COPY = 221,
        ClickEvents_SESSION_SEARCH_VIDEO_FULLSCREEN = 222,
        ClickEvents_SESSION_SEARCH_VIDEO_BROWSER = 223,
        ClickEvents_QUICK_REPLY_SHOW = 224,
        ClickEvents_QUICK_REPLY_HIDE = 225,
        ClickEvents_QUICK_REPLY_TOGGLE = 226,
        ClickEvents_NOTE_ADD = 227,
        ClickEvents_NOTE_DELETE = 228,
        ClickEvents_NOTE_PAGINATION = 229,
        ClickEvents_NOTE_CONTENT = 230,
        ClickEvents_SEND = 231,
        ClickEvents_VIDEO_DOWNLOAD = 232,
        ClickEvents_IMG_ZOOM_IN = 233,
        ClickEvents_VIDEO = 234,
        ClickEvents_VIDEO_BROWSER = 235,
        ClickEvents_VIDEO_FULLSCREEN = 236,
        ClickEvents_USER_INFO_SHOW = 300,
        ClickEvents_USER_INFO_HIDE = 301,
        ClickEvents_RECHARGE_REFRESH = 302,
        ClickEvents_COPY_RECHARGE_ID = 303,
        ClickEvents_COPY_RECHARGE_OWNER = 304,
        ClickEvents_COPY_RECHARGE_EMAIL = 305,
        ClickEvents_COPY_RECHARGE_SOURCE = 306,
        ClickEvents_COPY_WITHDRAW_ID = 307,
        ClickEvents_COPY_WITHDRAW_OWNER = 308,
        ClickEvents_USER_REPORT_SUBMIT = 309,
        ClickEvents_SESSION_NOTE_OPEN = 310,
        ClickEvents_SESSION_NOTE_CLOSE = 311,
        ClickEvents_SESSION_NOTE_EDIT = 312,
        ClickEvents_SESSION_NOTE_EDIT_SAVE = 313,
        ClickEvents_SESSION_NOTE_DELETE = 314,
        ClickEvents_SESSION_NOTE_SAVE = 315,
        ClickEvents_SESSION_NOTE_CANCEL = 316,
        ClickEvents_INQUIRY_SELECT = 317,
        ClickEvents_INQUIRY_UNSELECT = 318,
        ClickEvents_INQUIRY_SUBMIT = 319,
        ClickEvents_INQUIRY_REFRESH = 320,
        ClickEvents_INQUIRY_SHOW = 321,
        ClickEvents_INQUIRY_CLOSE = 322
    }
    export enum ScrollEvents {
        ScrollEvents_MENU2_CHAT = 0,
        ScrollEvents_MENU2_HISTORY = 1,
        ScrollEvents_MENU3_CHAT = 100,
        ScrollEvents_MENU3_HISTORY = 101,
        ScrollEvents_TRANSFER_LIST = 102,
        ScrollEvents_USER_INFO = 200,
        ScrollEvents_INQUIRY = 201,
        ScrollEvents_CHAT_NOTE = 202
    }
    export enum ActionEvents {
        ActionEvents_HISTORY_SEARCH = 0,
        ActionEvents_HISTORY_SEARCH_MSG = 1,
        ActionEvents_SEARCH = 100,
        ActionEvents_CONTEXT_MENU_COPY_MSG = 200,
        ActionEvents_CONTEXT_MENU_COPY_IMG = 201,
        ActionEvents_CONTEXT_MENU_COPY_IMG_LINK = 202,
        ActionEvents_CONTEXT_MENU_COPY_VIDEO_LINK = 203,
        ActionEvents_CONTEXT_MENU_COPY_EMOJI = 204,
        ActionEvents_CONTEXT_MENU_REPLY_EMOJI = 205,
        ActionEvents_CONTEXT_MENU_REPLY_IMG = 206,
        ActionEvents_CONTEXT_MENU_REPLY_VIDEO = 207,
        ActionEvents_CONTEXT_MENU_REPLY_MSG = 208,
        ActionEvents_CONTEXT_MENU_NOTE_EMOJI = 209,
        ActionEvents_CONTEXT_MENU_NOTE_IMG = 210,
        ActionEvents_CONTEXT_MENU_NOTE_VIDEO = 211,
        ActionEvents_CONTEXT_MENU_NOTE_MSG = 212,
        ActionEvents_CONTEXT_MENU_EDIT_EMOJI = 213,
        ActionEvents_CONTEXT_MENU_EDIT_IMG = 214,
        ActionEvents_CONTEXT_MENU_EDIT_MSG = 215,
        ActionEvents_CONTEXT_MENU_RECALL_MSG = 216,
        ActionEvents_CONTEXT_MENU_RECALL_IMG = 217,
        ActionEvents_CONTEXT_MENU_RECALL_VIDEO = 218,
        ActionEvents_CONTEXT_MENU_RECALL_EMOJI = 219,
        ActionEvents_CONTEXT_MENU_DOWNLOAD_IMG = 220,
        ActionEvents_CONTEXT_MENU_DOWNLOAD_VIDEO = 221,
        ActionEvents_TRANSFER_SEARCH = 222,
        ActionEvents_SESSION_SEARCH_KEYWORDS = 223,
        ActionEvents_QUICK_REPLY_SEARCH_KEYWORDS = 224,
        ActionEvents_SESSION_INPUT = 225,
        ActionEvents_TICKET_CONTENT_INPUT = 300,
        ActionEvents_SESSION_NOTE_CONTENT_INPUT = 301
    }
    export enum EventCategory {
        EVENT_CATEGORY_CLICK = 0,
        EVENT_CATEGORY_SCROLL = 1,
        EVENT_CATEGORY_CLICK_SEND = 2
    }
    export class EventTracking extends pb_1.Message {
        #one_of_decls: number[][] = [[3, 4, 5]];
        constructor(data?: any[] | ({
            timestamp?: number;
            session_id?: number;
        } & (({
            click?: ClickEvents;
            scroll?: never;
            action?: never;
        } | {
            click?: never;
            scroll?: ScrollEvents;
            action?: never;
        } | {
            click?: never;
            scroll?: never;
            action?: ActionEvents;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("timestamp" in data && data.timestamp != undefined) {
                    this.timestamp = data.timestamp;
                }
                if ("session_id" in data && data.session_id != undefined) {
                    this.session_id = data.session_id;
                }
                if ("click" in data && data.click != undefined) {
                    this.click = data.click;
                }
                if ("scroll" in data && data.scroll != undefined) {
                    this.scroll = data.scroll;
                }
                if ("action" in data && data.action != undefined) {
                    this.action = data.action;
                }
            }
        }
        get timestamp() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set timestamp(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get session_id() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set session_id(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get click() {
            return pb_1.Message.getFieldWithDefault(this, 3, ClickEvents.ClickEvents_LOGIN) as ClickEvents;
        }
        set click(value: ClickEvents) {
            pb_1.Message.setOneofField(this, 3, this.#one_of_decls[0], value);
        }
        get has_click() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get scroll() {
            return pb_1.Message.getFieldWithDefault(this, 4, ScrollEvents.ScrollEvents_MENU2_CHAT) as ScrollEvents;
        }
        set scroll(value: ScrollEvents) {
            pb_1.Message.setOneofField(this, 4, this.#one_of_decls[0], value);
        }
        get has_scroll() {
            return pb_1.Message.getField(this, 4) != null;
        }
        get action() {
            return pb_1.Message.getFieldWithDefault(this, 5, ActionEvents.ActionEvents_HISTORY_SEARCH) as ActionEvents;
        }
        set action(value: ActionEvents) {
            pb_1.Message.setOneofField(this, 5, this.#one_of_decls[0], value);
        }
        get has_action() {
            return pb_1.Message.getField(this, 5) != null;
        }
        get event() {
            const cases: {
                [index: number]: "none" | "click" | "scroll" | "action";
            } = {
                0: "none",
                3: "click",
                4: "scroll",
                5: "action"
            };
            return cases[pb_1.Message.computeOneofCase(this, [3, 4, 5])];
        }
        static fromObject(data: {
            timestamp?: number;
            session_id?: number;
            click?: ClickEvents;
            scroll?: ScrollEvents;
            action?: ActionEvents;
        }): EventTracking {
            const message = new EventTracking({});
            if (data.timestamp != null) {
                message.timestamp = data.timestamp;
            }
            if (data.session_id != null) {
                message.session_id = data.session_id;
            }
            if (data.click != null) {
                message.click = data.click;
            }
            if (data.scroll != null) {
                message.scroll = data.scroll;
            }
            if (data.action != null) {
                message.action = data.action;
            }
            return message;
        }
        toObject() {
            const data: {
                timestamp?: number;
                session_id?: number;
                click?: ClickEvents;
                scroll?: ScrollEvents;
                action?: ActionEvents;
            } = {};
            if (this.timestamp != null) {
                data.timestamp = this.timestamp;
            }
            if (this.session_id != null) {
                data.session_id = this.session_id;
            }
            if (this.click != null) {
                data.click = this.click;
            }
            if (this.scroll != null) {
                data.scroll = this.scroll;
            }
            if (this.action != null) {
                data.action = this.action;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.timestamp != 0)
                writer.writeInt64(1, this.timestamp);
            if (this.session_id != 0)
                writer.writeInt32(2, this.session_id);
            if (this.has_click)
                writer.writeEnum(3, this.click);
            if (this.has_scroll)
                writer.writeEnum(4, this.scroll);
            if (this.has_action)
                writer.writeEnum(5, this.action);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): EventTracking {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new EventTracking();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.timestamp = reader.readInt64();
                        break;
                    case 2:
                        message.session_id = reader.readInt32();
                        break;
                    case 3:
                        message.click = reader.readEnum();
                        break;
                    case 4:
                        message.scroll = reader.readEnum();
                        break;
                    case 5:
                        message.action = reader.readEnum();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): EventTracking {
            return EventTracking.deserialize(bytes);
        }
    }
    export class EventTrackingRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            events?: EventTracking[];
            worker_name?: string;
            worker_account?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("events" in data && data.events != undefined) {
                    this.events = data.events;
                }
                if ("worker_name" in data && data.worker_name != undefined) {
                    this.worker_name = data.worker_name;
                }
                if ("worker_account" in data && data.worker_account != undefined) {
                    this.worker_account = data.worker_account;
                }
            }
        }
        get events() {
            return pb_1.Message.getRepeatedWrapperField(this, EventTracking, 1) as EventTracking[];
        }
        set events(value: EventTracking[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        get worker_name() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set worker_name(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get worker_account() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set worker_account(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            events?: ReturnType<typeof EventTracking.prototype.toObject>[];
            worker_name?: string;
            worker_account?: string;
        }): EventTrackingRequest {
            const message = new EventTrackingRequest({});
            if (data.events != null) {
                message.events = data.events.map(item => EventTracking.fromObject(item));
            }
            if (data.worker_name != null) {
                message.worker_name = data.worker_name;
            }
            if (data.worker_account != null) {
                message.worker_account = data.worker_account;
            }
            return message;
        }
        toObject() {
            const data: {
                events?: ReturnType<typeof EventTracking.prototype.toObject>[];
                worker_name?: string;
                worker_account?: string;
            } = {};
            if (this.events != null) {
                data.events = this.events.map((item: EventTracking) => item.toObject());
            }
            if (this.worker_name != null) {
                data.worker_name = this.worker_name;
            }
            if (this.worker_account != null) {
                data.worker_account = this.worker_account;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.events.length)
                writer.writeRepeatedMessage(1, this.events, (item: EventTracking) => item.serialize(writer));
            if (this.worker_name.length)
                writer.writeString(2, this.worker_name);
            if (this.worker_account.length)
                writer.writeString(3, this.worker_account);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): EventTrackingRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new EventTrackingRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.events, () => pb_1.Message.addToRepeatedWrapperField(message, 1, EventTracking.deserialize(reader), EventTracking));
                        break;
                    case 2:
                        message.worker_name = reader.readString();
                        break;
                    case 3:
                        message.worker_account = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): EventTrackingRequest {
            return EventTrackingRequest.deserialize(bytes);
        }
    }
    export class TimeRange extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            start_ts?: dependency_2.google.protobuf.Timestamp;
            end_ts?: dependency_2.google.protobuf.Timestamp;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("start_ts" in data && data.start_ts != undefined) {
                    this.start_ts = data.start_ts;
                }
                if ("end_ts" in data && data.end_ts != undefined) {
                    this.end_ts = data.end_ts;
                }
            }
        }
        get start_ts() {
            return pb_1.Message.getWrapperField(this, dependency_2.google.protobuf.Timestamp, 1) as dependency_2.google.protobuf.Timestamp;
        }
        set start_ts(value: dependency_2.google.protobuf.Timestamp) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_start_ts() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get end_ts() {
            return pb_1.Message.getWrapperField(this, dependency_2.google.protobuf.Timestamp, 2) as dependency_2.google.protobuf.Timestamp;
        }
        set end_ts(value: dependency_2.google.protobuf.Timestamp) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_end_ts() {
            return pb_1.Message.getField(this, 2) != null;
        }
        static fromObject(data: {
            start_ts?: ReturnType<typeof dependency_2.google.protobuf.Timestamp.prototype.toObject>;
            end_ts?: ReturnType<typeof dependency_2.google.protobuf.Timestamp.prototype.toObject>;
        }): TimeRange {
            const message = new TimeRange({});
            if (data.start_ts != null) {
                message.start_ts = dependency_2.google.protobuf.Timestamp.fromObject(data.start_ts);
            }
            if (data.end_ts != null) {
                message.end_ts = dependency_2.google.protobuf.Timestamp.fromObject(data.end_ts);
            }
            return message;
        }
        toObject() {
            const data: {
                start_ts?: ReturnType<typeof dependency_2.google.protobuf.Timestamp.prototype.toObject>;
                end_ts?: ReturnType<typeof dependency_2.google.protobuf.Timestamp.prototype.toObject>;
            } = {};
            if (this.start_ts != null) {
                data.start_ts = this.start_ts.toObject();
            }
            if (this.end_ts != null) {
                data.end_ts = this.end_ts.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_start_ts)
                writer.writeMessage(1, this.start_ts, () => this.start_ts.serialize(writer));
            if (this.has_end_ts)
                writer.writeMessage(2, this.end_ts, () => this.end_ts.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): TimeRange {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new TimeRange();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.start_ts, () => message.start_ts = dependency_2.google.protobuf.Timestamp.deserialize(reader));
                        break;
                    case 2:
                        reader.readMessage(message.end_ts, () => message.end_ts = dependency_2.google.protobuf.Timestamp.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): TimeRange {
            return TimeRange.deserialize(bytes);
        }
    }
    export class EventTrackingDetailRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            worker_id?: number;
            hourly?: boolean;
            timeRange?: TimeRange;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("worker_id" in data && data.worker_id != undefined) {
                    this.worker_id = data.worker_id;
                }
                if ("hourly" in data && data.hourly != undefined) {
                    this.hourly = data.hourly;
                }
                if ("timeRange" in data && data.timeRange != undefined) {
                    this.timeRange = data.timeRange;
                }
            }
        }
        get worker_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set worker_id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get hourly() {
            return pb_1.Message.getFieldWithDefault(this, 2, false) as boolean;
        }
        set hourly(value: boolean) {
            pb_1.Message.setField(this, 2, value);
        }
        get timeRange() {
            return pb_1.Message.getWrapperField(this, TimeRange, 3) as TimeRange;
        }
        set timeRange(value: TimeRange) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get has_timeRange() {
            return pb_1.Message.getField(this, 3) != null;
        }
        static fromObject(data: {
            worker_id?: number;
            hourly?: boolean;
            timeRange?: ReturnType<typeof TimeRange.prototype.toObject>;
        }): EventTrackingDetailRequest {
            const message = new EventTrackingDetailRequest({});
            if (data.worker_id != null) {
                message.worker_id = data.worker_id;
            }
            if (data.hourly != null) {
                message.hourly = data.hourly;
            }
            if (data.timeRange != null) {
                message.timeRange = TimeRange.fromObject(data.timeRange);
            }
            return message;
        }
        toObject() {
            const data: {
                worker_id?: number;
                hourly?: boolean;
                timeRange?: ReturnType<typeof TimeRange.prototype.toObject>;
            } = {};
            if (this.worker_id != null) {
                data.worker_id = this.worker_id;
            }
            if (this.hourly != null) {
                data.hourly = this.hourly;
            }
            if (this.timeRange != null) {
                data.timeRange = this.timeRange.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.worker_id != 0)
                writer.writeUint32(1, this.worker_id);
            if (this.hourly != false)
                writer.writeBool(2, this.hourly);
            if (this.has_timeRange)
                writer.writeMessage(3, this.timeRange, () => this.timeRange.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): EventTrackingDetailRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new EventTrackingDetailRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.worker_id = reader.readUint32();
                        break;
                    case 2:
                        message.hourly = reader.readBool();
                        break;
                    case 3:
                        reader.readMessage(message.timeRange, () => message.timeRange = TimeRange.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): EventTrackingDetailRequest {
            return EventTrackingDetailRequest.deserialize(bytes);
        }
    }
    export class EventTrackingDetailResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            list?: EventTrackingDetailResponse.EventTrackingDetailItem[];
            total?: number;
            valid_session_count?: number;
            avg_resp_time?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("list" in data && data.list != undefined) {
                    this.list = data.list;
                }
                if ("total" in data && data.total != undefined) {
                    this.total = data.total;
                }
                if ("valid_session_count" in data && data.valid_session_count != undefined) {
                    this.valid_session_count = data.valid_session_count;
                }
                if ("avg_resp_time" in data && data.avg_resp_time != undefined) {
                    this.avg_resp_time = data.avg_resp_time;
                }
            }
        }
        get list() {
            return pb_1.Message.getRepeatedWrapperField(this, EventTrackingDetailResponse.EventTrackingDetailItem, 1) as EventTrackingDetailResponse.EventTrackingDetailItem[];
        }
        set list(value: EventTrackingDetailResponse.EventTrackingDetailItem[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        get total() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set total(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get valid_session_count() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set valid_session_count(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        get avg_resp_time() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set avg_resp_time(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            list?: ReturnType<typeof EventTrackingDetailResponse.EventTrackingDetailItem.prototype.toObject>[];
            total?: number;
            valid_session_count?: number;
            avg_resp_time?: string;
        }): EventTrackingDetailResponse {
            const message = new EventTrackingDetailResponse({});
            if (data.list != null) {
                message.list = data.list.map(item => EventTrackingDetailResponse.EventTrackingDetailItem.fromObject(item));
            }
            if (data.total != null) {
                message.total = data.total;
            }
            if (data.valid_session_count != null) {
                message.valid_session_count = data.valid_session_count;
            }
            if (data.avg_resp_time != null) {
                message.avg_resp_time = data.avg_resp_time;
            }
            return message;
        }
        toObject() {
            const data: {
                list?: ReturnType<typeof EventTrackingDetailResponse.EventTrackingDetailItem.prototype.toObject>[];
                total?: number;
                valid_session_count?: number;
                avg_resp_time?: string;
            } = {};
            if (this.list != null) {
                data.list = this.list.map((item: EventTrackingDetailResponse.EventTrackingDetailItem) => item.toObject());
            }
            if (this.total != null) {
                data.total = this.total;
            }
            if (this.valid_session_count != null) {
                data.valid_session_count = this.valid_session_count;
            }
            if (this.avg_resp_time != null) {
                data.avg_resp_time = this.avg_resp_time;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.list.length)
                writer.writeRepeatedMessage(1, this.list, (item: EventTrackingDetailResponse.EventTrackingDetailItem) => item.serialize(writer));
            if (this.total != 0)
                writer.writeUint32(2, this.total);
            if (this.valid_session_count != 0)
                writer.writeUint32(3, this.valid_session_count);
            if (this.avg_resp_time.length)
                writer.writeString(4, this.avg_resp_time);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): EventTrackingDetailResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new EventTrackingDetailResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.list, () => pb_1.Message.addToRepeatedWrapperField(message, 1, EventTrackingDetailResponse.EventTrackingDetailItem.deserialize(reader), EventTrackingDetailResponse.EventTrackingDetailItem));
                        break;
                    case 2:
                        message.total = reader.readUint32();
                        break;
                    case 3:
                        message.valid_session_count = reader.readUint32();
                        break;
                    case 4:
                        message.avg_resp_time = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): EventTrackingDetailResponse {
            return EventTrackingDetailResponse.deserialize(bytes);
        }
    }
    export namespace EventTrackingDetailResponse {
        export class EventTrackingDetailItem extends pb_1.Message {
            #one_of_decls: number[][] = [];
            constructor(data?: any[] | {
                hour?: string;
                clicks?: number;
                scrolls?: number;
                sends?: number;
            }) {
                super();
                pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
                if (!Array.isArray(data) && typeof data == "object") {
                    if ("hour" in data && data.hour != undefined) {
                        this.hour = data.hour;
                    }
                    if ("clicks" in data && data.clicks != undefined) {
                        this.clicks = data.clicks;
                    }
                    if ("scrolls" in data && data.scrolls != undefined) {
                        this.scrolls = data.scrolls;
                    }
                    if ("sends" in data && data.sends != undefined) {
                        this.sends = data.sends;
                    }
                }
            }
            get hour() {
                return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
            }
            set hour(value: string) {
                pb_1.Message.setField(this, 1, value);
            }
            get clicks() {
                return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
            }
            set clicks(value: number) {
                pb_1.Message.setField(this, 2, value);
            }
            get scrolls() {
                return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
            }
            set scrolls(value: number) {
                pb_1.Message.setField(this, 3, value);
            }
            get sends() {
                return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
            }
            set sends(value: number) {
                pb_1.Message.setField(this, 4, value);
            }
            static fromObject(data: {
                hour?: string;
                clicks?: number;
                scrolls?: number;
                sends?: number;
            }): EventTrackingDetailItem {
                const message = new EventTrackingDetailItem({});
                if (data.hour != null) {
                    message.hour = data.hour;
                }
                if (data.clicks != null) {
                    message.clicks = data.clicks;
                }
                if (data.scrolls != null) {
                    message.scrolls = data.scrolls;
                }
                if (data.sends != null) {
                    message.sends = data.sends;
                }
                return message;
            }
            toObject() {
                const data: {
                    hour?: string;
                    clicks?: number;
                    scrolls?: number;
                    sends?: number;
                } = {};
                if (this.hour != null) {
                    data.hour = this.hour;
                }
                if (this.clicks != null) {
                    data.clicks = this.clicks;
                }
                if (this.scrolls != null) {
                    data.scrolls = this.scrolls;
                }
                if (this.sends != null) {
                    data.sends = this.sends;
                }
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (this.hour.length)
                    writer.writeString(1, this.hour);
                if (this.clicks != 0)
                    writer.writeUint32(2, this.clicks);
                if (this.scrolls != 0)
                    writer.writeUint32(3, this.scrolls);
                if (this.sends != 0)
                    writer.writeUint32(4, this.sends);
                if (!w)
                    return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): EventTrackingDetailItem {
                const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new EventTrackingDetailItem();
                while (reader.nextField()) {
                    if (reader.isEndGroup())
                        break;
                    switch (reader.getFieldNumber()) {
                        case 1:
                            message.hour = reader.readString();
                            break;
                        case 2:
                            message.clicks = reader.readUint32();
                            break;
                        case 3:
                            message.scrolls = reader.readUint32();
                            break;
                        case 4:
                            message.sends = reader.readUint32();
                            break;
                        default: reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static deserializeBinary(bytes: Uint8Array): EventTrackingDetailItem {
                return EventTrackingDetailItem.deserialize(bytes);
            }
        }
    }
    export class EventTrackingListRequest extends pb_1.Message {
        #one_of_decls: number[][] = [[2], [6]];
        constructor(data?: any[] | ({
            worker_id?: number;
            cursor?: string;
            reverse?: boolean;
            limit?: number;
        } & (({
            event_category?: EventCategory;
        }) | ({
            time_range?: TimeRange;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("worker_id" in data && data.worker_id != undefined) {
                    this.worker_id = data.worker_id;
                }
                if ("event_category" in data && data.event_category != undefined) {
                    this.event_category = data.event_category;
                }
                if ("cursor" in data && data.cursor != undefined) {
                    this.cursor = data.cursor;
                }
                if ("reverse" in data && data.reverse != undefined) {
                    this.reverse = data.reverse;
                }
                if ("limit" in data && data.limit != undefined) {
                    this.limit = data.limit;
                }
                if ("time_range" in data && data.time_range != undefined) {
                    this.time_range = data.time_range;
                }
            }
        }
        get worker_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set worker_id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get event_category() {
            return pb_1.Message.getFieldWithDefault(this, 2, EventCategory.EVENT_CATEGORY_CLICK) as EventCategory;
        }
        set event_category(value: EventCategory) {
            pb_1.Message.setOneofField(this, 2, this.#one_of_decls[0], value);
        }
        get has_event_category() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get cursor() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set cursor(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get reverse() {
            return pb_1.Message.getFieldWithDefault(this, 4, false) as boolean;
        }
        set reverse(value: boolean) {
            pb_1.Message.setField(this, 4, value);
        }
        get limit() {
            return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
        }
        set limit(value: number) {
            pb_1.Message.setField(this, 5, value);
        }
        get time_range() {
            return pb_1.Message.getWrapperField(this, TimeRange, 6) as TimeRange;
        }
        set time_range(value: TimeRange) {
            pb_1.Message.setOneofWrapperField(this, 6, this.#one_of_decls[1], value);
        }
        get has_time_range() {
            return pb_1.Message.getField(this, 6) != null;
        }
        get _event_category() {
            const cases: {
                [index: number]: "none" | "event_category";
            } = {
                0: "none",
                2: "event_category"
            };
            return cases[pb_1.Message.computeOneofCase(this, [2])];
        }
        get _time_range() {
            const cases: {
                [index: number]: "none" | "time_range";
            } = {
                0: "none",
                6: "time_range"
            };
            return cases[pb_1.Message.computeOneofCase(this, [6])];
        }
        static fromObject(data: {
            worker_id?: number;
            event_category?: EventCategory;
            cursor?: string;
            reverse?: boolean;
            limit?: number;
            time_range?: ReturnType<typeof TimeRange.prototype.toObject>;
        }): EventTrackingListRequest {
            const message = new EventTrackingListRequest({});
            if (data.worker_id != null) {
                message.worker_id = data.worker_id;
            }
            if (data.event_category != null) {
                message.event_category = data.event_category;
            }
            if (data.cursor != null) {
                message.cursor = data.cursor;
            }
            if (data.reverse != null) {
                message.reverse = data.reverse;
            }
            if (data.limit != null) {
                message.limit = data.limit;
            }
            if (data.time_range != null) {
                message.time_range = TimeRange.fromObject(data.time_range);
            }
            return message;
        }
        toObject() {
            const data: {
                worker_id?: number;
                event_category?: EventCategory;
                cursor?: string;
                reverse?: boolean;
                limit?: number;
                time_range?: ReturnType<typeof TimeRange.prototype.toObject>;
            } = {};
            if (this.worker_id != null) {
                data.worker_id = this.worker_id;
            }
            if (this.event_category != null) {
                data.event_category = this.event_category;
            }
            if (this.cursor != null) {
                data.cursor = this.cursor;
            }
            if (this.reverse != null) {
                data.reverse = this.reverse;
            }
            if (this.limit != null) {
                data.limit = this.limit;
            }
            if (this.time_range != null) {
                data.time_range = this.time_range.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.worker_id != 0)
                writer.writeUint32(1, this.worker_id);
            if (this.has_event_category)
                writer.writeEnum(2, this.event_category);
            if (this.cursor.length)
                writer.writeString(3, this.cursor);
            if (this.reverse != false)
                writer.writeBool(4, this.reverse);
            if (this.limit != 0)
                writer.writeUint32(5, this.limit);
            if (this.has_time_range)
                writer.writeMessage(6, this.time_range, () => this.time_range.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): EventTrackingListRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new EventTrackingListRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.worker_id = reader.readUint32();
                        break;
                    case 2:
                        message.event_category = reader.readEnum();
                        break;
                    case 3:
                        message.cursor = reader.readString();
                        break;
                    case 4:
                        message.reverse = reader.readBool();
                        break;
                    case 5:
                        message.limit = reader.readUint32();
                        break;
                    case 6:
                        reader.readMessage(message.time_range, () => message.time_range = TimeRange.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): EventTrackingListRequest {
            return EventTrackingListRequest.deserialize(bytes);
        }
    }
    export class EventTrackingListResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            events?: EventTrackingListResponse.EventTrackingItem[];
            cursor?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("events" in data && data.events != undefined) {
                    this.events = data.events;
                }
                if ("cursor" in data && data.cursor != undefined) {
                    this.cursor = data.cursor;
                }
            }
        }
        get events() {
            return pb_1.Message.getRepeatedWrapperField(this, EventTrackingListResponse.EventTrackingItem, 1) as EventTrackingListResponse.EventTrackingItem[];
        }
        set events(value: EventTrackingListResponse.EventTrackingItem[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        get cursor() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set cursor(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            events?: ReturnType<typeof EventTrackingListResponse.EventTrackingItem.prototype.toObject>[];
            cursor?: string;
        }): EventTrackingListResponse {
            const message = new EventTrackingListResponse({});
            if (data.events != null) {
                message.events = data.events.map(item => EventTrackingListResponse.EventTrackingItem.fromObject(item));
            }
            if (data.cursor != null) {
                message.cursor = data.cursor;
            }
            return message;
        }
        toObject() {
            const data: {
                events?: ReturnType<typeof EventTrackingListResponse.EventTrackingItem.prototype.toObject>[];
                cursor?: string;
            } = {};
            if (this.events != null) {
                data.events = this.events.map((item: EventTrackingListResponse.EventTrackingItem) => item.toObject());
            }
            if (this.cursor != null) {
                data.cursor = this.cursor;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.events.length)
                writer.writeRepeatedMessage(1, this.events, (item: EventTrackingListResponse.EventTrackingItem) => item.serialize(writer));
            if (this.cursor.length)
                writer.writeString(2, this.cursor);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): EventTrackingListResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new EventTrackingListResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.events, () => pb_1.Message.addToRepeatedWrapperField(message, 1, EventTrackingListResponse.EventTrackingItem.deserialize(reader), EventTrackingListResponse.EventTrackingItem));
                        break;
                    case 2:
                        message.cursor = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): EventTrackingListResponse {
            return EventTrackingListResponse.deserialize(bytes);
        }
    }
    export namespace EventTrackingListResponse {
        export class EventTrackingItem extends pb_1.Message {
            #one_of_decls: number[][] = [];
            constructor(data?: any[] | {
                timestamp?: string;
                time_taken?: number;
                event_category?: string;
                event_type?: string;
            }) {
                super();
                pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
                if (!Array.isArray(data) && typeof data == "object") {
                    if ("timestamp" in data && data.timestamp != undefined) {
                        this.timestamp = data.timestamp;
                    }
                    if ("time_taken" in data && data.time_taken != undefined) {
                        this.time_taken = data.time_taken;
                    }
                    if ("event_category" in data && data.event_category != undefined) {
                        this.event_category = data.event_category;
                    }
                    if ("event_type" in data && data.event_type != undefined) {
                        this.event_type = data.event_type;
                    }
                }
            }
            get timestamp() {
                return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
            }
            set timestamp(value: string) {
                pb_1.Message.setField(this, 1, value);
            }
            get time_taken() {
                return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
            }
            set time_taken(value: number) {
                pb_1.Message.setField(this, 2, value);
            }
            get event_category() {
                return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
            }
            set event_category(value: string) {
                pb_1.Message.setField(this, 3, value);
            }
            get event_type() {
                return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
            }
            set event_type(value: string) {
                pb_1.Message.setField(this, 4, value);
            }
            static fromObject(data: {
                timestamp?: string;
                time_taken?: number;
                event_category?: string;
                event_type?: string;
            }): EventTrackingItem {
                const message = new EventTrackingItem({});
                if (data.timestamp != null) {
                    message.timestamp = data.timestamp;
                }
                if (data.time_taken != null) {
                    message.time_taken = data.time_taken;
                }
                if (data.event_category != null) {
                    message.event_category = data.event_category;
                }
                if (data.event_type != null) {
                    message.event_type = data.event_type;
                }
                return message;
            }
            toObject() {
                const data: {
                    timestamp?: string;
                    time_taken?: number;
                    event_category?: string;
                    event_type?: string;
                } = {};
                if (this.timestamp != null) {
                    data.timestamp = this.timestamp;
                }
                if (this.time_taken != null) {
                    data.time_taken = this.time_taken;
                }
                if (this.event_category != null) {
                    data.event_category = this.event_category;
                }
                if (this.event_type != null) {
                    data.event_type = this.event_type;
                }
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (this.timestamp.length)
                    writer.writeString(1, this.timestamp);
                if (this.time_taken != 0)
                    writer.writeUint32(2, this.time_taken);
                if (this.event_category.length)
                    writer.writeString(3, this.event_category);
                if (this.event_type.length)
                    writer.writeString(4, this.event_type);
                if (!w)
                    return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): EventTrackingItem {
                const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new EventTrackingItem();
                while (reader.nextField()) {
                    if (reader.isEndGroup())
                        break;
                    switch (reader.getFieldNumber()) {
                        case 1:
                            message.timestamp = reader.readString();
                            break;
                        case 2:
                            message.time_taken = reader.readUint32();
                            break;
                        case 3:
                            message.event_category = reader.readString();
                            break;
                        case 4:
                            message.event_type = reader.readString();
                            break;
                        default: reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static deserializeBinary(bytes: Uint8Array): EventTrackingItem {
                return EventTrackingItem.deserialize(bytes);
            }
        }
    }
    export class EventTrackingDailyStatsRequest extends pb_1.Message {
        #one_of_decls: number[][] = [[4], [7]];
        constructor(data?: any[] | ({
            group_id?: number;
            worker_id?: number;
            worker_account?: string;
            page?: number;
            page_size?: number;
        } & (({
            worker_status?: dependency_5.api.common.WorkerState;
        }) | ({
            time_range?: TimeRange;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("group_id" in data && data.group_id != undefined) {
                    this.group_id = data.group_id;
                }
                if ("worker_id" in data && data.worker_id != undefined) {
                    this.worker_id = data.worker_id;
                }
                if ("worker_account" in data && data.worker_account != undefined) {
                    this.worker_account = data.worker_account;
                }
                if ("worker_status" in data && data.worker_status != undefined) {
                    this.worker_status = data.worker_status;
                }
                if ("page" in data && data.page != undefined) {
                    this.page = data.page;
                }
                if ("page_size" in data && data.page_size != undefined) {
                    this.page_size = data.page_size;
                }
                if ("time_range" in data && data.time_range != undefined) {
                    this.time_range = data.time_range;
                }
            }
        }
        get group_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set group_id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get worker_id() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set worker_id(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get worker_account() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set worker_account(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get worker_status() {
            return pb_1.Message.getFieldWithDefault(this, 4, dependency_5.api.common.WorkerState.WORKER_OFFLINE) as dependency_5.api.common.WorkerState;
        }
        set worker_status(value: dependency_5.api.common.WorkerState) {
            pb_1.Message.setOneofField(this, 4, this.#one_of_decls[0], value);
        }
        get has_worker_status() {
            return pb_1.Message.getField(this, 4) != null;
        }
        get page() {
            return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
        }
        set page(value: number) {
            pb_1.Message.setField(this, 5, value);
        }
        get page_size() {
            return pb_1.Message.getFieldWithDefault(this, 6, 0) as number;
        }
        set page_size(value: number) {
            pb_1.Message.setField(this, 6, value);
        }
        get time_range() {
            return pb_1.Message.getWrapperField(this, TimeRange, 7) as TimeRange;
        }
        set time_range(value: TimeRange) {
            pb_1.Message.setOneofWrapperField(this, 7, this.#one_of_decls[1], value);
        }
        get has_time_range() {
            return pb_1.Message.getField(this, 7) != null;
        }
        get _worker_status() {
            const cases: {
                [index: number]: "none" | "worker_status";
            } = {
                0: "none",
                4: "worker_status"
            };
            return cases[pb_1.Message.computeOneofCase(this, [4])];
        }
        get _time_range() {
            const cases: {
                [index: number]: "none" | "time_range";
            } = {
                0: "none",
                7: "time_range"
            };
            return cases[pb_1.Message.computeOneofCase(this, [7])];
        }
        static fromObject(data: {
            group_id?: number;
            worker_id?: number;
            worker_account?: string;
            worker_status?: dependency_5.api.common.WorkerState;
            page?: number;
            page_size?: number;
            time_range?: ReturnType<typeof TimeRange.prototype.toObject>;
        }): EventTrackingDailyStatsRequest {
            const message = new EventTrackingDailyStatsRequest({});
            if (data.group_id != null) {
                message.group_id = data.group_id;
            }
            if (data.worker_id != null) {
                message.worker_id = data.worker_id;
            }
            if (data.worker_account != null) {
                message.worker_account = data.worker_account;
            }
            if (data.worker_status != null) {
                message.worker_status = data.worker_status;
            }
            if (data.page != null) {
                message.page = data.page;
            }
            if (data.page_size != null) {
                message.page_size = data.page_size;
            }
            if (data.time_range != null) {
                message.time_range = TimeRange.fromObject(data.time_range);
            }
            return message;
        }
        toObject() {
            const data: {
                group_id?: number;
                worker_id?: number;
                worker_account?: string;
                worker_status?: dependency_5.api.common.WorkerState;
                page?: number;
                page_size?: number;
                time_range?: ReturnType<typeof TimeRange.prototype.toObject>;
            } = {};
            if (this.group_id != null) {
                data.group_id = this.group_id;
            }
            if (this.worker_id != null) {
                data.worker_id = this.worker_id;
            }
            if (this.worker_account != null) {
                data.worker_account = this.worker_account;
            }
            if (this.worker_status != null) {
                data.worker_status = this.worker_status;
            }
            if (this.page != null) {
                data.page = this.page;
            }
            if (this.page_size != null) {
                data.page_size = this.page_size;
            }
            if (this.time_range != null) {
                data.time_range = this.time_range.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.group_id != 0)
                writer.writeInt32(1, this.group_id);
            if (this.worker_id != 0)
                writer.writeUint32(2, this.worker_id);
            if (this.worker_account.length)
                writer.writeString(3, this.worker_account);
            if (this.has_worker_status)
                writer.writeEnum(4, this.worker_status);
            if (this.page != 0)
                writer.writeUint32(5, this.page);
            if (this.page_size != 0)
                writer.writeUint32(6, this.page_size);
            if (this.has_time_range)
                writer.writeMessage(7, this.time_range, () => this.time_range.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): EventTrackingDailyStatsRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new EventTrackingDailyStatsRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.group_id = reader.readInt32();
                        break;
                    case 2:
                        message.worker_id = reader.readUint32();
                        break;
                    case 3:
                        message.worker_account = reader.readString();
                        break;
                    case 4:
                        message.worker_status = reader.readEnum();
                        break;
                    case 5:
                        message.page = reader.readUint32();
                        break;
                    case 6:
                        message.page_size = reader.readUint32();
                        break;
                    case 7:
                        reader.readMessage(message.time_range, () => message.time_range = TimeRange.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): EventTrackingDailyStatsRequest {
            return EventTrackingDailyStatsRequest.deserialize(bytes);
        }
    }
    export class EventTrackingDailyStatsResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            list?: EventTrackingDailyStatsResponse.EventTrackingDailyStatsItem[];
            total?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("list" in data && data.list != undefined) {
                    this.list = data.list;
                }
                if ("total" in data && data.total != undefined) {
                    this.total = data.total;
                }
            }
        }
        get list() {
            return pb_1.Message.getRepeatedWrapperField(this, EventTrackingDailyStatsResponse.EventTrackingDailyStatsItem, 1) as EventTrackingDailyStatsResponse.EventTrackingDailyStatsItem[];
        }
        set list(value: EventTrackingDailyStatsResponse.EventTrackingDailyStatsItem[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        get total() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set total(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            list?: ReturnType<typeof EventTrackingDailyStatsResponse.EventTrackingDailyStatsItem.prototype.toObject>[];
            total?: number;
        }): EventTrackingDailyStatsResponse {
            const message = new EventTrackingDailyStatsResponse({});
            if (data.list != null) {
                message.list = data.list.map(item => EventTrackingDailyStatsResponse.EventTrackingDailyStatsItem.fromObject(item));
            }
            if (data.total != null) {
                message.total = data.total;
            }
            return message;
        }
        toObject() {
            const data: {
                list?: ReturnType<typeof EventTrackingDailyStatsResponse.EventTrackingDailyStatsItem.prototype.toObject>[];
                total?: number;
            } = {};
            if (this.list != null) {
                data.list = this.list.map((item: EventTrackingDailyStatsResponse.EventTrackingDailyStatsItem) => item.toObject());
            }
            if (this.total != null) {
                data.total = this.total;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.list.length)
                writer.writeRepeatedMessage(1, this.list, (item: EventTrackingDailyStatsResponse.EventTrackingDailyStatsItem) => item.serialize(writer));
            if (this.total != 0)
                writer.writeUint32(2, this.total);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): EventTrackingDailyStatsResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new EventTrackingDailyStatsResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.list, () => pb_1.Message.addToRepeatedWrapperField(message, 1, EventTrackingDailyStatsResponse.EventTrackingDailyStatsItem.deserialize(reader), EventTrackingDailyStatsResponse.EventTrackingDailyStatsItem));
                        break;
                    case 2:
                        message.total = reader.readUint32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): EventTrackingDailyStatsResponse {
            return EventTrackingDailyStatsResponse.deserialize(bytes);
        }
    }
    export namespace EventTrackingDailyStatsResponse {
        export class EventTrackingDailyStatsItem extends pb_1.Message {
            #one_of_decls: number[][] = [];
            constructor(data?: any[] | {
                date?: string;
                worker_id?: number;
                last_alarm_trigger_time?: string;
                alarm_trigger_count?: number;
                alarm_duration?: number;
                click_count?: number;
                click_duration?: number;
                scroll_count?: number;
                scroll_duration?: number;
                send_count?: number;
                send_duration?: number;
                total_duration?: number;
                worker_status?: dependency_5.api.common.WorkerState;
                worker_acc?: string;
                avg_resp_time?: string;
            }) {
                super();
                pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
                if (!Array.isArray(data) && typeof data == "object") {
                    if ("date" in data && data.date != undefined) {
                        this.date = data.date;
                    }
                    if ("worker_id" in data && data.worker_id != undefined) {
                        this.worker_id = data.worker_id;
                    }
                    if ("last_alarm_trigger_time" in data && data.last_alarm_trigger_time != undefined) {
                        this.last_alarm_trigger_time = data.last_alarm_trigger_time;
                    }
                    if ("alarm_trigger_count" in data && data.alarm_trigger_count != undefined) {
                        this.alarm_trigger_count = data.alarm_trigger_count;
                    }
                    if ("alarm_duration" in data && data.alarm_duration != undefined) {
                        this.alarm_duration = data.alarm_duration;
                    }
                    if ("click_count" in data && data.click_count != undefined) {
                        this.click_count = data.click_count;
                    }
                    if ("click_duration" in data && data.click_duration != undefined) {
                        this.click_duration = data.click_duration;
                    }
                    if ("scroll_count" in data && data.scroll_count != undefined) {
                        this.scroll_count = data.scroll_count;
                    }
                    if ("scroll_duration" in data && data.scroll_duration != undefined) {
                        this.scroll_duration = data.scroll_duration;
                    }
                    if ("send_count" in data && data.send_count != undefined) {
                        this.send_count = data.send_count;
                    }
                    if ("send_duration" in data && data.send_duration != undefined) {
                        this.send_duration = data.send_duration;
                    }
                    if ("total_duration" in data && data.total_duration != undefined) {
                        this.total_duration = data.total_duration;
                    }
                    if ("worker_status" in data && data.worker_status != undefined) {
                        this.worker_status = data.worker_status;
                    }
                    if ("worker_acc" in data && data.worker_acc != undefined) {
                        this.worker_acc = data.worker_acc;
                    }
                    if ("avg_resp_time" in data && data.avg_resp_time != undefined) {
                        this.avg_resp_time = data.avg_resp_time;
                    }
                }
            }
            get date() {
                return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
            }
            set date(value: string) {
                pb_1.Message.setField(this, 1, value);
            }
            get worker_id() {
                return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
            }
            set worker_id(value: number) {
                pb_1.Message.setField(this, 2, value);
            }
            get last_alarm_trigger_time() {
                return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
            }
            set last_alarm_trigger_time(value: string) {
                pb_1.Message.setField(this, 3, value);
            }
            get alarm_trigger_count() {
                return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
            }
            set alarm_trigger_count(value: number) {
                pb_1.Message.setField(this, 4, value);
            }
            get alarm_duration() {
                return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
            }
            set alarm_duration(value: number) {
                pb_1.Message.setField(this, 5, value);
            }
            get click_count() {
                return pb_1.Message.getFieldWithDefault(this, 6, 0) as number;
            }
            set click_count(value: number) {
                pb_1.Message.setField(this, 6, value);
            }
            get click_duration() {
                return pb_1.Message.getFieldWithDefault(this, 7, 0) as number;
            }
            set click_duration(value: number) {
                pb_1.Message.setField(this, 7, value);
            }
            get scroll_count() {
                return pb_1.Message.getFieldWithDefault(this, 8, 0) as number;
            }
            set scroll_count(value: number) {
                pb_1.Message.setField(this, 8, value);
            }
            get scroll_duration() {
                return pb_1.Message.getFieldWithDefault(this, 9, 0) as number;
            }
            set scroll_duration(value: number) {
                pb_1.Message.setField(this, 9, value);
            }
            get send_count() {
                return pb_1.Message.getFieldWithDefault(this, 10, 0) as number;
            }
            set send_count(value: number) {
                pb_1.Message.setField(this, 10, value);
            }
            get send_duration() {
                return pb_1.Message.getFieldWithDefault(this, 11, 0) as number;
            }
            set send_duration(value: number) {
                pb_1.Message.setField(this, 11, value);
            }
            get total_duration() {
                return pb_1.Message.getFieldWithDefault(this, 12, 0) as number;
            }
            set total_duration(value: number) {
                pb_1.Message.setField(this, 12, value);
            }
            get worker_status() {
                return pb_1.Message.getFieldWithDefault(this, 13, dependency_5.api.common.WorkerState.WORKER_OFFLINE) as dependency_5.api.common.WorkerState;
            }
            set worker_status(value: dependency_5.api.common.WorkerState) {
                pb_1.Message.setField(this, 13, value);
            }
            get worker_acc() {
                return pb_1.Message.getFieldWithDefault(this, 14, "") as string;
            }
            set worker_acc(value: string) {
                pb_1.Message.setField(this, 14, value);
            }
            get avg_resp_time() {
                return pb_1.Message.getFieldWithDefault(this, 15, "") as string;
            }
            set avg_resp_time(value: string) {
                pb_1.Message.setField(this, 15, value);
            }
            static fromObject(data: {
                date?: string;
                worker_id?: number;
                last_alarm_trigger_time?: string;
                alarm_trigger_count?: number;
                alarm_duration?: number;
                click_count?: number;
                click_duration?: number;
                scroll_count?: number;
                scroll_duration?: number;
                send_count?: number;
                send_duration?: number;
                total_duration?: number;
                worker_status?: dependency_5.api.common.WorkerState;
                worker_acc?: string;
                avg_resp_time?: string;
            }): EventTrackingDailyStatsItem {
                const message = new EventTrackingDailyStatsItem({});
                if (data.date != null) {
                    message.date = data.date;
                }
                if (data.worker_id != null) {
                    message.worker_id = data.worker_id;
                }
                if (data.last_alarm_trigger_time != null) {
                    message.last_alarm_trigger_time = data.last_alarm_trigger_time;
                }
                if (data.alarm_trigger_count != null) {
                    message.alarm_trigger_count = data.alarm_trigger_count;
                }
                if (data.alarm_duration != null) {
                    message.alarm_duration = data.alarm_duration;
                }
                if (data.click_count != null) {
                    message.click_count = data.click_count;
                }
                if (data.click_duration != null) {
                    message.click_duration = data.click_duration;
                }
                if (data.scroll_count != null) {
                    message.scroll_count = data.scroll_count;
                }
                if (data.scroll_duration != null) {
                    message.scroll_duration = data.scroll_duration;
                }
                if (data.send_count != null) {
                    message.send_count = data.send_count;
                }
                if (data.send_duration != null) {
                    message.send_duration = data.send_duration;
                }
                if (data.total_duration != null) {
                    message.total_duration = data.total_duration;
                }
                if (data.worker_status != null) {
                    message.worker_status = data.worker_status;
                }
                if (data.worker_acc != null) {
                    message.worker_acc = data.worker_acc;
                }
                if (data.avg_resp_time != null) {
                    message.avg_resp_time = data.avg_resp_time;
                }
                return message;
            }
            toObject() {
                const data: {
                    date?: string;
                    worker_id?: number;
                    last_alarm_trigger_time?: string;
                    alarm_trigger_count?: number;
                    alarm_duration?: number;
                    click_count?: number;
                    click_duration?: number;
                    scroll_count?: number;
                    scroll_duration?: number;
                    send_count?: number;
                    send_duration?: number;
                    total_duration?: number;
                    worker_status?: dependency_5.api.common.WorkerState;
                    worker_acc?: string;
                    avg_resp_time?: string;
                } = {};
                if (this.date != null) {
                    data.date = this.date;
                }
                if (this.worker_id != null) {
                    data.worker_id = this.worker_id;
                }
                if (this.last_alarm_trigger_time != null) {
                    data.last_alarm_trigger_time = this.last_alarm_trigger_time;
                }
                if (this.alarm_trigger_count != null) {
                    data.alarm_trigger_count = this.alarm_trigger_count;
                }
                if (this.alarm_duration != null) {
                    data.alarm_duration = this.alarm_duration;
                }
                if (this.click_count != null) {
                    data.click_count = this.click_count;
                }
                if (this.click_duration != null) {
                    data.click_duration = this.click_duration;
                }
                if (this.scroll_count != null) {
                    data.scroll_count = this.scroll_count;
                }
                if (this.scroll_duration != null) {
                    data.scroll_duration = this.scroll_duration;
                }
                if (this.send_count != null) {
                    data.send_count = this.send_count;
                }
                if (this.send_duration != null) {
                    data.send_duration = this.send_duration;
                }
                if (this.total_duration != null) {
                    data.total_duration = this.total_duration;
                }
                if (this.worker_status != null) {
                    data.worker_status = this.worker_status;
                }
                if (this.worker_acc != null) {
                    data.worker_acc = this.worker_acc;
                }
                if (this.avg_resp_time != null) {
                    data.avg_resp_time = this.avg_resp_time;
                }
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (this.date.length)
                    writer.writeString(1, this.date);
                if (this.worker_id != 0)
                    writer.writeUint32(2, this.worker_id);
                if (this.last_alarm_trigger_time.length)
                    writer.writeString(3, this.last_alarm_trigger_time);
                if (this.alarm_trigger_count != 0)
                    writer.writeUint32(4, this.alarm_trigger_count);
                if (this.alarm_duration != 0)
                    writer.writeUint64(5, this.alarm_duration);
                if (this.click_count != 0)
                    writer.writeUint32(6, this.click_count);
                if (this.click_duration != 0)
                    writer.writeUint64(7, this.click_duration);
                if (this.scroll_count != 0)
                    writer.writeUint32(8, this.scroll_count);
                if (this.scroll_duration != 0)
                    writer.writeUint64(9, this.scroll_duration);
                if (this.send_count != 0)
                    writer.writeUint32(10, this.send_count);
                if (this.send_duration != 0)
                    writer.writeUint64(11, this.send_duration);
                if (this.total_duration != 0)
                    writer.writeUint64(12, this.total_duration);
                if (this.worker_status != dependency_5.api.common.WorkerState.WORKER_OFFLINE)
                    writer.writeEnum(13, this.worker_status);
                if (this.worker_acc.length)
                    writer.writeString(14, this.worker_acc);
                if (this.avg_resp_time.length)
                    writer.writeString(15, this.avg_resp_time);
                if (!w)
                    return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): EventTrackingDailyStatsItem {
                const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new EventTrackingDailyStatsItem();
                while (reader.nextField()) {
                    if (reader.isEndGroup())
                        break;
                    switch (reader.getFieldNumber()) {
                        case 1:
                            message.date = reader.readString();
                            break;
                        case 2:
                            message.worker_id = reader.readUint32();
                            break;
                        case 3:
                            message.last_alarm_trigger_time = reader.readString();
                            break;
                        case 4:
                            message.alarm_trigger_count = reader.readUint32();
                            break;
                        case 5:
                            message.alarm_duration = reader.readUint64();
                            break;
                        case 6:
                            message.click_count = reader.readUint32();
                            break;
                        case 7:
                            message.click_duration = reader.readUint64();
                            break;
                        case 8:
                            message.scroll_count = reader.readUint32();
                            break;
                        case 9:
                            message.scroll_duration = reader.readUint64();
                            break;
                        case 10:
                            message.send_count = reader.readUint32();
                            break;
                        case 11:
                            message.send_duration = reader.readUint64();
                            break;
                        case 12:
                            message.total_duration = reader.readUint64();
                            break;
                        case 13:
                            message.worker_status = reader.readEnum();
                            break;
                        case 14:
                            message.worker_acc = reader.readString();
                            break;
                        case 15:
                            message.avg_resp_time = reader.readString();
                            break;
                        default: reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static deserializeBinary(bytes: Uint8Array): EventTrackingDailyStatsItem {
                return EventTrackingDailyStatsItem.deserialize(bytes);
            }
        }
    }
    interface GrpcUnaryServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
    }
    interface GrpcStreamServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
        (message: P, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
    }
    interface GrpWritableServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
    }
    interface GrpcChunkServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
        (options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
    }
    interface GrpcPromiseServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): Promise<R>;
        (message: P, options?: grpc_1.CallOptions): Promise<R>;
    }
    export abstract class UnimplementedEventTrackingServiceService {
        static definition = {
            TrackEvent: {
                path: "/api.core.EventTrackingService/TrackEvent",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: EventTrackingRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => EventTrackingRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: dependency_1.google.protobuf.Empty) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => dependency_1.google.protobuf.Empty.deserialize(new Uint8Array(bytes))
            },
            EventTrackingDetail: {
                path: "/api.core.EventTrackingService/EventTrackingDetail",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: EventTrackingDetailRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => EventTrackingDetailRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: EventTrackingDetailResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => EventTrackingDetailResponse.deserialize(new Uint8Array(bytes))
            },
            EventTrackingList: {
                path: "/api.core.EventTrackingService/EventTrackingList",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: EventTrackingListRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => EventTrackingListRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: EventTrackingListResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => EventTrackingListResponse.deserialize(new Uint8Array(bytes))
            },
            EventTrackingDailyStats: {
                path: "/api.core.EventTrackingService/EventTrackingDailyStats",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: EventTrackingDailyStatsRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => EventTrackingDailyStatsRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: EventTrackingDailyStatsResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => EventTrackingDailyStatsResponse.deserialize(new Uint8Array(bytes))
            },
            EventTrackingDailyStatsExport: {
                path: "/api.core.EventTrackingService/EventTrackingDailyStatsExport",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: EventTrackingDailyStatsRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => EventTrackingDailyStatsRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: EventTrackingDailyStatsResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => EventTrackingDailyStatsResponse.deserialize(new Uint8Array(bytes))
            }
        };
        [method: string]: grpc_1.UntypedHandleCall;
        abstract TrackEvent(call: grpc_1.ServerUnaryCall<EventTrackingRequest, dependency_1.google.protobuf.Empty>, callback: grpc_1.sendUnaryData<dependency_1.google.protobuf.Empty>): void;
        abstract EventTrackingDetail(call: grpc_1.ServerUnaryCall<EventTrackingDetailRequest, EventTrackingDetailResponse>, callback: grpc_1.sendUnaryData<EventTrackingDetailResponse>): void;
        abstract EventTrackingList(call: grpc_1.ServerUnaryCall<EventTrackingListRequest, EventTrackingListResponse>, callback: grpc_1.sendUnaryData<EventTrackingListResponse>): void;
        abstract EventTrackingDailyStats(call: grpc_1.ServerUnaryCall<EventTrackingDailyStatsRequest, EventTrackingDailyStatsResponse>, callback: grpc_1.sendUnaryData<EventTrackingDailyStatsResponse>): void;
        abstract EventTrackingDailyStatsExport(call: grpc_1.ServerUnaryCall<EventTrackingDailyStatsRequest, EventTrackingDailyStatsResponse>, callback: grpc_1.sendUnaryData<EventTrackingDailyStatsResponse>): void;
    }
    export class EventTrackingServiceClient extends grpc_1.makeGenericClientConstructor(UnimplementedEventTrackingServiceService.definition, "EventTrackingService", {}) {
        constructor(address: string, credentials: grpc_1.ChannelCredentials, options?: Partial<grpc_1.ChannelOptions>) {
            super(address, credentials, options);
        }
        TrackEvent: GrpcUnaryServiceInterface<EventTrackingRequest, dependency_1.google.protobuf.Empty> = (message: EventTrackingRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<dependency_1.google.protobuf.Empty>, options?: grpc_1.CallOptions | grpc_1.requestCallback<dependency_1.google.protobuf.Empty>, callback?: grpc_1.requestCallback<dependency_1.google.protobuf.Empty>): grpc_1.ClientUnaryCall => {
            return super.TrackEvent(message, metadata, options, callback);
        };
        EventTrackingDetail: GrpcUnaryServiceInterface<EventTrackingDetailRequest, EventTrackingDetailResponse> = (message: EventTrackingDetailRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<EventTrackingDetailResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<EventTrackingDetailResponse>, callback?: grpc_1.requestCallback<EventTrackingDetailResponse>): grpc_1.ClientUnaryCall => {
            return super.EventTrackingDetail(message, metadata, options, callback);
        };
        EventTrackingList: GrpcUnaryServiceInterface<EventTrackingListRequest, EventTrackingListResponse> = (message: EventTrackingListRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<EventTrackingListResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<EventTrackingListResponse>, callback?: grpc_1.requestCallback<EventTrackingListResponse>): grpc_1.ClientUnaryCall => {
            return super.EventTrackingList(message, metadata, options, callback);
        };
        EventTrackingDailyStats: GrpcUnaryServiceInterface<EventTrackingDailyStatsRequest, EventTrackingDailyStatsResponse> = (message: EventTrackingDailyStatsRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<EventTrackingDailyStatsResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<EventTrackingDailyStatsResponse>, callback?: grpc_1.requestCallback<EventTrackingDailyStatsResponse>): grpc_1.ClientUnaryCall => {
            return super.EventTrackingDailyStats(message, metadata, options, callback);
        };
        EventTrackingDailyStatsExport: GrpcUnaryServiceInterface<EventTrackingDailyStatsRequest, EventTrackingDailyStatsResponse> = (message: EventTrackingDailyStatsRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<EventTrackingDailyStatsResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<EventTrackingDailyStatsResponse>, callback?: grpc_1.requestCallback<EventTrackingDailyStatsResponse>): grpc_1.ClientUnaryCall => {
            return super.EventTrackingDailyStatsExport(message, metadata, options, callback);
        };
    }
}
