/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 5.26.1
 * source: api/core/cache.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./../option";
import * as dependency_2 from "./../../google/protobuf/empty";
import * as dependency_3 from "./../../validate/validate";
import * as pb_1 from "google-protobuf";
import * as grpc_1 from "@grpc/grpc-js";
export namespace api.core {
    export class GetReqV1 extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            key?: number;
            exec_num?: number;
            c_num?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("key" in data && data.key != undefined) {
                    this.key = data.key;
                }
                if ("exec_num" in data && data.exec_num != undefined) {
                    this.exec_num = data.exec_num;
                }
                if ("c_num" in data && data.c_num != undefined) {
                    this.c_num = data.c_num;
                }
            }
        }
        get key() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set key(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get exec_num() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set exec_num(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get c_num() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set c_num(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            key?: number;
            exec_num?: number;
            c_num?: number;
        }): GetReqV1 {
            const message = new GetReqV1({});
            if (data.key != null) {
                message.key = data.key;
            }
            if (data.exec_num != null) {
                message.exec_num = data.exec_num;
            }
            if (data.c_num != null) {
                message.c_num = data.c_num;
            }
            return message;
        }
        toObject() {
            const data: {
                key?: number;
                exec_num?: number;
                c_num?: number;
            } = {};
            if (this.key != null) {
                data.key = this.key;
            }
            if (this.exec_num != null) {
                data.exec_num = this.exec_num;
            }
            if (this.c_num != null) {
                data.c_num = this.c_num;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.key != 0)
                writer.writeUint64(1, this.key);
            if (this.exec_num != 0)
                writer.writeUint64(2, this.exec_num);
            if (this.c_num != 0)
                writer.writeUint64(3, this.c_num);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetReqV1 {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetReqV1();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.key = reader.readUint64();
                        break;
                    case 2:
                        message.exec_num = reader.readUint64();
                        break;
                    case 3:
                        message.c_num = reader.readUint64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetReqV1 {
            return GetReqV1.deserialize(bytes);
        }
    }
    export class GetRespV1 extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            key?: number;
            exec_num?: number;
            value?: number;
            value_time?: number;
            exec_mil_time?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("key" in data && data.key != undefined) {
                    this.key = data.key;
                }
                if ("exec_num" in data && data.exec_num != undefined) {
                    this.exec_num = data.exec_num;
                }
                if ("value" in data && data.value != undefined) {
                    this.value = data.value;
                }
                if ("value_time" in data && data.value_time != undefined) {
                    this.value_time = data.value_time;
                }
                if ("exec_mil_time" in data && data.exec_mil_time != undefined) {
                    this.exec_mil_time = data.exec_mil_time;
                }
            }
        }
        get key() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set key(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get exec_num() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set exec_num(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get value() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set value(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        get value_time() {
            return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
        }
        set value_time(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        get exec_mil_time() {
            return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
        }
        set exec_mil_time(value: number) {
            pb_1.Message.setField(this, 5, value);
        }
        static fromObject(data: {
            key?: number;
            exec_num?: number;
            value?: number;
            value_time?: number;
            exec_mil_time?: number;
        }): GetRespV1 {
            const message = new GetRespV1({});
            if (data.key != null) {
                message.key = data.key;
            }
            if (data.exec_num != null) {
                message.exec_num = data.exec_num;
            }
            if (data.value != null) {
                message.value = data.value;
            }
            if (data.value_time != null) {
                message.value_time = data.value_time;
            }
            if (data.exec_mil_time != null) {
                message.exec_mil_time = data.exec_mil_time;
            }
            return message;
        }
        toObject() {
            const data: {
                key?: number;
                exec_num?: number;
                value?: number;
                value_time?: number;
                exec_mil_time?: number;
            } = {};
            if (this.key != null) {
                data.key = this.key;
            }
            if (this.exec_num != null) {
                data.exec_num = this.exec_num;
            }
            if (this.value != null) {
                data.value = this.value;
            }
            if (this.value_time != null) {
                data.value_time = this.value_time;
            }
            if (this.exec_mil_time != null) {
                data.exec_mil_time = this.exec_mil_time;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.key != 0)
                writer.writeUint64(1, this.key);
            if (this.exec_num != 0)
                writer.writeUint64(2, this.exec_num);
            if (this.value != 0)
                writer.writeUint64(3, this.value);
            if (this.value_time != 0)
                writer.writeUint64(4, this.value_time);
            if (this.exec_mil_time != 0)
                writer.writeInt64(5, this.exec_mil_time);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetRespV1 {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetRespV1();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.key = reader.readUint64();
                        break;
                    case 2:
                        message.exec_num = reader.readUint64();
                        break;
                    case 3:
                        message.value = reader.readUint64();
                        break;
                    case 4:
                        message.value_time = reader.readUint64();
                        break;
                    case 5:
                        message.exec_mil_time = reader.readInt64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetRespV1 {
            return GetRespV1.deserialize(bytes);
        }
    }
    export class SetReqV1 extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            key?: number;
            value?: number;
            exec_num?: number;
            c_num?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("key" in data && data.key != undefined) {
                    this.key = data.key;
                }
                if ("value" in data && data.value != undefined) {
                    this.value = data.value;
                }
                if ("exec_num" in data && data.exec_num != undefined) {
                    this.exec_num = data.exec_num;
                }
                if ("c_num" in data && data.c_num != undefined) {
                    this.c_num = data.c_num;
                }
            }
        }
        get key() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set key(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get value() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set value(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get exec_num() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set exec_num(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        get c_num() {
            return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
        }
        set c_num(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            key?: number;
            value?: number;
            exec_num?: number;
            c_num?: number;
        }): SetReqV1 {
            const message = new SetReqV1({});
            if (data.key != null) {
                message.key = data.key;
            }
            if (data.value != null) {
                message.value = data.value;
            }
            if (data.exec_num != null) {
                message.exec_num = data.exec_num;
            }
            if (data.c_num != null) {
                message.c_num = data.c_num;
            }
            return message;
        }
        toObject() {
            const data: {
                key?: number;
                value?: number;
                exec_num?: number;
                c_num?: number;
            } = {};
            if (this.key != null) {
                data.key = this.key;
            }
            if (this.value != null) {
                data.value = this.value;
            }
            if (this.exec_num != null) {
                data.exec_num = this.exec_num;
            }
            if (this.c_num != null) {
                data.c_num = this.c_num;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.key != 0)
                writer.writeUint64(1, this.key);
            if (this.value != 0)
                writer.writeUint64(2, this.value);
            if (this.exec_num != 0)
                writer.writeUint64(3, this.exec_num);
            if (this.c_num != 0)
                writer.writeUint64(4, this.c_num);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SetReqV1 {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SetReqV1();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.key = reader.readUint64();
                        break;
                    case 2:
                        message.value = reader.readUint64();
                        break;
                    case 3:
                        message.exec_num = reader.readUint64();
                        break;
                    case 4:
                        message.c_num = reader.readUint64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): SetReqV1 {
            return SetReqV1.deserialize(bytes);
        }
    }
    export class SetRespV1 extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            key?: number;
            exec_num?: number;
            value?: number;
            value_time?: number;
            exec_mil_time?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("key" in data && data.key != undefined) {
                    this.key = data.key;
                }
                if ("exec_num" in data && data.exec_num != undefined) {
                    this.exec_num = data.exec_num;
                }
                if ("value" in data && data.value != undefined) {
                    this.value = data.value;
                }
                if ("value_time" in data && data.value_time != undefined) {
                    this.value_time = data.value_time;
                }
                if ("exec_mil_time" in data && data.exec_mil_time != undefined) {
                    this.exec_mil_time = data.exec_mil_time;
                }
            }
        }
        get key() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set key(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get exec_num() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set exec_num(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get value() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set value(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        get value_time() {
            return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
        }
        set value_time(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        get exec_mil_time() {
            return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
        }
        set exec_mil_time(value: number) {
            pb_1.Message.setField(this, 5, value);
        }
        static fromObject(data: {
            key?: number;
            exec_num?: number;
            value?: number;
            value_time?: number;
            exec_mil_time?: number;
        }): SetRespV1 {
            const message = new SetRespV1({});
            if (data.key != null) {
                message.key = data.key;
            }
            if (data.exec_num != null) {
                message.exec_num = data.exec_num;
            }
            if (data.value != null) {
                message.value = data.value;
            }
            if (data.value_time != null) {
                message.value_time = data.value_time;
            }
            if (data.exec_mil_time != null) {
                message.exec_mil_time = data.exec_mil_time;
            }
            return message;
        }
        toObject() {
            const data: {
                key?: number;
                exec_num?: number;
                value?: number;
                value_time?: number;
                exec_mil_time?: number;
            } = {};
            if (this.key != null) {
                data.key = this.key;
            }
            if (this.exec_num != null) {
                data.exec_num = this.exec_num;
            }
            if (this.value != null) {
                data.value = this.value;
            }
            if (this.value_time != null) {
                data.value_time = this.value_time;
            }
            if (this.exec_mil_time != null) {
                data.exec_mil_time = this.exec_mil_time;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.key != 0)
                writer.writeUint64(1, this.key);
            if (this.exec_num != 0)
                writer.writeUint64(2, this.exec_num);
            if (this.value != 0)
                writer.writeUint64(3, this.value);
            if (this.value_time != 0)
                writer.writeUint64(4, this.value_time);
            if (this.exec_mil_time != 0)
                writer.writeInt64(5, this.exec_mil_time);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SetRespV1 {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SetRespV1();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.key = reader.readUint64();
                        break;
                    case 2:
                        message.exec_num = reader.readUint64();
                        break;
                    case 3:
                        message.value = reader.readUint64();
                        break;
                    case 4:
                        message.value_time = reader.readUint64();
                        break;
                    case 5:
                        message.exec_mil_time = reader.readInt64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): SetRespV1 {
            return SetRespV1.deserialize(bytes);
        }
    }
    interface GrpcUnaryServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
    }
    interface GrpcStreamServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
        (message: P, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
    }
    interface GrpWritableServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
    }
    interface GrpcChunkServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
        (options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
    }
    interface GrpcPromiseServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): Promise<R>;
        (message: P, options?: grpc_1.CallOptions): Promise<R>;
    }
    export abstract class UnimplementedCacheServiceService {
        static definition = {
            CacheGet: {
                path: "/api.core.CacheService/CacheGet",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: GetReqV1) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => GetReqV1.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: GetRespV1) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => GetRespV1.deserialize(new Uint8Array(bytes))
            },
            CacheSet: {
                path: "/api.core.CacheService/CacheSet",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: SetReqV1) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => SetReqV1.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: SetRespV1) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => SetRespV1.deserialize(new Uint8Array(bytes))
            }
        };
        [method: string]: grpc_1.UntypedHandleCall;
        abstract CacheGet(call: grpc_1.ServerUnaryCall<GetReqV1, GetRespV1>, callback: grpc_1.sendUnaryData<GetRespV1>): void;
        abstract CacheSet(call: grpc_1.ServerUnaryCall<SetReqV1, SetRespV1>, callback: grpc_1.sendUnaryData<SetRespV1>): void;
    }
    export class CacheServiceClient extends grpc_1.makeGenericClientConstructor(UnimplementedCacheServiceService.definition, "CacheService", {}) {
        constructor(address: string, credentials: grpc_1.ChannelCredentials, options?: Partial<grpc_1.ChannelOptions>) {
            super(address, credentials, options);
        }
        CacheGet: GrpcUnaryServiceInterface<GetReqV1, GetRespV1> = (message: GetReqV1, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<GetRespV1>, options?: grpc_1.CallOptions | grpc_1.requestCallback<GetRespV1>, callback?: grpc_1.requestCallback<GetRespV1>): grpc_1.ClientUnaryCall => {
            return super.CacheGet(message, metadata, options, callback);
        };
        CacheSet: GrpcUnaryServiceInterface<SetReqV1, SetRespV1> = (message: SetReqV1, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<SetRespV1>, options?: grpc_1.CallOptions | grpc_1.requestCallback<SetRespV1>, callback?: grpc_1.requestCallback<SetRespV1>): grpc_1.ClientUnaryCall => {
            return super.CacheSet(message, metadata, options, callback);
        };
    }
}
