/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 5.26.1
 * source: api/core/gcache.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./../option";
import * as dependency_2 from "./../../google/protobuf/empty";
import * as dependency_3 from "./../../validate/validate";
import * as dependency_4 from "./../sentry/sentry";
import * as pb_1 from "google-protobuf";
import * as grpc_1 from "@grpc/grpc-js";
export namespace api.core {
    export class GetReq extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            key?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("key" in data && data.key != undefined) {
                    this.key = data.key;
                }
            }
        }
        get key() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set key(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            key?: number;
        }): GetReq {
            const message = new GetReq({});
            if (data.key != null) {
                message.key = data.key;
            }
            return message;
        }
        toObject() {
            const data: {
                key?: number;
            } = {};
            if (this.key != null) {
                data.key = this.key;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.key != 0)
                writer.writeUint64(1, this.key);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetReq {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetReq();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.key = reader.readUint64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetReq {
            return GetReq.deserialize(bytes);
        }
    }
    export class GetResp extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            key?: number;
            value?: number;
            lastTime?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("key" in data && data.key != undefined) {
                    this.key = data.key;
                }
                if ("value" in data && data.value != undefined) {
                    this.value = data.value;
                }
                if ("lastTime" in data && data.lastTime != undefined) {
                    this.lastTime = data.lastTime;
                }
            }
        }
        get key() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set key(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get value() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set value(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get lastTime() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set lastTime(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            key?: number;
            value?: number;
            lastTime?: number;
        }): GetResp {
            const message = new GetResp({});
            if (data.key != null) {
                message.key = data.key;
            }
            if (data.value != null) {
                message.value = data.value;
            }
            if (data.lastTime != null) {
                message.lastTime = data.lastTime;
            }
            return message;
        }
        toObject() {
            const data: {
                key?: number;
                value?: number;
                lastTime?: number;
            } = {};
            if (this.key != null) {
                data.key = this.key;
            }
            if (this.value != null) {
                data.value = this.value;
            }
            if (this.lastTime != null) {
                data.lastTime = this.lastTime;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.key != 0)
                writer.writeUint64(1, this.key);
            if (this.value != 0)
                writer.writeUint64(2, this.value);
            if (this.lastTime != 0)
                writer.writeInt64(3, this.lastTime);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetResp {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetResp();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.key = reader.readUint64();
                        break;
                    case 2:
                        message.value = reader.readUint64();
                        break;
                    case 3:
                        message.lastTime = reader.readInt64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetResp {
            return GetResp.deserialize(bytes);
        }
    }
    export class BatchGetReq extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            base?: number;
            num?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("base" in data && data.base != undefined) {
                    this.base = data.base;
                }
                if ("num" in data && data.num != undefined) {
                    this.num = data.num;
                }
            }
        }
        get base() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set base(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get num() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set num(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            base?: number;
            num?: number;
        }): BatchGetReq {
            const message = new BatchGetReq({});
            if (data.base != null) {
                message.base = data.base;
            }
            if (data.num != null) {
                message.num = data.num;
            }
            return message;
        }
        toObject() {
            const data: {
                base?: number;
                num?: number;
            } = {};
            if (this.base != null) {
                data.base = this.base;
            }
            if (this.num != null) {
                data.num = this.num;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.base != 0)
                writer.writeUint64(1, this.base);
            if (this.num != 0)
                writer.writeUint64(2, this.num);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): BatchGetReq {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new BatchGetReq();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.base = reader.readUint64();
                        break;
                    case 2:
                        message.num = reader.readUint64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): BatchGetReq {
            return BatchGetReq.deserialize(bytes);
        }
    }
    export class SetReq extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            key?: number;
            value?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("key" in data && data.key != undefined) {
                    this.key = data.key;
                }
                if ("value" in data && data.value != undefined) {
                    this.value = data.value;
                }
            }
        }
        get key() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set key(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get value() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set value(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            key?: number;
            value?: number;
        }): SetReq {
            const message = new SetReq({});
            if (data.key != null) {
                message.key = data.key;
            }
            if (data.value != null) {
                message.value = data.value;
            }
            return message;
        }
        toObject() {
            const data: {
                key?: number;
                value?: number;
            } = {};
            if (this.key != null) {
                data.key = this.key;
            }
            if (this.value != null) {
                data.value = this.value;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.key != 0)
                writer.writeUint64(1, this.key);
            if (this.value != 0)
                writer.writeUint64(2, this.value);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SetReq {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SetReq();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.key = reader.readUint64();
                        break;
                    case 2:
                        message.value = reader.readUint64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): SetReq {
            return SetReq.deserialize(bytes);
        }
    }
    export class SetResp extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            setKey?: number;
            setValue?: number;
            setTime?: number;
            setError?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("setKey" in data && data.setKey != undefined) {
                    this.setKey = data.setKey;
                }
                if ("setValue" in data && data.setValue != undefined) {
                    this.setValue = data.setValue;
                }
                if ("setTime" in data && data.setTime != undefined) {
                    this.setTime = data.setTime;
                }
                if ("setError" in data && data.setError != undefined) {
                    this.setError = data.setError;
                }
            }
        }
        get setKey() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set setKey(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get setValue() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set setValue(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get setTime() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set setTime(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        get setError() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set setError(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            setKey?: number;
            setValue?: number;
            setTime?: number;
            setError?: string;
        }): SetResp {
            const message = new SetResp({});
            if (data.setKey != null) {
                message.setKey = data.setKey;
            }
            if (data.setValue != null) {
                message.setValue = data.setValue;
            }
            if (data.setTime != null) {
                message.setTime = data.setTime;
            }
            if (data.setError != null) {
                message.setError = data.setError;
            }
            return message;
        }
        toObject() {
            const data: {
                setKey?: number;
                setValue?: number;
                setTime?: number;
                setError?: string;
            } = {};
            if (this.setKey != null) {
                data.setKey = this.setKey;
            }
            if (this.setValue != null) {
                data.setValue = this.setValue;
            }
            if (this.setTime != null) {
                data.setTime = this.setTime;
            }
            if (this.setError != null) {
                data.setError = this.setError;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.setKey != 0)
                writer.writeUint64(1, this.setKey);
            if (this.setValue != 0)
                writer.writeUint64(2, this.setValue);
            if (this.setTime != 0)
                writer.writeInt64(3, this.setTime);
            if (this.setError.length)
                writer.writeString(4, this.setError);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SetResp {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SetResp();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.setKey = reader.readUint64();
                        break;
                    case 2:
                        message.setValue = reader.readUint64();
                        break;
                    case 3:
                        message.setTime = reader.readInt64();
                        break;
                    case 4:
                        message.setError = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): SetResp {
            return SetResp.deserialize(bytes);
        }
    }
    export class BatchSetReq extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            base?: number;
            num?: number;
            interval?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("base" in data && data.base != undefined) {
                    this.base = data.base;
                }
                if ("num" in data && data.num != undefined) {
                    this.num = data.num;
                }
                if ("interval" in data && data.interval != undefined) {
                    this.interval = data.interval;
                }
            }
        }
        get base() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set base(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get num() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set num(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get interval() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set interval(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            base?: number;
            num?: number;
            interval?: number;
        }): BatchSetReq {
            const message = new BatchSetReq({});
            if (data.base != null) {
                message.base = data.base;
            }
            if (data.num != null) {
                message.num = data.num;
            }
            if (data.interval != null) {
                message.interval = data.interval;
            }
            return message;
        }
        toObject() {
            const data: {
                base?: number;
                num?: number;
                interval?: number;
            } = {};
            if (this.base != null) {
                data.base = this.base;
            }
            if (this.num != null) {
                data.num = this.num;
            }
            if (this.interval != null) {
                data.interval = this.interval;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.base != 0)
                writer.writeUint64(1, this.base);
            if (this.num != 0)
                writer.writeUint64(2, this.num);
            if (this.interval != 0)
                writer.writeUint64(3, this.interval);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): BatchSetReq {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new BatchSetReq();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.base = reader.readUint64();
                        break;
                    case 2:
                        message.num = reader.readUint64();
                        break;
                    case 3:
                        message.interval = reader.readUint64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): BatchSetReq {
            return BatchSetReq.deserialize(bytes);
        }
    }
    export class SetGetResp extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            data?: SetGet[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("data" in data && data.data != undefined) {
                    this.data = data.data;
                }
            }
        }
        get data() {
            return pb_1.Message.getRepeatedWrapperField(this, SetGet, 1) as SetGet[];
        }
        set data(value: SetGet[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        static fromObject(data: {
            data?: ReturnType<typeof SetGet.prototype.toObject>[];
        }): SetGetResp {
            const message = new SetGetResp({});
            if (data.data != null) {
                message.data = data.data.map(item => SetGet.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                data?: ReturnType<typeof SetGet.prototype.toObject>[];
            } = {};
            if (this.data != null) {
                data.data = this.data.map((item: SetGet) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.data.length)
                writer.writeRepeatedMessage(1, this.data, (item: SetGet) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SetGetResp {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SetGetResp();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.data, () => pb_1.Message.addToRepeatedWrapperField(message, 1, SetGet.deserialize(reader), SetGet));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): SetGetResp {
            return SetGetResp.deserialize(bytes);
        }
    }
    export class SetGet extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            setKey?: number;
            setValue?: number;
            setTime?: number;
            setError?: string;
            getValue?: number;
            getTime?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("setKey" in data && data.setKey != undefined) {
                    this.setKey = data.setKey;
                }
                if ("setValue" in data && data.setValue != undefined) {
                    this.setValue = data.setValue;
                }
                if ("setTime" in data && data.setTime != undefined) {
                    this.setTime = data.setTime;
                }
                if ("setError" in data && data.setError != undefined) {
                    this.setError = data.setError;
                }
                if ("getValue" in data && data.getValue != undefined) {
                    this.getValue = data.getValue;
                }
                if ("getTime" in data && data.getTime != undefined) {
                    this.getTime = data.getTime;
                }
            }
        }
        get setKey() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set setKey(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get setValue() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set setValue(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get setTime() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set setTime(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        get setError() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set setError(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get getValue() {
            return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
        }
        set getValue(value: number) {
            pb_1.Message.setField(this, 5, value);
        }
        get getTime() {
            return pb_1.Message.getFieldWithDefault(this, 6, 0) as number;
        }
        set getTime(value: number) {
            pb_1.Message.setField(this, 6, value);
        }
        static fromObject(data: {
            setKey?: number;
            setValue?: number;
            setTime?: number;
            setError?: string;
            getValue?: number;
            getTime?: number;
        }): SetGet {
            const message = new SetGet({});
            if (data.setKey != null) {
                message.setKey = data.setKey;
            }
            if (data.setValue != null) {
                message.setValue = data.setValue;
            }
            if (data.setTime != null) {
                message.setTime = data.setTime;
            }
            if (data.setError != null) {
                message.setError = data.setError;
            }
            if (data.getValue != null) {
                message.getValue = data.getValue;
            }
            if (data.getTime != null) {
                message.getTime = data.getTime;
            }
            return message;
        }
        toObject() {
            const data: {
                setKey?: number;
                setValue?: number;
                setTime?: number;
                setError?: string;
                getValue?: number;
                getTime?: number;
            } = {};
            if (this.setKey != null) {
                data.setKey = this.setKey;
            }
            if (this.setValue != null) {
                data.setValue = this.setValue;
            }
            if (this.setTime != null) {
                data.setTime = this.setTime;
            }
            if (this.setError != null) {
                data.setError = this.setError;
            }
            if (this.getValue != null) {
                data.getValue = this.getValue;
            }
            if (this.getTime != null) {
                data.getTime = this.getTime;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.setKey != 0)
                writer.writeUint64(1, this.setKey);
            if (this.setValue != 0)
                writer.writeUint64(2, this.setValue);
            if (this.setTime != 0)
                writer.writeInt64(3, this.setTime);
            if (this.setError.length)
                writer.writeString(4, this.setError);
            if (this.getValue != 0)
                writer.writeUint64(5, this.getValue);
            if (this.getTime != 0)
                writer.writeInt64(6, this.getTime);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SetGet {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SetGet();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.setKey = reader.readUint64();
                        break;
                    case 2:
                        message.setValue = reader.readUint64();
                        break;
                    case 3:
                        message.setTime = reader.readInt64();
                        break;
                    case 4:
                        message.setError = reader.readString();
                        break;
                    case 5:
                        message.getValue = reader.readUint64();
                        break;
                    case 6:
                        message.getTime = reader.readInt64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): SetGet {
            return SetGet.deserialize(bytes);
        }
    }
    export class DelReq extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            key?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("key" in data && data.key != undefined) {
                    this.key = data.key;
                }
            }
        }
        get key() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set key(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            key?: number;
        }): DelReq {
            const message = new DelReq({});
            if (data.key != null) {
                message.key = data.key;
            }
            return message;
        }
        toObject() {
            const data: {
                key?: number;
            } = {};
            if (this.key != null) {
                data.key = this.key;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.key != 0)
                writer.writeUint64(1, this.key);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DelReq {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DelReq();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.key = reader.readUint64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): DelReq {
            return DelReq.deserialize(bytes);
        }
    }
    export class JwtDecodeReq extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            token?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("token" in data && data.token != undefined) {
                    this.token = data.token;
                }
            }
        }
        get token() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set token(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            token?: string;
        }): JwtDecodeReq {
            const message = new JwtDecodeReq({});
            if (data.token != null) {
                message.token = data.token;
            }
            return message;
        }
        toObject() {
            const data: {
                token?: string;
            } = {};
            if (this.token != null) {
                data.token = this.token;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.token.length)
                writer.writeString(1, this.token);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): JwtDecodeReq {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new JwtDecodeReq();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.token = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): JwtDecodeReq {
            return JwtDecodeReq.deserialize(bytes);
        }
    }
    export class JwtDecodeResp extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            auth_token?: dependency_4.api.sentry.AuthToken;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("auth_token" in data && data.auth_token != undefined) {
                    this.auth_token = data.auth_token;
                }
            }
        }
        get auth_token() {
            return pb_1.Message.getWrapperField(this, dependency_4.api.sentry.AuthToken, 1) as dependency_4.api.sentry.AuthToken;
        }
        set auth_token(value: dependency_4.api.sentry.AuthToken) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_auth_token() {
            return pb_1.Message.getField(this, 1) != null;
        }
        static fromObject(data: {
            auth_token?: ReturnType<typeof dependency_4.api.sentry.AuthToken.prototype.toObject>;
        }): JwtDecodeResp {
            const message = new JwtDecodeResp({});
            if (data.auth_token != null) {
                message.auth_token = dependency_4.api.sentry.AuthToken.fromObject(data.auth_token);
            }
            return message;
        }
        toObject() {
            const data: {
                auth_token?: ReturnType<typeof dependency_4.api.sentry.AuthToken.prototype.toObject>;
            } = {};
            if (this.auth_token != null) {
                data.auth_token = this.auth_token.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_auth_token)
                writer.writeMessage(1, this.auth_token, () => this.auth_token.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): JwtDecodeResp {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new JwtDecodeResp();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.auth_token, () => message.auth_token = dependency_4.api.sentry.AuthToken.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): JwtDecodeResp {
            return JwtDecodeResp.deserialize(bytes);
        }
    }
    interface GrpcUnaryServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
    }
    interface GrpcStreamServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
        (message: P, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
    }
    interface GrpWritableServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
    }
    interface GrpcChunkServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
        (options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
    }
    interface GrpcPromiseServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): Promise<R>;
        (message: P, options?: grpc_1.CallOptions): Promise<R>;
    }
    export abstract class UnimplementedGcacheServiceService {
        static definition = {
            GcacheGet: {
                path: "/api.core.GcacheService/GcacheGet",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: GetReq) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => GetReq.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: GetResp) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => GetResp.deserialize(new Uint8Array(bytes))
            },
            BatchGcacheGet: {
                path: "/api.core.GcacheService/BatchGcacheGet",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: BatchGetReq) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => BatchGetReq.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: dependency_2.google.protobuf.Empty) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => dependency_2.google.protobuf.Empty.deserialize(new Uint8Array(bytes))
            },
            GcacheSet: {
                path: "/api.core.GcacheService/GcacheSet",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: SetReq) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => SetReq.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: SetResp) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => SetResp.deserialize(new Uint8Array(bytes))
            },
            BatchGcacheSet: {
                path: "/api.core.GcacheService/BatchGcacheSet",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: BatchSetReq) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => BatchSetReq.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: dependency_2.google.protobuf.Empty) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => dependency_2.google.protobuf.Empty.deserialize(new Uint8Array(bytes))
            },
            GcacheSetGet: {
                path: "/api.core.GcacheService/GcacheSetGet",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: BatchSetReq) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => BatchSetReq.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: SetGetResp) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => SetGetResp.deserialize(new Uint8Array(bytes))
            },
            GcacheDel: {
                path: "/api.core.GcacheService/GcacheDel",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: DelReq) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => DelReq.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: dependency_2.google.protobuf.Empty) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => dependency_2.google.protobuf.Empty.deserialize(new Uint8Array(bytes))
            }
        };
        [method: string]: grpc_1.UntypedHandleCall;
        abstract GcacheGet(call: grpc_1.ServerUnaryCall<GetReq, GetResp>, callback: grpc_1.sendUnaryData<GetResp>): void;
        abstract BatchGcacheGet(call: grpc_1.ServerUnaryCall<BatchGetReq, dependency_2.google.protobuf.Empty>, callback: grpc_1.sendUnaryData<dependency_2.google.protobuf.Empty>): void;
        abstract GcacheSet(call: grpc_1.ServerUnaryCall<SetReq, SetResp>, callback: grpc_1.sendUnaryData<SetResp>): void;
        abstract BatchGcacheSet(call: grpc_1.ServerUnaryCall<BatchSetReq, dependency_2.google.protobuf.Empty>, callback: grpc_1.sendUnaryData<dependency_2.google.protobuf.Empty>): void;
        abstract GcacheSetGet(call: grpc_1.ServerUnaryCall<BatchSetReq, SetGetResp>, callback: grpc_1.sendUnaryData<SetGetResp>): void;
        abstract GcacheDel(call: grpc_1.ServerUnaryCall<DelReq, dependency_2.google.protobuf.Empty>, callback: grpc_1.sendUnaryData<dependency_2.google.protobuf.Empty>): void;
    }
    export class GcacheServiceClient extends grpc_1.makeGenericClientConstructor(UnimplementedGcacheServiceService.definition, "GcacheService", {}) {
        constructor(address: string, credentials: grpc_1.ChannelCredentials, options?: Partial<grpc_1.ChannelOptions>) {
            super(address, credentials, options);
        }
        GcacheGet: GrpcUnaryServiceInterface<GetReq, GetResp> = (message: GetReq, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<GetResp>, options?: grpc_1.CallOptions | grpc_1.requestCallback<GetResp>, callback?: grpc_1.requestCallback<GetResp>): grpc_1.ClientUnaryCall => {
            return super.GcacheGet(message, metadata, options, callback);
        };
        BatchGcacheGet: GrpcUnaryServiceInterface<BatchGetReq, dependency_2.google.protobuf.Empty> = (message: BatchGetReq, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<dependency_2.google.protobuf.Empty>, options?: grpc_1.CallOptions | grpc_1.requestCallback<dependency_2.google.protobuf.Empty>, callback?: grpc_1.requestCallback<dependency_2.google.protobuf.Empty>): grpc_1.ClientUnaryCall => {
            return super.BatchGcacheGet(message, metadata, options, callback);
        };
        GcacheSet: GrpcUnaryServiceInterface<SetReq, SetResp> = (message: SetReq, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<SetResp>, options?: grpc_1.CallOptions | grpc_1.requestCallback<SetResp>, callback?: grpc_1.requestCallback<SetResp>): grpc_1.ClientUnaryCall => {
            return super.GcacheSet(message, metadata, options, callback);
        };
        BatchGcacheSet: GrpcUnaryServiceInterface<BatchSetReq, dependency_2.google.protobuf.Empty> = (message: BatchSetReq, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<dependency_2.google.protobuf.Empty>, options?: grpc_1.CallOptions | grpc_1.requestCallback<dependency_2.google.protobuf.Empty>, callback?: grpc_1.requestCallback<dependency_2.google.protobuf.Empty>): grpc_1.ClientUnaryCall => {
            return super.BatchGcacheSet(message, metadata, options, callback);
        };
        GcacheSetGet: GrpcUnaryServiceInterface<BatchSetReq, SetGetResp> = (message: BatchSetReq, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<SetGetResp>, options?: grpc_1.CallOptions | grpc_1.requestCallback<SetGetResp>, callback?: grpc_1.requestCallback<SetGetResp>): grpc_1.ClientUnaryCall => {
            return super.GcacheSetGet(message, metadata, options, callback);
        };
        GcacheDel: GrpcUnaryServiceInterface<DelReq, dependency_2.google.protobuf.Empty> = (message: DelReq, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<dependency_2.google.protobuf.Empty>, options?: grpc_1.CallOptions | grpc_1.requestCallback<dependency_2.google.protobuf.Empty>, callback?: grpc_1.requestCallback<dependency_2.google.protobuf.Empty>): grpc_1.ClientUnaryCall => {
            return super.GcacheDel(message, metadata, options, callback);
        };
    }
    export abstract class UnimplementedHelperServiceService {
        static definition = {
            JwtDecode: {
                path: "/api.core.HelperService/JwtDecode",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: JwtDecodeReq) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => JwtDecodeReq.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: JwtDecodeResp) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => JwtDecodeResp.deserialize(new Uint8Array(bytes))
            }
        };
        [method: string]: grpc_1.UntypedHandleCall;
        abstract JwtDecode(call: grpc_1.ServerUnaryCall<JwtDecodeReq, JwtDecodeResp>, callback: grpc_1.sendUnaryData<JwtDecodeResp>): void;
    }
    export class HelperServiceClient extends grpc_1.makeGenericClientConstructor(UnimplementedHelperServiceService.definition, "HelperService", {}) {
        constructor(address: string, credentials: grpc_1.ChannelCredentials, options?: Partial<grpc_1.ChannelOptions>) {
            super(address, credentials, options);
        }
        JwtDecode: GrpcUnaryServiceInterface<JwtDecodeReq, JwtDecodeResp> = (message: JwtDecodeReq, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<JwtDecodeResp>, options?: grpc_1.CallOptions | grpc_1.requestCallback<JwtDecodeResp>, callback?: grpc_1.requestCallback<JwtDecodeResp>): grpc_1.ClientUnaryCall => {
            return super.JwtDecode(message, metadata, options, callback);
        };
    }
}
