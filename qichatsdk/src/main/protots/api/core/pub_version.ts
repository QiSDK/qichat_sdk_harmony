/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 5.26.1
 * source: api/core/pub_version.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./../option";
import * as dependency_2 from "./../common/c_entrance";
import * as dependency_3 from "./../common/c_base";
import * as dependency_4 from "./../../google/protobuf/timestamp";
import * as pb_1 from "google-protobuf";
import * as grpc_1 from "@grpc/grpc-js";
export namespace api.core {
    export class GetVersionPublishRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            version_type?: dependency_2.api.common.VersionType;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("version_type" in data && data.version_type != undefined) {
                    this.version_type = data.version_type;
                }
            }
        }
        get version_type() {
            return pb_1.Message.getFieldWithDefault(this, 1, dependency_2.api.common.VersionType.Pre) as dependency_2.api.common.VersionType;
        }
        set version_type(value: dependency_2.api.common.VersionType) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            version_type?: dependency_2.api.common.VersionType;
        }): GetVersionPublishRequest {
            const message = new GetVersionPublishRequest({});
            if (data.version_type != null) {
                message.version_type = data.version_type;
            }
            return message;
        }
        toObject() {
            const data: {
                version_type?: dependency_2.api.common.VersionType;
            } = {};
            if (this.version_type != null) {
                data.version_type = this.version_type;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.version_type != dependency_2.api.common.VersionType.Pre)
                writer.writeEnum(1, this.version_type);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetVersionPublishRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetVersionPublishRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.version_type = reader.readEnum();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetVersionPublishRequest {
            return GetVersionPublishRequest.deserialize(bytes);
        }
    }
    export class GetVersionPublishResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            mac_version?: string;
            win_version?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("mac_version" in data && data.mac_version != undefined) {
                    this.mac_version = data.mac_version;
                }
                if ("win_version" in data && data.win_version != undefined) {
                    this.win_version = data.win_version;
                }
            }
        }
        get mac_version() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set mac_version(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get win_version() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set win_version(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            mac_version?: string;
            win_version?: string;
        }): GetVersionPublishResponse {
            const message = new GetVersionPublishResponse({});
            if (data.mac_version != null) {
                message.mac_version = data.mac_version;
            }
            if (data.win_version != null) {
                message.win_version = data.win_version;
            }
            return message;
        }
        toObject() {
            const data: {
                mac_version?: string;
                win_version?: string;
            } = {};
            if (this.mac_version != null) {
                data.mac_version = this.mac_version;
            }
            if (this.win_version != null) {
                data.win_version = this.win_version;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.mac_version.length)
                writer.writeString(1, this.mac_version);
            if (this.win_version.length)
                writer.writeString(2, this.win_version);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetVersionPublishResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetVersionPublishResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.mac_version = reader.readString();
                        break;
                    case 2:
                        message.win_version = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetVersionPublishResponse {
            return GetVersionPublishResponse.deserialize(bytes);
        }
    }
    export class GetVersionPublishLogListRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            version_type?: dependency_2.api.common.VersionType;
            page?: dependency_3.api.common.Page;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("version_type" in data && data.version_type != undefined) {
                    this.version_type = data.version_type;
                }
                if ("page" in data && data.page != undefined) {
                    this.page = data.page;
                }
            }
        }
        get version_type() {
            return pb_1.Message.getFieldWithDefault(this, 1, dependency_2.api.common.VersionType.Pre) as dependency_2.api.common.VersionType;
        }
        set version_type(value: dependency_2.api.common.VersionType) {
            pb_1.Message.setField(this, 1, value);
        }
        get page() {
            return pb_1.Message.getWrapperField(this, dependency_3.api.common.Page, 2) as dependency_3.api.common.Page;
        }
        set page(value: dependency_3.api.common.Page) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_page() {
            return pb_1.Message.getField(this, 2) != null;
        }
        static fromObject(data: {
            version_type?: dependency_2.api.common.VersionType;
            page?: ReturnType<typeof dependency_3.api.common.Page.prototype.toObject>;
        }): GetVersionPublishLogListRequest {
            const message = new GetVersionPublishLogListRequest({});
            if (data.version_type != null) {
                message.version_type = data.version_type;
            }
            if (data.page != null) {
                message.page = dependency_3.api.common.Page.fromObject(data.page);
            }
            return message;
        }
        toObject() {
            const data: {
                version_type?: dependency_2.api.common.VersionType;
                page?: ReturnType<typeof dependency_3.api.common.Page.prototype.toObject>;
            } = {};
            if (this.version_type != null) {
                data.version_type = this.version_type;
            }
            if (this.page != null) {
                data.page = this.page.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.version_type != dependency_2.api.common.VersionType.Pre)
                writer.writeEnum(1, this.version_type);
            if (this.has_page)
                writer.writeMessage(2, this.page, () => this.page.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetVersionPublishLogListRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetVersionPublishLogListRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.version_type = reader.readEnum();
                        break;
                    case 2:
                        reader.readMessage(message.page, () => message.page = dependency_3.api.common.Page.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetVersionPublishLogListRequest {
            return GetVersionPublishLogListRequest.deserialize(bytes);
        }
    }
    export class VersionPublishPubEntity extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            id?: number;
            version?: string;
            type?: dependency_2.api.common.ClientType;
            cn_desc?: string;
            en_desc?: string;
            state?: boolean;
            package_name?: string;
            updated_at?: dependency_4.google.protobuf.Timestamp;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
                if ("version" in data && data.version != undefined) {
                    this.version = data.version;
                }
                if ("type" in data && data.type != undefined) {
                    this.type = data.type;
                }
                if ("cn_desc" in data && data.cn_desc != undefined) {
                    this.cn_desc = data.cn_desc;
                }
                if ("en_desc" in data && data.en_desc != undefined) {
                    this.en_desc = data.en_desc;
                }
                if ("state" in data && data.state != undefined) {
                    this.state = data.state;
                }
                if ("package_name" in data && data.package_name != undefined) {
                    this.package_name = data.package_name;
                }
                if ("updated_at" in data && data.updated_at != undefined) {
                    this.updated_at = data.updated_at;
                }
            }
        }
        get id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get version() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set version(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get type() {
            return pb_1.Message.getFieldWithDefault(this, 3, dependency_2.api.common.ClientType.CLIENT_TYPE_UNKNOWN) as dependency_2.api.common.ClientType;
        }
        set type(value: dependency_2.api.common.ClientType) {
            pb_1.Message.setField(this, 3, value);
        }
        get cn_desc() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set cn_desc(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get en_desc() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set en_desc(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        get state() {
            return pb_1.Message.getFieldWithDefault(this, 6, false) as boolean;
        }
        set state(value: boolean) {
            pb_1.Message.setField(this, 6, value);
        }
        get package_name() {
            return pb_1.Message.getFieldWithDefault(this, 7, "") as string;
        }
        set package_name(value: string) {
            pb_1.Message.setField(this, 7, value);
        }
        get updated_at() {
            return pb_1.Message.getWrapperField(this, dependency_4.google.protobuf.Timestamp, 8) as dependency_4.google.protobuf.Timestamp;
        }
        set updated_at(value: dependency_4.google.protobuf.Timestamp) {
            pb_1.Message.setWrapperField(this, 8, value);
        }
        get has_updated_at() {
            return pb_1.Message.getField(this, 8) != null;
        }
        static fromObject(data: {
            id?: number;
            version?: string;
            type?: dependency_2.api.common.ClientType;
            cn_desc?: string;
            en_desc?: string;
            state?: boolean;
            package_name?: string;
            updated_at?: ReturnType<typeof dependency_4.google.protobuf.Timestamp.prototype.toObject>;
        }): VersionPublishPubEntity {
            const message = new VersionPublishPubEntity({});
            if (data.id != null) {
                message.id = data.id;
            }
            if (data.version != null) {
                message.version = data.version;
            }
            if (data.type != null) {
                message.type = data.type;
            }
            if (data.cn_desc != null) {
                message.cn_desc = data.cn_desc;
            }
            if (data.en_desc != null) {
                message.en_desc = data.en_desc;
            }
            if (data.state != null) {
                message.state = data.state;
            }
            if (data.package_name != null) {
                message.package_name = data.package_name;
            }
            if (data.updated_at != null) {
                message.updated_at = dependency_4.google.protobuf.Timestamp.fromObject(data.updated_at);
            }
            return message;
        }
        toObject() {
            const data: {
                id?: number;
                version?: string;
                type?: dependency_2.api.common.ClientType;
                cn_desc?: string;
                en_desc?: string;
                state?: boolean;
                package_name?: string;
                updated_at?: ReturnType<typeof dependency_4.google.protobuf.Timestamp.prototype.toObject>;
            } = {};
            if (this.id != null) {
                data.id = this.id;
            }
            if (this.version != null) {
                data.version = this.version;
            }
            if (this.type != null) {
                data.type = this.type;
            }
            if (this.cn_desc != null) {
                data.cn_desc = this.cn_desc;
            }
            if (this.en_desc != null) {
                data.en_desc = this.en_desc;
            }
            if (this.state != null) {
                data.state = this.state;
            }
            if (this.package_name != null) {
                data.package_name = this.package_name;
            }
            if (this.updated_at != null) {
                data.updated_at = this.updated_at.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.id != 0)
                writer.writeInt32(1, this.id);
            if (this.version.length)
                writer.writeString(2, this.version);
            if (this.type != dependency_2.api.common.ClientType.CLIENT_TYPE_UNKNOWN)
                writer.writeEnum(3, this.type);
            if (this.cn_desc.length)
                writer.writeString(4, this.cn_desc);
            if (this.en_desc.length)
                writer.writeString(5, this.en_desc);
            if (this.state != false)
                writer.writeBool(6, this.state);
            if (this.package_name.length)
                writer.writeString(7, this.package_name);
            if (this.has_updated_at)
                writer.writeMessage(8, this.updated_at, () => this.updated_at.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): VersionPublishPubEntity {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new VersionPublishPubEntity();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.id = reader.readInt32();
                        break;
                    case 2:
                        message.version = reader.readString();
                        break;
                    case 3:
                        message.type = reader.readEnum();
                        break;
                    case 4:
                        message.cn_desc = reader.readString();
                        break;
                    case 5:
                        message.en_desc = reader.readString();
                        break;
                    case 6:
                        message.state = reader.readBool();
                        break;
                    case 7:
                        message.package_name = reader.readString();
                        break;
                    case 8:
                        reader.readMessage(message.updated_at, () => message.updated_at = dependency_4.google.protobuf.Timestamp.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): VersionPublishPubEntity {
            return VersionPublishPubEntity.deserialize(bytes);
        }
    }
    export class GetVersionPublishLogListResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            list?: VersionPublishPubEntity[];
            total?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("list" in data && data.list != undefined) {
                    this.list = data.list;
                }
                if ("total" in data && data.total != undefined) {
                    this.total = data.total;
                }
            }
        }
        get list() {
            return pb_1.Message.getRepeatedWrapperField(this, VersionPublishPubEntity, 1) as VersionPublishPubEntity[];
        }
        set list(value: VersionPublishPubEntity[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        get total() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set total(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            list?: ReturnType<typeof VersionPublishPubEntity.prototype.toObject>[];
            total?: number;
        }): GetVersionPublishLogListResponse {
            const message = new GetVersionPublishLogListResponse({});
            if (data.list != null) {
                message.list = data.list.map(item => VersionPublishPubEntity.fromObject(item));
            }
            if (data.total != null) {
                message.total = data.total;
            }
            return message;
        }
        toObject() {
            const data: {
                list?: ReturnType<typeof VersionPublishPubEntity.prototype.toObject>[];
                total?: number;
            } = {};
            if (this.list != null) {
                data.list = this.list.map((item: VersionPublishPubEntity) => item.toObject());
            }
            if (this.total != null) {
                data.total = this.total;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.list.length)
                writer.writeRepeatedMessage(1, this.list, (item: VersionPublishPubEntity) => item.serialize(writer));
            if (this.total != 0)
                writer.writeInt32(2, this.total);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetVersionPublishLogListResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetVersionPublishLogListResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.list, () => pb_1.Message.addToRepeatedWrapperField(message, 1, VersionPublishPubEntity.deserialize(reader), VersionPublishPubEntity));
                        break;
                    case 2:
                        message.total = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetVersionPublishLogListResponse {
            return GetVersionPublishLogListResponse.deserialize(bytes);
        }
    }
    export class VerifyCodeAndGetUrlRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            version_type?: dependency_2.api.common.VersionType;
            type?: dependency_2.api.common.ClientType;
            code?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("version_type" in data && data.version_type != undefined) {
                    this.version_type = data.version_type;
                }
                if ("type" in data && data.type != undefined) {
                    this.type = data.type;
                }
                if ("code" in data && data.code != undefined) {
                    this.code = data.code;
                }
            }
        }
        get version_type() {
            return pb_1.Message.getFieldWithDefault(this, 1, dependency_2.api.common.VersionType.Pre) as dependency_2.api.common.VersionType;
        }
        set version_type(value: dependency_2.api.common.VersionType) {
            pb_1.Message.setField(this, 1, value);
        }
        get type() {
            return pb_1.Message.getFieldWithDefault(this, 2, dependency_2.api.common.ClientType.CLIENT_TYPE_UNKNOWN) as dependency_2.api.common.ClientType;
        }
        set type(value: dependency_2.api.common.ClientType) {
            pb_1.Message.setField(this, 2, value);
        }
        get code() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set code(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            version_type?: dependency_2.api.common.VersionType;
            type?: dependency_2.api.common.ClientType;
            code?: string;
        }): VerifyCodeAndGetUrlRequest {
            const message = new VerifyCodeAndGetUrlRequest({});
            if (data.version_type != null) {
                message.version_type = data.version_type;
            }
            if (data.type != null) {
                message.type = data.type;
            }
            if (data.code != null) {
                message.code = data.code;
            }
            return message;
        }
        toObject() {
            const data: {
                version_type?: dependency_2.api.common.VersionType;
                type?: dependency_2.api.common.ClientType;
                code?: string;
            } = {};
            if (this.version_type != null) {
                data.version_type = this.version_type;
            }
            if (this.type != null) {
                data.type = this.type;
            }
            if (this.code != null) {
                data.code = this.code;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.version_type != dependency_2.api.common.VersionType.Pre)
                writer.writeEnum(1, this.version_type);
            if (this.type != dependency_2.api.common.ClientType.CLIENT_TYPE_UNKNOWN)
                writer.writeEnum(2, this.type);
            if (this.code.length)
                writer.writeString(3, this.code);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): VerifyCodeAndGetUrlRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new VerifyCodeAndGetUrlRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.version_type = reader.readEnum();
                        break;
                    case 2:
                        message.type = reader.readEnum();
                        break;
                    case 3:
                        message.code = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): VerifyCodeAndGetUrlRequest {
            return VerifyCodeAndGetUrlRequest.deserialize(bytes);
        }
    }
    export class VerifyCodeAndGetUrlResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            mac_url?: string;
            win_url?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("mac_url" in data && data.mac_url != undefined) {
                    this.mac_url = data.mac_url;
                }
                if ("win_url" in data && data.win_url != undefined) {
                    this.win_url = data.win_url;
                }
            }
        }
        get mac_url() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set mac_url(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get win_url() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set win_url(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            mac_url?: string;
            win_url?: string;
        }): VerifyCodeAndGetUrlResponse {
            const message = new VerifyCodeAndGetUrlResponse({});
            if (data.mac_url != null) {
                message.mac_url = data.mac_url;
            }
            if (data.win_url != null) {
                message.win_url = data.win_url;
            }
            return message;
        }
        toObject() {
            const data: {
                mac_url?: string;
                win_url?: string;
            } = {};
            if (this.mac_url != null) {
                data.mac_url = this.mac_url;
            }
            if (this.win_url != null) {
                data.win_url = this.win_url;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.mac_url.length)
                writer.writeString(1, this.mac_url);
            if (this.win_url.length)
                writer.writeString(2, this.win_url);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): VerifyCodeAndGetUrlResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new VerifyCodeAndGetUrlResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.mac_url = reader.readString();
                        break;
                    case 2:
                        message.win_url = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): VerifyCodeAndGetUrlResponse {
            return VerifyCodeAndGetUrlResponse.deserialize(bytes);
        }
    }
    interface GrpcUnaryServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
    }
    interface GrpcStreamServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
        (message: P, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
    }
    interface GrpWritableServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
    }
    interface GrpcChunkServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
        (options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
    }
    interface GrpcPromiseServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): Promise<R>;
        (message: P, options?: grpc_1.CallOptions): Promise<R>;
    }
    export abstract class UnimplementedVersionReleaseService {
        static definition = {
            GetVersionPublishList: {
                path: "/api.core.VersionRelease/GetVersionPublishList",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: GetVersionPublishRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => GetVersionPublishRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: GetVersionPublishResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => GetVersionPublishResponse.deserialize(new Uint8Array(bytes))
            },
            GetVersionPublishLogList: {
                path: "/api.core.VersionRelease/GetVersionPublishLogList",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: GetVersionPublishLogListRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => GetVersionPublishLogListRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: GetVersionPublishLogListResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => GetVersionPublishLogListResponse.deserialize(new Uint8Array(bytes))
            },
            VerifyCodeAndGetUrl: {
                path: "/api.core.VersionRelease/VerifyCodeAndGetUrl",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: VerifyCodeAndGetUrlRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => VerifyCodeAndGetUrlRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: VerifyCodeAndGetUrlResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => VerifyCodeAndGetUrlResponse.deserialize(new Uint8Array(bytes))
            }
        };
        [method: string]: grpc_1.UntypedHandleCall;
        abstract GetVersionPublishList(call: grpc_1.ServerUnaryCall<GetVersionPublishRequest, GetVersionPublishResponse>, callback: grpc_1.sendUnaryData<GetVersionPublishResponse>): void;
        abstract GetVersionPublishLogList(call: grpc_1.ServerUnaryCall<GetVersionPublishLogListRequest, GetVersionPublishLogListResponse>, callback: grpc_1.sendUnaryData<GetVersionPublishLogListResponse>): void;
        abstract VerifyCodeAndGetUrl(call: grpc_1.ServerUnaryCall<VerifyCodeAndGetUrlRequest, VerifyCodeAndGetUrlResponse>, callback: grpc_1.sendUnaryData<VerifyCodeAndGetUrlResponse>): void;
    }
    export class VersionReleaseClient extends grpc_1.makeGenericClientConstructor(UnimplementedVersionReleaseService.definition, "VersionRelease", {}) {
        constructor(address: string, credentials: grpc_1.ChannelCredentials, options?: Partial<grpc_1.ChannelOptions>) {
            super(address, credentials, options);
        }
        GetVersionPublishList: GrpcUnaryServiceInterface<GetVersionPublishRequest, GetVersionPublishResponse> = (message: GetVersionPublishRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<GetVersionPublishResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<GetVersionPublishResponse>, callback?: grpc_1.requestCallback<GetVersionPublishResponse>): grpc_1.ClientUnaryCall => {
            return super.GetVersionPublishList(message, metadata, options, callback);
        };
        GetVersionPublishLogList: GrpcUnaryServiceInterface<GetVersionPublishLogListRequest, GetVersionPublishLogListResponse> = (message: GetVersionPublishLogListRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<GetVersionPublishLogListResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<GetVersionPublishLogListResponse>, callback?: grpc_1.requestCallback<GetVersionPublishLogListResponse>): grpc_1.ClientUnaryCall => {
            return super.GetVersionPublishLogList(message, metadata, options, callback);
        };
        VerifyCodeAndGetUrl: GrpcUnaryServiceInterface<VerifyCodeAndGetUrlRequest, VerifyCodeAndGetUrlResponse> = (message: VerifyCodeAndGetUrlRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<VerifyCodeAndGetUrlResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<VerifyCodeAndGetUrlResponse>, callback?: grpc_1.requestCallback<VerifyCodeAndGetUrlResponse>): grpc_1.ClientUnaryCall => {
            return super.VerifyCodeAndGetUrl(message, metadata, options, callback);
        };
    }
}
