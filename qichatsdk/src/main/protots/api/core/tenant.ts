/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 5.26.1
 * source: api/core/tenant.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./../option";
import * as dependency_2 from "./../../google/protobuf/empty";
import * as dependency_3 from "./../../google/protobuf/timestamp";
import * as dependency_4 from "./../../validate/validate";
import * as dependency_5 from "./../common/c_worker";
import * as dependency_6 from "./../common/c_base";
import * as dependency_7 from "./../common/c_entrance";
import * as dependency_8 from "./../common/c_tenant";
import * as pb_1 from "google-protobuf";
import * as grpc_1 from "@grpc/grpc-js";
export namespace api.core {
    export enum LoginPlatform {
        Dashboard = 0,
        Client = 1
    }
    export enum RoleRoute {
        Role_ROUTE_WORKER = 0,
        Role_ROUTE_CUSTOMER = 1,
        Role_ROUTE_ALL = 2
    }
    export class PageParam extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            size?: number;
            page?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("size" in data && data.size != undefined) {
                    this.size = data.size;
                }
                if ("page" in data && data.page != undefined) {
                    this.page = data.page;
                }
            }
        }
        get size() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set size(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get page() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set page(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            size?: number;
            page?: number;
        }): PageParam {
            const message = new PageParam({});
            if (data.size != null) {
                message.size = data.size;
            }
            if (data.page != null) {
                message.page = data.page;
            }
            return message;
        }
        toObject() {
            const data: {
                size?: number;
                page?: number;
            } = {};
            if (this.size != null) {
                data.size = this.size;
            }
            if (this.page != null) {
                data.page = this.page;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.size != 0)
                writer.writeUint32(1, this.size);
            if (this.page != 0)
                writer.writeInt64(2, this.page);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): PageParam {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new PageParam();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.size = reader.readUint32();
                        break;
                    case 2:
                        message.page = reader.readInt64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): PageParam {
            return PageParam.deserialize(bytes);
        }
    }
    export class RouteRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            role_id?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("role_id" in data && data.role_id != undefined) {
                    this.role_id = data.role_id;
                }
            }
        }
        get role_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set role_id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            role_id?: number;
        }): RouteRequest {
            const message = new RouteRequest({});
            if (data.role_id != null) {
                message.role_id = data.role_id;
            }
            return message;
        }
        toObject() {
            const data: {
                role_id?: number;
            } = {};
            if (this.role_id != null) {
                data.role_id = this.role_id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.role_id != 0)
                writer.writeInt32(1, this.role_id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): RouteRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new RouteRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.role_id = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): RouteRequest {
            return RouteRequest.deserialize(bytes);
        }
    }
    export class RouteItem extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            route_name?: string;
            route_url?: string;
            route_role?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("route_name" in data && data.route_name != undefined) {
                    this.route_name = data.route_name;
                }
                if ("route_url" in data && data.route_url != undefined) {
                    this.route_url = data.route_url;
                }
                if ("route_role" in data && data.route_role != undefined) {
                    this.route_role = data.route_role;
                }
            }
        }
        get route_name() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set route_name(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get route_url() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set route_url(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get route_role() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set route_role(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            route_name?: string;
            route_url?: string;
            route_role?: number;
        }): RouteItem {
            const message = new RouteItem({});
            if (data.route_name != null) {
                message.route_name = data.route_name;
            }
            if (data.route_url != null) {
                message.route_url = data.route_url;
            }
            if (data.route_role != null) {
                message.route_role = data.route_role;
            }
            return message;
        }
        toObject() {
            const data: {
                route_name?: string;
                route_url?: string;
                route_role?: number;
            } = {};
            if (this.route_name != null) {
                data.route_name = this.route_name;
            }
            if (this.route_url != null) {
                data.route_url = this.route_url;
            }
            if (this.route_role != null) {
                data.route_role = this.route_role;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.route_name.length)
                writer.writeString(1, this.route_name);
            if (this.route_url.length)
                writer.writeString(2, this.route_url);
            if (this.route_role != 0)
                writer.writeInt32(3, this.route_role);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): RouteItem {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new RouteItem();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.route_name = reader.readString();
                        break;
                    case 2:
                        message.route_url = reader.readString();
                        break;
                    case 3:
                        message.route_role = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): RouteItem {
            return RouteItem.deserialize(bytes);
        }
    }
    export class RouteResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            routes?: RouteItem[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("routes" in data && data.routes != undefined) {
                    this.routes = data.routes;
                }
            }
        }
        get routes() {
            return pb_1.Message.getRepeatedWrapperField(this, RouteItem, 1) as RouteItem[];
        }
        set routes(value: RouteItem[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        static fromObject(data: {
            routes?: ReturnType<typeof RouteItem.prototype.toObject>[];
        }): RouteResponse {
            const message = new RouteResponse({});
            if (data.routes != null) {
                message.routes = data.routes.map(item => RouteItem.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                routes?: ReturnType<typeof RouteItem.prototype.toObject>[];
            } = {};
            if (this.routes != null) {
                data.routes = this.routes.map((item: RouteItem) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.routes.length)
                writer.writeRepeatedMessage(1, this.routes, (item: RouteItem) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): RouteResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new RouteResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.routes, () => pb_1.Message.addToRepeatedWrapperField(message, 1, RouteItem.deserialize(reader), RouteItem));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): RouteResponse {
            return RouteResponse.deserialize(bytes);
        }
    }
    export class CaptchaResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            captcha_key?: string;
            image_base64?: string;
            thumb_base64?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("captcha_key" in data && data.captcha_key != undefined) {
                    this.captcha_key = data.captcha_key;
                }
                if ("image_base64" in data && data.image_base64 != undefined) {
                    this.image_base64 = data.image_base64;
                }
                if ("thumb_base64" in data && data.thumb_base64 != undefined) {
                    this.thumb_base64 = data.thumb_base64;
                }
            }
        }
        get captcha_key() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set captcha_key(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get image_base64() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set image_base64(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get thumb_base64() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set thumb_base64(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            captcha_key?: string;
            image_base64?: string;
            thumb_base64?: string;
        }): CaptchaResponse {
            const message = new CaptchaResponse({});
            if (data.captcha_key != null) {
                message.captcha_key = data.captcha_key;
            }
            if (data.image_base64 != null) {
                message.image_base64 = data.image_base64;
            }
            if (data.thumb_base64 != null) {
                message.thumb_base64 = data.thumb_base64;
            }
            return message;
        }
        toObject() {
            const data: {
                captcha_key?: string;
                image_base64?: string;
                thumb_base64?: string;
            } = {};
            if (this.captcha_key != null) {
                data.captcha_key = this.captcha_key;
            }
            if (this.image_base64 != null) {
                data.image_base64 = this.image_base64;
            }
            if (this.thumb_base64 != null) {
                data.thumb_base64 = this.thumb_base64;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.captcha_key.length)
                writer.writeString(1, this.captcha_key);
            if (this.image_base64.length)
                writer.writeString(2, this.image_base64);
            if (this.thumb_base64.length)
                writer.writeString(3, this.thumb_base64);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CaptchaResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CaptchaResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.captcha_key = reader.readString();
                        break;
                    case 2:
                        message.image_base64 = reader.readString();
                        break;
                    case 3:
                        message.thumb_base64 = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CaptchaResponse {
            return CaptchaResponse.deserialize(bytes);
        }
    }
    export class LoginRequest extends pb_1.Message {
        #one_of_decls: number[][] = [[3], [4], [5], [6], [7]];
        constructor(data?: any[] | ({
            account?: string;
            password?: string;
        } & (({
            captcha_dots?: string;
        }) | ({
            captcha_key?: string;
        }) | ({
            login_platform?: LoginPlatform;
        }) | ({
            device_info?: dependency_5.api.common.DeviceInfo;
        }) | ({
            client_ver?: string;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("account" in data && data.account != undefined) {
                    this.account = data.account;
                }
                if ("password" in data && data.password != undefined) {
                    this.password = data.password;
                }
                if ("captcha_dots" in data && data.captcha_dots != undefined) {
                    this.captcha_dots = data.captcha_dots;
                }
                if ("captcha_key" in data && data.captcha_key != undefined) {
                    this.captcha_key = data.captcha_key;
                }
                if ("login_platform" in data && data.login_platform != undefined) {
                    this.login_platform = data.login_platform;
                }
                if ("device_info" in data && data.device_info != undefined) {
                    this.device_info = data.device_info;
                }
                if ("client_ver" in data && data.client_ver != undefined) {
                    this.client_ver = data.client_ver;
                }
            }
        }
        get account() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set account(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get password() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set password(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get captcha_dots() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set captcha_dots(value: string) {
            pb_1.Message.setOneofField(this, 3, this.#one_of_decls[0], value);
        }
        get has_captcha_dots() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get captcha_key() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set captcha_key(value: string) {
            pb_1.Message.setOneofField(this, 4, this.#one_of_decls[1], value);
        }
        get has_captcha_key() {
            return pb_1.Message.getField(this, 4) != null;
        }
        get login_platform() {
            return pb_1.Message.getFieldWithDefault(this, 5, LoginPlatform.Dashboard) as LoginPlatform;
        }
        set login_platform(value: LoginPlatform) {
            pb_1.Message.setOneofField(this, 5, this.#one_of_decls[2], value);
        }
        get has_login_platform() {
            return pb_1.Message.getField(this, 5) != null;
        }
        get device_info() {
            return pb_1.Message.getWrapperField(this, dependency_5.api.common.DeviceInfo, 6) as dependency_5.api.common.DeviceInfo;
        }
        set device_info(value: dependency_5.api.common.DeviceInfo) {
            pb_1.Message.setOneofWrapperField(this, 6, this.#one_of_decls[3], value);
        }
        get has_device_info() {
            return pb_1.Message.getField(this, 6) != null;
        }
        get client_ver() {
            return pb_1.Message.getFieldWithDefault(this, 7, "") as string;
        }
        set client_ver(value: string) {
            pb_1.Message.setOneofField(this, 7, this.#one_of_decls[4], value);
        }
        get has_client_ver() {
            return pb_1.Message.getField(this, 7) != null;
        }
        get _captcha_dots() {
            const cases: {
                [index: number]: "none" | "captcha_dots";
            } = {
                0: "none",
                3: "captcha_dots"
            };
            return cases[pb_1.Message.computeOneofCase(this, [3])];
        }
        get _captcha_key() {
            const cases: {
                [index: number]: "none" | "captcha_key";
            } = {
                0: "none",
                4: "captcha_key"
            };
            return cases[pb_1.Message.computeOneofCase(this, [4])];
        }
        get _login_platform() {
            const cases: {
                [index: number]: "none" | "login_platform";
            } = {
                0: "none",
                5: "login_platform"
            };
            return cases[pb_1.Message.computeOneofCase(this, [5])];
        }
        get _device_info() {
            const cases: {
                [index: number]: "none" | "device_info";
            } = {
                0: "none",
                6: "device_info"
            };
            return cases[pb_1.Message.computeOneofCase(this, [6])];
        }
        get _client_ver() {
            const cases: {
                [index: number]: "none" | "client_ver";
            } = {
                0: "none",
                7: "client_ver"
            };
            return cases[pb_1.Message.computeOneofCase(this, [7])];
        }
        static fromObject(data: {
            account?: string;
            password?: string;
            captcha_dots?: string;
            captcha_key?: string;
            login_platform?: LoginPlatform;
            device_info?: ReturnType<typeof dependency_5.api.common.DeviceInfo.prototype.toObject>;
            client_ver?: string;
        }): LoginRequest {
            const message = new LoginRequest({});
            if (data.account != null) {
                message.account = data.account;
            }
            if (data.password != null) {
                message.password = data.password;
            }
            if (data.captcha_dots != null) {
                message.captcha_dots = data.captcha_dots;
            }
            if (data.captcha_key != null) {
                message.captcha_key = data.captcha_key;
            }
            if (data.login_platform != null) {
                message.login_platform = data.login_platform;
            }
            if (data.device_info != null) {
                message.device_info = dependency_5.api.common.DeviceInfo.fromObject(data.device_info);
            }
            if (data.client_ver != null) {
                message.client_ver = data.client_ver;
            }
            return message;
        }
        toObject() {
            const data: {
                account?: string;
                password?: string;
                captcha_dots?: string;
                captcha_key?: string;
                login_platform?: LoginPlatform;
                device_info?: ReturnType<typeof dependency_5.api.common.DeviceInfo.prototype.toObject>;
                client_ver?: string;
            } = {};
            if (this.account != null) {
                data.account = this.account;
            }
            if (this.password != null) {
                data.password = this.password;
            }
            if (this.captcha_dots != null) {
                data.captcha_dots = this.captcha_dots;
            }
            if (this.captcha_key != null) {
                data.captcha_key = this.captcha_key;
            }
            if (this.login_platform != null) {
                data.login_platform = this.login_platform;
            }
            if (this.device_info != null) {
                data.device_info = this.device_info.toObject();
            }
            if (this.client_ver != null) {
                data.client_ver = this.client_ver;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.account.length)
                writer.writeString(1, this.account);
            if (this.password.length)
                writer.writeString(2, this.password);
            if (this.has_captcha_dots)
                writer.writeString(3, this.captcha_dots);
            if (this.has_captcha_key)
                writer.writeString(4, this.captcha_key);
            if (this.has_login_platform)
                writer.writeEnum(5, this.login_platform);
            if (this.has_device_info)
                writer.writeMessage(6, this.device_info, () => this.device_info.serialize(writer));
            if (this.has_client_ver)
                writer.writeString(7, this.client_ver);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): LoginRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new LoginRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.account = reader.readString();
                        break;
                    case 2:
                        message.password = reader.readString();
                        break;
                    case 3:
                        message.captcha_dots = reader.readString();
                        break;
                    case 4:
                        message.captcha_key = reader.readString();
                        break;
                    case 5:
                        message.login_platform = reader.readEnum();
                        break;
                    case 6:
                        reader.readMessage(message.device_info, () => message.device_info = dependency_5.api.common.DeviceInfo.deserialize(reader));
                        break;
                    case 7:
                        message.client_ver = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): LoginRequest {
            return LoginRequest.deserialize(bytes);
        }
    }
    export class LoginResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            token?: string;
            items?: dependency_5.api.common.Worker;
            chat_expire_time?: number;
            bind_gl?: boolean;
            third_api_enabled?: boolean;
            background_line?: string;
            clique?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("token" in data && data.token != undefined) {
                    this.token = data.token;
                }
                if ("items" in data && data.items != undefined) {
                    this.items = data.items;
                }
                if ("chat_expire_time" in data && data.chat_expire_time != undefined) {
                    this.chat_expire_time = data.chat_expire_time;
                }
                if ("bind_gl" in data && data.bind_gl != undefined) {
                    this.bind_gl = data.bind_gl;
                }
                if ("third_api_enabled" in data && data.third_api_enabled != undefined) {
                    this.third_api_enabled = data.third_api_enabled;
                }
                if ("background_line" in data && data.background_line != undefined) {
                    this.background_line = data.background_line;
                }
                if ("clique" in data && data.clique != undefined) {
                    this.clique = data.clique;
                }
            }
        }
        get token() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set token(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get items() {
            return pb_1.Message.getWrapperField(this, dependency_5.api.common.Worker, 2) as dependency_5.api.common.Worker;
        }
        set items(value: dependency_5.api.common.Worker) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_items() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get chat_expire_time() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set chat_expire_time(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        get bind_gl() {
            return pb_1.Message.getFieldWithDefault(this, 4, false) as boolean;
        }
        set bind_gl(value: boolean) {
            pb_1.Message.setField(this, 4, value);
        }
        get third_api_enabled() {
            return pb_1.Message.getFieldWithDefault(this, 5, false) as boolean;
        }
        set third_api_enabled(value: boolean) {
            pb_1.Message.setField(this, 5, value);
        }
        get background_line() {
            return pb_1.Message.getFieldWithDefault(this, 21, "") as string;
        }
        set background_line(value: string) {
            pb_1.Message.setField(this, 21, value);
        }
        get clique() {
            return pb_1.Message.getFieldWithDefault(this, 22, 0) as number;
        }
        set clique(value: number) {
            pb_1.Message.setField(this, 22, value);
        }
        static fromObject(data: {
            token?: string;
            items?: ReturnType<typeof dependency_5.api.common.Worker.prototype.toObject>;
            chat_expire_time?: number;
            bind_gl?: boolean;
            third_api_enabled?: boolean;
            background_line?: string;
            clique?: number;
        }): LoginResponse {
            const message = new LoginResponse({});
            if (data.token != null) {
                message.token = data.token;
            }
            if (data.items != null) {
                message.items = dependency_5.api.common.Worker.fromObject(data.items);
            }
            if (data.chat_expire_time != null) {
                message.chat_expire_time = data.chat_expire_time;
            }
            if (data.bind_gl != null) {
                message.bind_gl = data.bind_gl;
            }
            if (data.third_api_enabled != null) {
                message.third_api_enabled = data.third_api_enabled;
            }
            if (data.background_line != null) {
                message.background_line = data.background_line;
            }
            if (data.clique != null) {
                message.clique = data.clique;
            }
            return message;
        }
        toObject() {
            const data: {
                token?: string;
                items?: ReturnType<typeof dependency_5.api.common.Worker.prototype.toObject>;
                chat_expire_time?: number;
                bind_gl?: boolean;
                third_api_enabled?: boolean;
                background_line?: string;
                clique?: number;
            } = {};
            if (this.token != null) {
                data.token = this.token;
            }
            if (this.items != null) {
                data.items = this.items.toObject();
            }
            if (this.chat_expire_time != null) {
                data.chat_expire_time = this.chat_expire_time;
            }
            if (this.bind_gl != null) {
                data.bind_gl = this.bind_gl;
            }
            if (this.third_api_enabled != null) {
                data.third_api_enabled = this.third_api_enabled;
            }
            if (this.background_line != null) {
                data.background_line = this.background_line;
            }
            if (this.clique != null) {
                data.clique = this.clique;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.token.length)
                writer.writeString(1, this.token);
            if (this.has_items)
                writer.writeMessage(2, this.items, () => this.items.serialize(writer));
            if (this.chat_expire_time != 0)
                writer.writeInt32(3, this.chat_expire_time);
            if (this.bind_gl != false)
                writer.writeBool(4, this.bind_gl);
            if (this.third_api_enabled != false)
                writer.writeBool(5, this.third_api_enabled);
            if (this.background_line.length)
                writer.writeString(21, this.background_line);
            if (this.clique != 0)
                writer.writeInt32(22, this.clique);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): LoginResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new LoginResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.token = reader.readString();
                        break;
                    case 2:
                        reader.readMessage(message.items, () => message.items = dependency_5.api.common.Worker.deserialize(reader));
                        break;
                    case 3:
                        message.chat_expire_time = reader.readInt32();
                        break;
                    case 4:
                        message.bind_gl = reader.readBool();
                        break;
                    case 5:
                        message.third_api_enabled = reader.readBool();
                        break;
                    case 21:
                        message.background_line = reader.readString();
                        break;
                    case 22:
                        message.clique = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): LoginResponse {
            return LoginResponse.deserialize(bytes);
        }
    }
    export class LogoutRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            logout_platform?: LoginPlatform;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("logout_platform" in data && data.logout_platform != undefined) {
                    this.logout_platform = data.logout_platform;
                }
            }
        }
        get logout_platform() {
            return pb_1.Message.getFieldWithDefault(this, 5, LoginPlatform.Dashboard) as LoginPlatform;
        }
        set logout_platform(value: LoginPlatform) {
            pb_1.Message.setField(this, 5, value);
        }
        static fromObject(data: {
            logout_platform?: LoginPlatform;
        }): LogoutRequest {
            const message = new LogoutRequest({});
            if (data.logout_platform != null) {
                message.logout_platform = data.logout_platform;
            }
            return message;
        }
        toObject() {
            const data: {
                logout_platform?: LoginPlatform;
            } = {};
            if (this.logout_platform != null) {
                data.logout_platform = this.logout_platform;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.logout_platform != LoginPlatform.Dashboard)
                writer.writeEnum(5, this.logout_platform);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): LogoutRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new LogoutRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 5:
                        message.logout_platform = reader.readEnum();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): LogoutRequest {
            return LogoutRequest.deserialize(bytes);
        }
    }
    export class ManagerLoginRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            worker_id?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("worker_id" in data && data.worker_id != undefined) {
                    this.worker_id = data.worker_id;
                }
            }
        }
        get worker_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set worker_id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            worker_id?: number;
        }): ManagerLoginRequest {
            const message = new ManagerLoginRequest({});
            if (data.worker_id != null) {
                message.worker_id = data.worker_id;
            }
            return message;
        }
        toObject() {
            const data: {
                worker_id?: number;
            } = {};
            if (this.worker_id != null) {
                data.worker_id = this.worker_id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.worker_id != 0)
                writer.writeInt32(1, this.worker_id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ManagerLoginRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ManagerLoginRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.worker_id = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ManagerLoginRequest {
            return ManagerLoginRequest.deserialize(bytes);
        }
    }
    export class ManagerLoginResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            token?: string;
            items?: dependency_5.api.common.Worker;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("token" in data && data.token != undefined) {
                    this.token = data.token;
                }
                if ("items" in data && data.items != undefined) {
                    this.items = data.items;
                }
            }
        }
        get token() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set token(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get items() {
            return pb_1.Message.getWrapperField(this, dependency_5.api.common.Worker, 2) as dependency_5.api.common.Worker;
        }
        set items(value: dependency_5.api.common.Worker) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_items() {
            return pb_1.Message.getField(this, 2) != null;
        }
        static fromObject(data: {
            token?: string;
            items?: ReturnType<typeof dependency_5.api.common.Worker.prototype.toObject>;
        }): ManagerLoginResponse {
            const message = new ManagerLoginResponse({});
            if (data.token != null) {
                message.token = data.token;
            }
            if (data.items != null) {
                message.items = dependency_5.api.common.Worker.fromObject(data.items);
            }
            return message;
        }
        toObject() {
            const data: {
                token?: string;
                items?: ReturnType<typeof dependency_5.api.common.Worker.prototype.toObject>;
            } = {};
            if (this.token != null) {
                data.token = this.token;
            }
            if (this.items != null) {
                data.items = this.items.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.token.length)
                writer.writeString(1, this.token);
            if (this.has_items)
                writer.writeMessage(2, this.items, () => this.items.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ManagerLoginResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ManagerLoginResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.token = reader.readString();
                        break;
                    case 2:
                        reader.readMessage(message.items, () => message.items = dependency_5.api.common.Worker.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ManagerLoginResponse {
            return ManagerLoginResponse.deserialize(bytes);
        }
    }
    export class TenantCreateRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            name?: string;
            account?: string;
            password?: string;
            worker_capacity?: number;
            daily_service_capacity?: number;
            clique_id?: number;
            line_group_id?: number;
            h5_line?: string;
            background_line?: string;
            remark?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
                if ("account" in data && data.account != undefined) {
                    this.account = data.account;
                }
                if ("password" in data && data.password != undefined) {
                    this.password = data.password;
                }
                if ("worker_capacity" in data && data.worker_capacity != undefined) {
                    this.worker_capacity = data.worker_capacity;
                }
                if ("daily_service_capacity" in data && data.daily_service_capacity != undefined) {
                    this.daily_service_capacity = data.daily_service_capacity;
                }
                if ("clique_id" in data && data.clique_id != undefined) {
                    this.clique_id = data.clique_id;
                }
                if ("line_group_id" in data && data.line_group_id != undefined) {
                    this.line_group_id = data.line_group_id;
                }
                if ("h5_line" in data && data.h5_line != undefined) {
                    this.h5_line = data.h5_line;
                }
                if ("background_line" in data && data.background_line != undefined) {
                    this.background_line = data.background_line;
                }
                if ("remark" in data && data.remark != undefined) {
                    this.remark = data.remark;
                }
            }
        }
        get name() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get account() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set account(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get password() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set password(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get worker_capacity() {
            return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
        }
        set worker_capacity(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        get daily_service_capacity() {
            return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
        }
        set daily_service_capacity(value: number) {
            pb_1.Message.setField(this, 5, value);
        }
        get clique_id() {
            return pb_1.Message.getFieldWithDefault(this, 6, 0) as number;
        }
        set clique_id(value: number) {
            pb_1.Message.setField(this, 6, value);
        }
        get line_group_id() {
            return pb_1.Message.getFieldWithDefault(this, 7, 0) as number;
        }
        set line_group_id(value: number) {
            pb_1.Message.setField(this, 7, value);
        }
        get h5_line() {
            return pb_1.Message.getFieldWithDefault(this, 8, "") as string;
        }
        set h5_line(value: string) {
            pb_1.Message.setField(this, 8, value);
        }
        get background_line() {
            return pb_1.Message.getFieldWithDefault(this, 9, "") as string;
        }
        set background_line(value: string) {
            pb_1.Message.setField(this, 9, value);
        }
        get remark() {
            return pb_1.Message.getFieldWithDefault(this, 10, "") as string;
        }
        set remark(value: string) {
            pb_1.Message.setField(this, 10, value);
        }
        static fromObject(data: {
            name?: string;
            account?: string;
            password?: string;
            worker_capacity?: number;
            daily_service_capacity?: number;
            clique_id?: number;
            line_group_id?: number;
            h5_line?: string;
            background_line?: string;
            remark?: string;
        }): TenantCreateRequest {
            const message = new TenantCreateRequest({});
            if (data.name != null) {
                message.name = data.name;
            }
            if (data.account != null) {
                message.account = data.account;
            }
            if (data.password != null) {
                message.password = data.password;
            }
            if (data.worker_capacity != null) {
                message.worker_capacity = data.worker_capacity;
            }
            if (data.daily_service_capacity != null) {
                message.daily_service_capacity = data.daily_service_capacity;
            }
            if (data.clique_id != null) {
                message.clique_id = data.clique_id;
            }
            if (data.line_group_id != null) {
                message.line_group_id = data.line_group_id;
            }
            if (data.h5_line != null) {
                message.h5_line = data.h5_line;
            }
            if (data.background_line != null) {
                message.background_line = data.background_line;
            }
            if (data.remark != null) {
                message.remark = data.remark;
            }
            return message;
        }
        toObject() {
            const data: {
                name?: string;
                account?: string;
                password?: string;
                worker_capacity?: number;
                daily_service_capacity?: number;
                clique_id?: number;
                line_group_id?: number;
                h5_line?: string;
                background_line?: string;
                remark?: string;
            } = {};
            if (this.name != null) {
                data.name = this.name;
            }
            if (this.account != null) {
                data.account = this.account;
            }
            if (this.password != null) {
                data.password = this.password;
            }
            if (this.worker_capacity != null) {
                data.worker_capacity = this.worker_capacity;
            }
            if (this.daily_service_capacity != null) {
                data.daily_service_capacity = this.daily_service_capacity;
            }
            if (this.clique_id != null) {
                data.clique_id = this.clique_id;
            }
            if (this.line_group_id != null) {
                data.line_group_id = this.line_group_id;
            }
            if (this.h5_line != null) {
                data.h5_line = this.h5_line;
            }
            if (this.background_line != null) {
                data.background_line = this.background_line;
            }
            if (this.remark != null) {
                data.remark = this.remark;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.name.length)
                writer.writeString(1, this.name);
            if (this.account.length)
                writer.writeString(2, this.account);
            if (this.password.length)
                writer.writeString(3, this.password);
            if (this.worker_capacity != 0)
                writer.writeInt32(4, this.worker_capacity);
            if (this.daily_service_capacity != 0)
                writer.writeInt32(5, this.daily_service_capacity);
            if (this.clique_id != 0)
                writer.writeInt32(6, this.clique_id);
            if (this.line_group_id != 0)
                writer.writeInt32(7, this.line_group_id);
            if (this.h5_line.length)
                writer.writeString(8, this.h5_line);
            if (this.background_line.length)
                writer.writeString(9, this.background_line);
            if (this.remark.length)
                writer.writeString(10, this.remark);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): TenantCreateRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new TenantCreateRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.name = reader.readString();
                        break;
                    case 2:
                        message.account = reader.readString();
                        break;
                    case 3:
                        message.password = reader.readString();
                        break;
                    case 4:
                        message.worker_capacity = reader.readInt32();
                        break;
                    case 5:
                        message.daily_service_capacity = reader.readInt32();
                        break;
                    case 6:
                        message.clique_id = reader.readInt32();
                        break;
                    case 7:
                        message.line_group_id = reader.readInt32();
                        break;
                    case 8:
                        message.h5_line = reader.readString();
                        break;
                    case 9:
                        message.background_line = reader.readString();
                        break;
                    case 10:
                        message.remark = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): TenantCreateRequest {
            return TenantCreateRequest.deserialize(bytes);
        }
    }
    export class TenantQueryRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            batch?: dependency_6.api.common.Batch;
            group_id?: number;
            keyword?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("batch" in data && data.batch != undefined) {
                    this.batch = data.batch;
                }
                if ("group_id" in data && data.group_id != undefined) {
                    this.group_id = data.group_id;
                }
                if ("keyword" in data && data.keyword != undefined) {
                    this.keyword = data.keyword;
                }
            }
        }
        get batch() {
            return pb_1.Message.getWrapperField(this, dependency_6.api.common.Batch, 1) as dependency_6.api.common.Batch;
        }
        set batch(value: dependency_6.api.common.Batch) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_batch() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get group_id() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set group_id(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get keyword() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set keyword(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            batch?: ReturnType<typeof dependency_6.api.common.Batch.prototype.toObject>;
            group_id?: number;
            keyword?: string;
        }): TenantQueryRequest {
            const message = new TenantQueryRequest({});
            if (data.batch != null) {
                message.batch = dependency_6.api.common.Batch.fromObject(data.batch);
            }
            if (data.group_id != null) {
                message.group_id = data.group_id;
            }
            if (data.keyword != null) {
                message.keyword = data.keyword;
            }
            return message;
        }
        toObject() {
            const data: {
                batch?: ReturnType<typeof dependency_6.api.common.Batch.prototype.toObject>;
                group_id?: number;
                keyword?: string;
            } = {};
            if (this.batch != null) {
                data.batch = this.batch.toObject();
            }
            if (this.group_id != null) {
                data.group_id = this.group_id;
            }
            if (this.keyword != null) {
                data.keyword = this.keyword;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_batch)
                writer.writeMessage(1, this.batch, () => this.batch.serialize(writer));
            if (this.group_id != 0)
                writer.writeInt32(2, this.group_id);
            if (this.keyword.length)
                writer.writeString(3, this.keyword);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): TenantQueryRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new TenantQueryRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.batch, () => message.batch = dependency_6.api.common.Batch.deserialize(reader));
                        break;
                    case 2:
                        message.group_id = reader.readInt32();
                        break;
                    case 3:
                        message.keyword = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): TenantQueryRequest {
            return TenantQueryRequest.deserialize(bytes);
        }
    }
    export class TenantQueryResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            batch?: dependency_6.api.common.Batch;
            group_id?: number;
            keyword?: string;
            tenant_item?: TenantItem[];
            total?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [4], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("batch" in data && data.batch != undefined) {
                    this.batch = data.batch;
                }
                if ("group_id" in data && data.group_id != undefined) {
                    this.group_id = data.group_id;
                }
                if ("keyword" in data && data.keyword != undefined) {
                    this.keyword = data.keyword;
                }
                if ("tenant_item" in data && data.tenant_item != undefined) {
                    this.tenant_item = data.tenant_item;
                }
                if ("total" in data && data.total != undefined) {
                    this.total = data.total;
                }
            }
        }
        get batch() {
            return pb_1.Message.getWrapperField(this, dependency_6.api.common.Batch, 1) as dependency_6.api.common.Batch;
        }
        set batch(value: dependency_6.api.common.Batch) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_batch() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get group_id() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set group_id(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get keyword() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set keyword(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get tenant_item() {
            return pb_1.Message.getRepeatedWrapperField(this, TenantItem, 4) as TenantItem[];
        }
        set tenant_item(value: TenantItem[]) {
            pb_1.Message.setRepeatedWrapperField(this, 4, value);
        }
        get total() {
            return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
        }
        set total(value: number) {
            pb_1.Message.setField(this, 5, value);
        }
        static fromObject(data: {
            batch?: ReturnType<typeof dependency_6.api.common.Batch.prototype.toObject>;
            group_id?: number;
            keyword?: string;
            tenant_item?: ReturnType<typeof TenantItem.prototype.toObject>[];
            total?: number;
        }): TenantQueryResponse {
            const message = new TenantQueryResponse({});
            if (data.batch != null) {
                message.batch = dependency_6.api.common.Batch.fromObject(data.batch);
            }
            if (data.group_id != null) {
                message.group_id = data.group_id;
            }
            if (data.keyword != null) {
                message.keyword = data.keyword;
            }
            if (data.tenant_item != null) {
                message.tenant_item = data.tenant_item.map(item => TenantItem.fromObject(item));
            }
            if (data.total != null) {
                message.total = data.total;
            }
            return message;
        }
        toObject() {
            const data: {
                batch?: ReturnType<typeof dependency_6.api.common.Batch.prototype.toObject>;
                group_id?: number;
                keyword?: string;
                tenant_item?: ReturnType<typeof TenantItem.prototype.toObject>[];
                total?: number;
            } = {};
            if (this.batch != null) {
                data.batch = this.batch.toObject();
            }
            if (this.group_id != null) {
                data.group_id = this.group_id;
            }
            if (this.keyword != null) {
                data.keyword = this.keyword;
            }
            if (this.tenant_item != null) {
                data.tenant_item = this.tenant_item.map((item: TenantItem) => item.toObject());
            }
            if (this.total != null) {
                data.total = this.total;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_batch)
                writer.writeMessage(1, this.batch, () => this.batch.serialize(writer));
            if (this.group_id != 0)
                writer.writeInt32(2, this.group_id);
            if (this.keyword.length)
                writer.writeString(3, this.keyword);
            if (this.tenant_item.length)
                writer.writeRepeatedMessage(4, this.tenant_item, (item: TenantItem) => item.serialize(writer));
            if (this.total != 0)
                writer.writeInt32(5, this.total);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): TenantQueryResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new TenantQueryResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.batch, () => message.batch = dependency_6.api.common.Batch.deserialize(reader));
                        break;
                    case 2:
                        message.group_id = reader.readInt32();
                        break;
                    case 3:
                        message.keyword = reader.readString();
                        break;
                    case 4:
                        reader.readMessage(message.tenant_item, () => pb_1.Message.addToRepeatedWrapperField(message, 4, TenantItem.deserialize(reader), TenantItem));
                        break;
                    case 5:
                        message.total = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): TenantQueryResponse {
            return TenantQueryResponse.deserialize(bytes);
        }
    }
    export class DeleteTenantRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            tenant_id?: number;
            password?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("tenant_id" in data && data.tenant_id != undefined) {
                    this.tenant_id = data.tenant_id;
                }
                if ("password" in data && data.password != undefined) {
                    this.password = data.password;
                }
            }
        }
        get tenant_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set tenant_id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get password() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set password(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            tenant_id?: number;
            password?: string;
        }): DeleteTenantRequest {
            const message = new DeleteTenantRequest({});
            if (data.tenant_id != null) {
                message.tenant_id = data.tenant_id;
            }
            if (data.password != null) {
                message.password = data.password;
            }
            return message;
        }
        toObject() {
            const data: {
                tenant_id?: number;
                password?: string;
            } = {};
            if (this.tenant_id != null) {
                data.tenant_id = this.tenant_id;
            }
            if (this.password != null) {
                data.password = this.password;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.tenant_id != 0)
                writer.writeUint32(1, this.tenant_id);
            if (this.password.length)
                writer.writeString(2, this.password);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DeleteTenantRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DeleteTenantRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.tenant_id = reader.readUint32();
                        break;
                    case 2:
                        message.password = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): DeleteTenantRequest {
            return DeleteTenantRequest.deserialize(bytes);
        }
    }
    export class TenantItem extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            tenant_id?: number;
            tenant_public_key?: string;
            name?: string;
            workers_capacity?: number;
            daily_service_capacity?: number;
            entrance_num?: number;
            user_name?: string;
            average_monthly?: number;
            cumulative_volume?: number;
            password?: string;
            create_at?: dependency_3.google.protobuf.Timestamp;
            delete_at?: dependency_3.google.protobuf.Timestamp;
            group_name?: string;
            clique_Id?: number;
            api_enabled?: boolean;
            api_faq_url?: string;
            api_request_url?: string;
            api_name?: string;
            api_pwd?: string;
            api_pubKey?: string;
            api_recharge_request_url?: string;
            line_group_id?: number;
            h5_line?: string;
            background_line?: string;
            line_group?: dependency_8.api.common.TenantsLineGroup;
            update_at?: dependency_3.google.protobuf.Timestamp;
            h5_domain_cert?: string;
            remark?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("tenant_id" in data && data.tenant_id != undefined) {
                    this.tenant_id = data.tenant_id;
                }
                if ("tenant_public_key" in data && data.tenant_public_key != undefined) {
                    this.tenant_public_key = data.tenant_public_key;
                }
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
                if ("workers_capacity" in data && data.workers_capacity != undefined) {
                    this.workers_capacity = data.workers_capacity;
                }
                if ("daily_service_capacity" in data && data.daily_service_capacity != undefined) {
                    this.daily_service_capacity = data.daily_service_capacity;
                }
                if ("entrance_num" in data && data.entrance_num != undefined) {
                    this.entrance_num = data.entrance_num;
                }
                if ("user_name" in data && data.user_name != undefined) {
                    this.user_name = data.user_name;
                }
                if ("average_monthly" in data && data.average_monthly != undefined) {
                    this.average_monthly = data.average_monthly;
                }
                if ("cumulative_volume" in data && data.cumulative_volume != undefined) {
                    this.cumulative_volume = data.cumulative_volume;
                }
                if ("password" in data && data.password != undefined) {
                    this.password = data.password;
                }
                if ("create_at" in data && data.create_at != undefined) {
                    this.create_at = data.create_at;
                }
                if ("delete_at" in data && data.delete_at != undefined) {
                    this.delete_at = data.delete_at;
                }
                if ("group_name" in data && data.group_name != undefined) {
                    this.group_name = data.group_name;
                }
                if ("clique_Id" in data && data.clique_Id != undefined) {
                    this.clique_Id = data.clique_Id;
                }
                if ("api_enabled" in data && data.api_enabled != undefined) {
                    this.api_enabled = data.api_enabled;
                }
                if ("api_faq_url" in data && data.api_faq_url != undefined) {
                    this.api_faq_url = data.api_faq_url;
                }
                if ("api_request_url" in data && data.api_request_url != undefined) {
                    this.api_request_url = data.api_request_url;
                }
                if ("api_name" in data && data.api_name != undefined) {
                    this.api_name = data.api_name;
                }
                if ("api_pwd" in data && data.api_pwd != undefined) {
                    this.api_pwd = data.api_pwd;
                }
                if ("api_pubKey" in data && data.api_pubKey != undefined) {
                    this.api_pubKey = data.api_pubKey;
                }
                if ("api_recharge_request_url" in data && data.api_recharge_request_url != undefined) {
                    this.api_recharge_request_url = data.api_recharge_request_url;
                }
                if ("line_group_id" in data && data.line_group_id != undefined) {
                    this.line_group_id = data.line_group_id;
                }
                if ("h5_line" in data && data.h5_line != undefined) {
                    this.h5_line = data.h5_line;
                }
                if ("background_line" in data && data.background_line != undefined) {
                    this.background_line = data.background_line;
                }
                if ("line_group" in data && data.line_group != undefined) {
                    this.line_group = data.line_group;
                }
                if ("update_at" in data && data.update_at != undefined) {
                    this.update_at = data.update_at;
                }
                if ("h5_domain_cert" in data && data.h5_domain_cert != undefined) {
                    this.h5_domain_cert = data.h5_domain_cert;
                }
                if ("remark" in data && data.remark != undefined) {
                    this.remark = data.remark;
                }
            }
        }
        get tenant_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set tenant_id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get tenant_public_key() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set tenant_public_key(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get name() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get workers_capacity() {
            return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
        }
        set workers_capacity(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        get daily_service_capacity() {
            return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
        }
        set daily_service_capacity(value: number) {
            pb_1.Message.setField(this, 5, value);
        }
        get entrance_num() {
            return pb_1.Message.getFieldWithDefault(this, 6, 0) as number;
        }
        set entrance_num(value: number) {
            pb_1.Message.setField(this, 6, value);
        }
        get user_name() {
            return pb_1.Message.getFieldWithDefault(this, 7, "") as string;
        }
        set user_name(value: string) {
            pb_1.Message.setField(this, 7, value);
        }
        get average_monthly() {
            return pb_1.Message.getFieldWithDefault(this, 8, 0) as number;
        }
        set average_monthly(value: number) {
            pb_1.Message.setField(this, 8, value);
        }
        get cumulative_volume() {
            return pb_1.Message.getFieldWithDefault(this, 9, 0) as number;
        }
        set cumulative_volume(value: number) {
            pb_1.Message.setField(this, 9, value);
        }
        get password() {
            return pb_1.Message.getFieldWithDefault(this, 10, "") as string;
        }
        set password(value: string) {
            pb_1.Message.setField(this, 10, value);
        }
        get create_at() {
            return pb_1.Message.getWrapperField(this, dependency_3.google.protobuf.Timestamp, 11) as dependency_3.google.protobuf.Timestamp;
        }
        set create_at(value: dependency_3.google.protobuf.Timestamp) {
            pb_1.Message.setWrapperField(this, 11, value);
        }
        get has_create_at() {
            return pb_1.Message.getField(this, 11) != null;
        }
        get delete_at() {
            return pb_1.Message.getWrapperField(this, dependency_3.google.protobuf.Timestamp, 12) as dependency_3.google.protobuf.Timestamp;
        }
        set delete_at(value: dependency_3.google.protobuf.Timestamp) {
            pb_1.Message.setWrapperField(this, 12, value);
        }
        get has_delete_at() {
            return pb_1.Message.getField(this, 12) != null;
        }
        get group_name() {
            return pb_1.Message.getFieldWithDefault(this, 13, "") as string;
        }
        set group_name(value: string) {
            pb_1.Message.setField(this, 13, value);
        }
        get clique_Id() {
            return pb_1.Message.getFieldWithDefault(this, 14, 0) as number;
        }
        set clique_Id(value: number) {
            pb_1.Message.setField(this, 14, value);
        }
        get api_enabled() {
            return pb_1.Message.getFieldWithDefault(this, 40, false) as boolean;
        }
        set api_enabled(value: boolean) {
            pb_1.Message.setField(this, 40, value);
        }
        get api_faq_url() {
            return pb_1.Message.getFieldWithDefault(this, 41, "") as string;
        }
        set api_faq_url(value: string) {
            pb_1.Message.setField(this, 41, value);
        }
        get api_request_url() {
            return pb_1.Message.getFieldWithDefault(this, 15, "") as string;
        }
        set api_request_url(value: string) {
            pb_1.Message.setField(this, 15, value);
        }
        get api_name() {
            return pb_1.Message.getFieldWithDefault(this, 16, "") as string;
        }
        set api_name(value: string) {
            pb_1.Message.setField(this, 16, value);
        }
        get api_pwd() {
            return pb_1.Message.getFieldWithDefault(this, 17, "") as string;
        }
        set api_pwd(value: string) {
            pb_1.Message.setField(this, 17, value);
        }
        get api_pubKey() {
            return pb_1.Message.getFieldWithDefault(this, 18, "") as string;
        }
        set api_pubKey(value: string) {
            pb_1.Message.setField(this, 18, value);
        }
        get api_recharge_request_url() {
            return pb_1.Message.getFieldWithDefault(this, 19, "") as string;
        }
        set api_recharge_request_url(value: string) {
            pb_1.Message.setField(this, 19, value);
        }
        get line_group_id() {
            return pb_1.Message.getFieldWithDefault(this, 20, 0) as number;
        }
        set line_group_id(value: number) {
            pb_1.Message.setField(this, 20, value);
        }
        get h5_line() {
            return pb_1.Message.getFieldWithDefault(this, 21, "") as string;
        }
        set h5_line(value: string) {
            pb_1.Message.setField(this, 21, value);
        }
        get background_line() {
            return pb_1.Message.getFieldWithDefault(this, 22, "") as string;
        }
        set background_line(value: string) {
            pb_1.Message.setField(this, 22, value);
        }
        get line_group() {
            return pb_1.Message.getWrapperField(this, dependency_8.api.common.TenantsLineGroup, 23) as dependency_8.api.common.TenantsLineGroup;
        }
        set line_group(value: dependency_8.api.common.TenantsLineGroup) {
            pb_1.Message.setWrapperField(this, 23, value);
        }
        get has_line_group() {
            return pb_1.Message.getField(this, 23) != null;
        }
        get update_at() {
            return pb_1.Message.getWrapperField(this, dependency_3.google.protobuf.Timestamp, 24) as dependency_3.google.protobuf.Timestamp;
        }
        set update_at(value: dependency_3.google.protobuf.Timestamp) {
            pb_1.Message.setWrapperField(this, 24, value);
        }
        get has_update_at() {
            return pb_1.Message.getField(this, 24) != null;
        }
        get h5_domain_cert() {
            return pb_1.Message.getFieldWithDefault(this, 25, "") as string;
        }
        set h5_domain_cert(value: string) {
            pb_1.Message.setField(this, 25, value);
        }
        get remark() {
            return pb_1.Message.getFieldWithDefault(this, 26, "") as string;
        }
        set remark(value: string) {
            pb_1.Message.setField(this, 26, value);
        }
        static fromObject(data: {
            tenant_id?: number;
            tenant_public_key?: string;
            name?: string;
            workers_capacity?: number;
            daily_service_capacity?: number;
            entrance_num?: number;
            user_name?: string;
            average_monthly?: number;
            cumulative_volume?: number;
            password?: string;
            create_at?: ReturnType<typeof dependency_3.google.protobuf.Timestamp.prototype.toObject>;
            delete_at?: ReturnType<typeof dependency_3.google.protobuf.Timestamp.prototype.toObject>;
            group_name?: string;
            clique_Id?: number;
            api_enabled?: boolean;
            api_faq_url?: string;
            api_request_url?: string;
            api_name?: string;
            api_pwd?: string;
            api_pubKey?: string;
            api_recharge_request_url?: string;
            line_group_id?: number;
            h5_line?: string;
            background_line?: string;
            line_group?: ReturnType<typeof dependency_8.api.common.TenantsLineGroup.prototype.toObject>;
            update_at?: ReturnType<typeof dependency_3.google.protobuf.Timestamp.prototype.toObject>;
            h5_domain_cert?: string;
            remark?: string;
        }): TenantItem {
            const message = new TenantItem({});
            if (data.tenant_id != null) {
                message.tenant_id = data.tenant_id;
            }
            if (data.tenant_public_key != null) {
                message.tenant_public_key = data.tenant_public_key;
            }
            if (data.name != null) {
                message.name = data.name;
            }
            if (data.workers_capacity != null) {
                message.workers_capacity = data.workers_capacity;
            }
            if (data.daily_service_capacity != null) {
                message.daily_service_capacity = data.daily_service_capacity;
            }
            if (data.entrance_num != null) {
                message.entrance_num = data.entrance_num;
            }
            if (data.user_name != null) {
                message.user_name = data.user_name;
            }
            if (data.average_monthly != null) {
                message.average_monthly = data.average_monthly;
            }
            if (data.cumulative_volume != null) {
                message.cumulative_volume = data.cumulative_volume;
            }
            if (data.password != null) {
                message.password = data.password;
            }
            if (data.create_at != null) {
                message.create_at = dependency_3.google.protobuf.Timestamp.fromObject(data.create_at);
            }
            if (data.delete_at != null) {
                message.delete_at = dependency_3.google.protobuf.Timestamp.fromObject(data.delete_at);
            }
            if (data.group_name != null) {
                message.group_name = data.group_name;
            }
            if (data.clique_Id != null) {
                message.clique_Id = data.clique_Id;
            }
            if (data.api_enabled != null) {
                message.api_enabled = data.api_enabled;
            }
            if (data.api_faq_url != null) {
                message.api_faq_url = data.api_faq_url;
            }
            if (data.api_request_url != null) {
                message.api_request_url = data.api_request_url;
            }
            if (data.api_name != null) {
                message.api_name = data.api_name;
            }
            if (data.api_pwd != null) {
                message.api_pwd = data.api_pwd;
            }
            if (data.api_pubKey != null) {
                message.api_pubKey = data.api_pubKey;
            }
            if (data.api_recharge_request_url != null) {
                message.api_recharge_request_url = data.api_recharge_request_url;
            }
            if (data.line_group_id != null) {
                message.line_group_id = data.line_group_id;
            }
            if (data.h5_line != null) {
                message.h5_line = data.h5_line;
            }
            if (data.background_line != null) {
                message.background_line = data.background_line;
            }
            if (data.line_group != null) {
                message.line_group = dependency_8.api.common.TenantsLineGroup.fromObject(data.line_group);
            }
            if (data.update_at != null) {
                message.update_at = dependency_3.google.protobuf.Timestamp.fromObject(data.update_at);
            }
            if (data.h5_domain_cert != null) {
                message.h5_domain_cert = data.h5_domain_cert;
            }
            if (data.remark != null) {
                message.remark = data.remark;
            }
            return message;
        }
        toObject() {
            const data: {
                tenant_id?: number;
                tenant_public_key?: string;
                name?: string;
                workers_capacity?: number;
                daily_service_capacity?: number;
                entrance_num?: number;
                user_name?: string;
                average_monthly?: number;
                cumulative_volume?: number;
                password?: string;
                create_at?: ReturnType<typeof dependency_3.google.protobuf.Timestamp.prototype.toObject>;
                delete_at?: ReturnType<typeof dependency_3.google.protobuf.Timestamp.prototype.toObject>;
                group_name?: string;
                clique_Id?: number;
                api_enabled?: boolean;
                api_faq_url?: string;
                api_request_url?: string;
                api_name?: string;
                api_pwd?: string;
                api_pubKey?: string;
                api_recharge_request_url?: string;
                line_group_id?: number;
                h5_line?: string;
                background_line?: string;
                line_group?: ReturnType<typeof dependency_8.api.common.TenantsLineGroup.prototype.toObject>;
                update_at?: ReturnType<typeof dependency_3.google.protobuf.Timestamp.prototype.toObject>;
                h5_domain_cert?: string;
                remark?: string;
            } = {};
            if (this.tenant_id != null) {
                data.tenant_id = this.tenant_id;
            }
            if (this.tenant_public_key != null) {
                data.tenant_public_key = this.tenant_public_key;
            }
            if (this.name != null) {
                data.name = this.name;
            }
            if (this.workers_capacity != null) {
                data.workers_capacity = this.workers_capacity;
            }
            if (this.daily_service_capacity != null) {
                data.daily_service_capacity = this.daily_service_capacity;
            }
            if (this.entrance_num != null) {
                data.entrance_num = this.entrance_num;
            }
            if (this.user_name != null) {
                data.user_name = this.user_name;
            }
            if (this.average_monthly != null) {
                data.average_monthly = this.average_monthly;
            }
            if (this.cumulative_volume != null) {
                data.cumulative_volume = this.cumulative_volume;
            }
            if (this.password != null) {
                data.password = this.password;
            }
            if (this.create_at != null) {
                data.create_at = this.create_at.toObject();
            }
            if (this.delete_at != null) {
                data.delete_at = this.delete_at.toObject();
            }
            if (this.group_name != null) {
                data.group_name = this.group_name;
            }
            if (this.clique_Id != null) {
                data.clique_Id = this.clique_Id;
            }
            if (this.api_enabled != null) {
                data.api_enabled = this.api_enabled;
            }
            if (this.api_faq_url != null) {
                data.api_faq_url = this.api_faq_url;
            }
            if (this.api_request_url != null) {
                data.api_request_url = this.api_request_url;
            }
            if (this.api_name != null) {
                data.api_name = this.api_name;
            }
            if (this.api_pwd != null) {
                data.api_pwd = this.api_pwd;
            }
            if (this.api_pubKey != null) {
                data.api_pubKey = this.api_pubKey;
            }
            if (this.api_recharge_request_url != null) {
                data.api_recharge_request_url = this.api_recharge_request_url;
            }
            if (this.line_group_id != null) {
                data.line_group_id = this.line_group_id;
            }
            if (this.h5_line != null) {
                data.h5_line = this.h5_line;
            }
            if (this.background_line != null) {
                data.background_line = this.background_line;
            }
            if (this.line_group != null) {
                data.line_group = this.line_group.toObject();
            }
            if (this.update_at != null) {
                data.update_at = this.update_at.toObject();
            }
            if (this.h5_domain_cert != null) {
                data.h5_domain_cert = this.h5_domain_cert;
            }
            if (this.remark != null) {
                data.remark = this.remark;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.tenant_id != 0)
                writer.writeUint32(1, this.tenant_id);
            if (this.tenant_public_key.length)
                writer.writeString(2, this.tenant_public_key);
            if (this.name.length)
                writer.writeString(3, this.name);
            if (this.workers_capacity != 0)
                writer.writeInt32(4, this.workers_capacity);
            if (this.daily_service_capacity != 0)
                writer.writeInt32(5, this.daily_service_capacity);
            if (this.entrance_num != 0)
                writer.writeInt32(6, this.entrance_num);
            if (this.user_name.length)
                writer.writeString(7, this.user_name);
            if (this.average_monthly != 0)
                writer.writeInt32(8, this.average_monthly);
            if (this.cumulative_volume != 0)
                writer.writeInt32(9, this.cumulative_volume);
            if (this.password.length)
                writer.writeString(10, this.password);
            if (this.has_create_at)
                writer.writeMessage(11, this.create_at, () => this.create_at.serialize(writer));
            if (this.has_delete_at)
                writer.writeMessage(12, this.delete_at, () => this.delete_at.serialize(writer));
            if (this.group_name.length)
                writer.writeString(13, this.group_name);
            if (this.clique_Id != 0)
                writer.writeInt32(14, this.clique_Id);
            if (this.api_enabled != false)
                writer.writeBool(40, this.api_enabled);
            if (this.api_faq_url.length)
                writer.writeString(41, this.api_faq_url);
            if (this.api_request_url.length)
                writer.writeString(15, this.api_request_url);
            if (this.api_name.length)
                writer.writeString(16, this.api_name);
            if (this.api_pwd.length)
                writer.writeString(17, this.api_pwd);
            if (this.api_pubKey.length)
                writer.writeString(18, this.api_pubKey);
            if (this.api_recharge_request_url.length)
                writer.writeString(19, this.api_recharge_request_url);
            if (this.line_group_id != 0)
                writer.writeInt32(20, this.line_group_id);
            if (this.h5_line.length)
                writer.writeString(21, this.h5_line);
            if (this.background_line.length)
                writer.writeString(22, this.background_line);
            if (this.has_line_group)
                writer.writeMessage(23, this.line_group, () => this.line_group.serialize(writer));
            if (this.has_update_at)
                writer.writeMessage(24, this.update_at, () => this.update_at.serialize(writer));
            if (this.h5_domain_cert.length)
                writer.writeString(25, this.h5_domain_cert);
            if (this.remark.length)
                writer.writeString(26, this.remark);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): TenantItem {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new TenantItem();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.tenant_id = reader.readUint32();
                        break;
                    case 2:
                        message.tenant_public_key = reader.readString();
                        break;
                    case 3:
                        message.name = reader.readString();
                        break;
                    case 4:
                        message.workers_capacity = reader.readInt32();
                        break;
                    case 5:
                        message.daily_service_capacity = reader.readInt32();
                        break;
                    case 6:
                        message.entrance_num = reader.readInt32();
                        break;
                    case 7:
                        message.user_name = reader.readString();
                        break;
                    case 8:
                        message.average_monthly = reader.readInt32();
                        break;
                    case 9:
                        message.cumulative_volume = reader.readInt32();
                        break;
                    case 10:
                        message.password = reader.readString();
                        break;
                    case 11:
                        reader.readMessage(message.create_at, () => message.create_at = dependency_3.google.protobuf.Timestamp.deserialize(reader));
                        break;
                    case 12:
                        reader.readMessage(message.delete_at, () => message.delete_at = dependency_3.google.protobuf.Timestamp.deserialize(reader));
                        break;
                    case 13:
                        message.group_name = reader.readString();
                        break;
                    case 14:
                        message.clique_Id = reader.readInt32();
                        break;
                    case 40:
                        message.api_enabled = reader.readBool();
                        break;
                    case 41:
                        message.api_faq_url = reader.readString();
                        break;
                    case 15:
                        message.api_request_url = reader.readString();
                        break;
                    case 16:
                        message.api_name = reader.readString();
                        break;
                    case 17:
                        message.api_pwd = reader.readString();
                        break;
                    case 18:
                        message.api_pubKey = reader.readString();
                        break;
                    case 19:
                        message.api_recharge_request_url = reader.readString();
                        break;
                    case 20:
                        message.line_group_id = reader.readInt32();
                        break;
                    case 21:
                        message.h5_line = reader.readString();
                        break;
                    case 22:
                        message.background_line = reader.readString();
                        break;
                    case 23:
                        reader.readMessage(message.line_group, () => message.line_group = dependency_8.api.common.TenantsLineGroup.deserialize(reader));
                        break;
                    case 24:
                        reader.readMessage(message.update_at, () => message.update_at = dependency_3.google.protobuf.Timestamp.deserialize(reader));
                        break;
                    case 25:
                        message.h5_domain_cert = reader.readString();
                        break;
                    case 26:
                        message.remark = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): TenantItem {
            return TenantItem.deserialize(bytes);
        }
    }
    export class AdminLoginRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            account?: string;
            password?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("account" in data && data.account != undefined) {
                    this.account = data.account;
                }
                if ("password" in data && data.password != undefined) {
                    this.password = data.password;
                }
            }
        }
        get account() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set account(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get password() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set password(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            account?: string;
            password?: string;
        }): AdminLoginRequest {
            const message = new AdminLoginRequest({});
            if (data.account != null) {
                message.account = data.account;
            }
            if (data.password != null) {
                message.password = data.password;
            }
            return message;
        }
        toObject() {
            const data: {
                account?: string;
                password?: string;
            } = {};
            if (this.account != null) {
                data.account = this.account;
            }
            if (this.password != null) {
                data.password = this.password;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.account.length)
                writer.writeString(1, this.account);
            if (this.password.length)
                writer.writeString(2, this.password);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): AdminLoginRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new AdminLoginRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.account = reader.readString();
                        break;
                    case 2:
                        message.password = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): AdminLoginRequest {
            return AdminLoginRequest.deserialize(bytes);
        }
    }
    export class AdminLoginResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            token?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("token" in data && data.token != undefined) {
                    this.token = data.token;
                }
            }
        }
        get token() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set token(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            token?: string;
        }): AdminLoginResponse {
            const message = new AdminLoginResponse({});
            if (data.token != null) {
                message.token = data.token;
            }
            return message;
        }
        toObject() {
            const data: {
                token?: string;
            } = {};
            if (this.token != null) {
                data.token = this.token;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.token.length)
                writer.writeString(1, this.token);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): AdminLoginResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new AdminLoginResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.token = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): AdminLoginResponse {
            return AdminLoginResponse.deserialize(bytes);
        }
    }
    export class UpdateTenantRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            tenant_id?: number;
            name?: string;
            worker_capacity?: number;
            daily_service_capacity?: number;
            password?: string;
            clique_id?: number;
            nimprex?: string;
            line_group_id?: number;
            h5_line?: string;
            background_line?: string;
            remark?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("tenant_id" in data && data.tenant_id != undefined) {
                    this.tenant_id = data.tenant_id;
                }
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
                if ("worker_capacity" in data && data.worker_capacity != undefined) {
                    this.worker_capacity = data.worker_capacity;
                }
                if ("daily_service_capacity" in data && data.daily_service_capacity != undefined) {
                    this.daily_service_capacity = data.daily_service_capacity;
                }
                if ("password" in data && data.password != undefined) {
                    this.password = data.password;
                }
                if ("clique_id" in data && data.clique_id != undefined) {
                    this.clique_id = data.clique_id;
                }
                if ("nimprex" in data && data.nimprex != undefined) {
                    this.nimprex = data.nimprex;
                }
                if ("line_group_id" in data && data.line_group_id != undefined) {
                    this.line_group_id = data.line_group_id;
                }
                if ("h5_line" in data && data.h5_line != undefined) {
                    this.h5_line = data.h5_line;
                }
                if ("background_line" in data && data.background_line != undefined) {
                    this.background_line = data.background_line;
                }
                if ("remark" in data && data.remark != undefined) {
                    this.remark = data.remark;
                }
            }
        }
        get tenant_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set tenant_id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get name() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get worker_capacity() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set worker_capacity(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        get daily_service_capacity() {
            return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
        }
        set daily_service_capacity(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        get password() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set password(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        get clique_id() {
            return pb_1.Message.getFieldWithDefault(this, 6, 0) as number;
        }
        set clique_id(value: number) {
            pb_1.Message.setField(this, 6, value);
        }
        get nimprex() {
            return pb_1.Message.getFieldWithDefault(this, 7, "") as string;
        }
        set nimprex(value: string) {
            pb_1.Message.setField(this, 7, value);
        }
        get line_group_id() {
            return pb_1.Message.getFieldWithDefault(this, 8, 0) as number;
        }
        set line_group_id(value: number) {
            pb_1.Message.setField(this, 8, value);
        }
        get h5_line() {
            return pb_1.Message.getFieldWithDefault(this, 9, "") as string;
        }
        set h5_line(value: string) {
            pb_1.Message.setField(this, 9, value);
        }
        get background_line() {
            return pb_1.Message.getFieldWithDefault(this, 10, "") as string;
        }
        set background_line(value: string) {
            pb_1.Message.setField(this, 10, value);
        }
        get remark() {
            return pb_1.Message.getFieldWithDefault(this, 11, "") as string;
        }
        set remark(value: string) {
            pb_1.Message.setField(this, 11, value);
        }
        static fromObject(data: {
            tenant_id?: number;
            name?: string;
            worker_capacity?: number;
            daily_service_capacity?: number;
            password?: string;
            clique_id?: number;
            nimprex?: string;
            line_group_id?: number;
            h5_line?: string;
            background_line?: string;
            remark?: string;
        }): UpdateTenantRequest {
            const message = new UpdateTenantRequest({});
            if (data.tenant_id != null) {
                message.tenant_id = data.tenant_id;
            }
            if (data.name != null) {
                message.name = data.name;
            }
            if (data.worker_capacity != null) {
                message.worker_capacity = data.worker_capacity;
            }
            if (data.daily_service_capacity != null) {
                message.daily_service_capacity = data.daily_service_capacity;
            }
            if (data.password != null) {
                message.password = data.password;
            }
            if (data.clique_id != null) {
                message.clique_id = data.clique_id;
            }
            if (data.nimprex != null) {
                message.nimprex = data.nimprex;
            }
            if (data.line_group_id != null) {
                message.line_group_id = data.line_group_id;
            }
            if (data.h5_line != null) {
                message.h5_line = data.h5_line;
            }
            if (data.background_line != null) {
                message.background_line = data.background_line;
            }
            if (data.remark != null) {
                message.remark = data.remark;
            }
            return message;
        }
        toObject() {
            const data: {
                tenant_id?: number;
                name?: string;
                worker_capacity?: number;
                daily_service_capacity?: number;
                password?: string;
                clique_id?: number;
                nimprex?: string;
                line_group_id?: number;
                h5_line?: string;
                background_line?: string;
                remark?: string;
            } = {};
            if (this.tenant_id != null) {
                data.tenant_id = this.tenant_id;
            }
            if (this.name != null) {
                data.name = this.name;
            }
            if (this.worker_capacity != null) {
                data.worker_capacity = this.worker_capacity;
            }
            if (this.daily_service_capacity != null) {
                data.daily_service_capacity = this.daily_service_capacity;
            }
            if (this.password != null) {
                data.password = this.password;
            }
            if (this.clique_id != null) {
                data.clique_id = this.clique_id;
            }
            if (this.nimprex != null) {
                data.nimprex = this.nimprex;
            }
            if (this.line_group_id != null) {
                data.line_group_id = this.line_group_id;
            }
            if (this.h5_line != null) {
                data.h5_line = this.h5_line;
            }
            if (this.background_line != null) {
                data.background_line = this.background_line;
            }
            if (this.remark != null) {
                data.remark = this.remark;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.tenant_id != 0)
                writer.writeUint32(1, this.tenant_id);
            if (this.name.length)
                writer.writeString(2, this.name);
            if (this.worker_capacity != 0)
                writer.writeInt32(3, this.worker_capacity);
            if (this.daily_service_capacity != 0)
                writer.writeInt32(4, this.daily_service_capacity);
            if (this.password.length)
                writer.writeString(5, this.password);
            if (this.clique_id != 0)
                writer.writeInt32(6, this.clique_id);
            if (this.nimprex.length)
                writer.writeString(7, this.nimprex);
            if (this.line_group_id != 0)
                writer.writeInt32(8, this.line_group_id);
            if (this.h5_line.length)
                writer.writeString(9, this.h5_line);
            if (this.background_line.length)
                writer.writeString(10, this.background_line);
            if (this.remark.length)
                writer.writeString(11, this.remark);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): UpdateTenantRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new UpdateTenantRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.tenant_id = reader.readUint32();
                        break;
                    case 2:
                        message.name = reader.readString();
                        break;
                    case 3:
                        message.worker_capacity = reader.readInt32();
                        break;
                    case 4:
                        message.daily_service_capacity = reader.readInt32();
                        break;
                    case 5:
                        message.password = reader.readString();
                        break;
                    case 6:
                        message.clique_id = reader.readInt32();
                        break;
                    case 7:
                        message.nimprex = reader.readString();
                        break;
                    case 8:
                        message.line_group_id = reader.readInt32();
                        break;
                    case 9:
                        message.h5_line = reader.readString();
                        break;
                    case 10:
                        message.background_line = reader.readString();
                        break;
                    case 11:
                        message.remark = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): UpdateTenantRequest {
            return UpdateTenantRequest.deserialize(bytes);
        }
    }
    export class PublicKeyResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            token?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("token" in data && data.token != undefined) {
                    this.token = data.token;
                }
            }
        }
        get token() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set token(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            token?: string;
        }): PublicKeyResponse {
            const message = new PublicKeyResponse({});
            if (data.token != null) {
                message.token = data.token;
            }
            return message;
        }
        toObject() {
            const data: {
                token?: string;
            } = {};
            if (this.token != null) {
                data.token = this.token;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.token.length)
                writer.writeString(1, this.token);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): PublicKeyResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new PublicKeyResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.token = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): PublicKeyResponse {
            return PublicKeyResponse.deserialize(bytes);
        }
    }
    export class QueryTenantInfoResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            item?: TenantItem;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("item" in data && data.item != undefined) {
                    this.item = data.item;
                }
            }
        }
        get item() {
            return pb_1.Message.getWrapperField(this, TenantItem, 1) as TenantItem;
        }
        set item(value: TenantItem) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_item() {
            return pb_1.Message.getField(this, 1) != null;
        }
        static fromObject(data: {
            item?: ReturnType<typeof TenantItem.prototype.toObject>;
        }): QueryTenantInfoResponse {
            const message = new QueryTenantInfoResponse({});
            if (data.item != null) {
                message.item = TenantItem.fromObject(data.item);
            }
            return message;
        }
        toObject() {
            const data: {
                item?: ReturnType<typeof TenantItem.prototype.toObject>;
            } = {};
            if (this.item != null) {
                data.item = this.item.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_item)
                writer.writeMessage(1, this.item, () => this.item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): QueryTenantInfoResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new QueryTenantInfoResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.item, () => message.item = TenantItem.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): QueryTenantInfoResponse {
            return QueryTenantInfoResponse.deserialize(bytes);
        }
    }
    export class UpdateNimInfoRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            workerId?: number;
            nimid?: string;
            nimsession?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("workerId" in data && data.workerId != undefined) {
                    this.workerId = data.workerId;
                }
                if ("nimid" in data && data.nimid != undefined) {
                    this.nimid = data.nimid;
                }
                if ("nimsession" in data && data.nimsession != undefined) {
                    this.nimsession = data.nimsession;
                }
            }
        }
        get workerId() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set workerId(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get nimid() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set nimid(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get nimsession() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set nimsession(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            workerId?: number;
            nimid?: string;
            nimsession?: string;
        }): UpdateNimInfoRequest {
            const message = new UpdateNimInfoRequest({});
            if (data.workerId != null) {
                message.workerId = data.workerId;
            }
            if (data.nimid != null) {
                message.nimid = data.nimid;
            }
            if (data.nimsession != null) {
                message.nimsession = data.nimsession;
            }
            return message;
        }
        toObject() {
            const data: {
                workerId?: number;
                nimid?: string;
                nimsession?: string;
            } = {};
            if (this.workerId != null) {
                data.workerId = this.workerId;
            }
            if (this.nimid != null) {
                data.nimid = this.nimid;
            }
            if (this.nimsession != null) {
                data.nimsession = this.nimsession;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.workerId != 0)
                writer.writeInt32(1, this.workerId);
            if (this.nimid.length)
                writer.writeString(2, this.nimid);
            if (this.nimsession.length)
                writer.writeString(3, this.nimsession);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): UpdateNimInfoRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new UpdateNimInfoRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.workerId = reader.readInt32();
                        break;
                    case 2:
                        message.nimid = reader.readString();
                        break;
                    case 3:
                        message.nimsession = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): UpdateNimInfoRequest {
            return UpdateNimInfoRequest.deserialize(bytes);
        }
    }
    export class VersionRequest extends pb_1.Message {
        #one_of_decls: number[][] = [[1]];
        constructor(data?: any[] | ({
            optype?: dependency_7.api.common.OperationsType;
            softname?: string;
            major_version?: string;
            miner_version?: string;
            force?: boolean;
            download_url?: string;
            plist_url?: string;
            remark?: string;
            status?: number;
        } & (({
            version_id?: number;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("version_id" in data && data.version_id != undefined) {
                    this.version_id = data.version_id;
                }
                if ("optype" in data && data.optype != undefined) {
                    this.optype = data.optype;
                }
                if ("softname" in data && data.softname != undefined) {
                    this.softname = data.softname;
                }
                if ("major_version" in data && data.major_version != undefined) {
                    this.major_version = data.major_version;
                }
                if ("miner_version" in data && data.miner_version != undefined) {
                    this.miner_version = data.miner_version;
                }
                if ("force" in data && data.force != undefined) {
                    this.force = data.force;
                }
                if ("download_url" in data && data.download_url != undefined) {
                    this.download_url = data.download_url;
                }
                if ("plist_url" in data && data.plist_url != undefined) {
                    this.plist_url = data.plist_url;
                }
                if ("remark" in data && data.remark != undefined) {
                    this.remark = data.remark;
                }
                if ("status" in data && data.status != undefined) {
                    this.status = data.status;
                }
            }
        }
        get version_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set version_id(value: number) {
            pb_1.Message.setOneofField(this, 1, this.#one_of_decls[0], value);
        }
        get has_version_id() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get optype() {
            return pb_1.Message.getFieldWithDefault(this, 2, dependency_7.api.common.OperationsType.OPERATION_TYPE_UNKNOWN) as dependency_7.api.common.OperationsType;
        }
        set optype(value: dependency_7.api.common.OperationsType) {
            pb_1.Message.setField(this, 2, value);
        }
        get softname() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set softname(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get major_version() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set major_version(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get miner_version() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set miner_version(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        get force() {
            return pb_1.Message.getFieldWithDefault(this, 6, false) as boolean;
        }
        set force(value: boolean) {
            pb_1.Message.setField(this, 6, value);
        }
        get download_url() {
            return pb_1.Message.getFieldWithDefault(this, 7, "") as string;
        }
        set download_url(value: string) {
            pb_1.Message.setField(this, 7, value);
        }
        get plist_url() {
            return pb_1.Message.getFieldWithDefault(this, 8, "") as string;
        }
        set plist_url(value: string) {
            pb_1.Message.setField(this, 8, value);
        }
        get remark() {
            return pb_1.Message.getFieldWithDefault(this, 9, "") as string;
        }
        set remark(value: string) {
            pb_1.Message.setField(this, 9, value);
        }
        get status() {
            return pb_1.Message.getFieldWithDefault(this, 10, 0) as number;
        }
        set status(value: number) {
            pb_1.Message.setField(this, 10, value);
        }
        get _version_id() {
            const cases: {
                [index: number]: "none" | "version_id";
            } = {
                0: "none",
                1: "version_id"
            };
            return cases[pb_1.Message.computeOneofCase(this, [1])];
        }
        static fromObject(data: {
            version_id?: number;
            optype?: dependency_7.api.common.OperationsType;
            softname?: string;
            major_version?: string;
            miner_version?: string;
            force?: boolean;
            download_url?: string;
            plist_url?: string;
            remark?: string;
            status?: number;
        }): VersionRequest {
            const message = new VersionRequest({});
            if (data.version_id != null) {
                message.version_id = data.version_id;
            }
            if (data.optype != null) {
                message.optype = data.optype;
            }
            if (data.softname != null) {
                message.softname = data.softname;
            }
            if (data.major_version != null) {
                message.major_version = data.major_version;
            }
            if (data.miner_version != null) {
                message.miner_version = data.miner_version;
            }
            if (data.force != null) {
                message.force = data.force;
            }
            if (data.download_url != null) {
                message.download_url = data.download_url;
            }
            if (data.plist_url != null) {
                message.plist_url = data.plist_url;
            }
            if (data.remark != null) {
                message.remark = data.remark;
            }
            if (data.status != null) {
                message.status = data.status;
            }
            return message;
        }
        toObject() {
            const data: {
                version_id?: number;
                optype?: dependency_7.api.common.OperationsType;
                softname?: string;
                major_version?: string;
                miner_version?: string;
                force?: boolean;
                download_url?: string;
                plist_url?: string;
                remark?: string;
                status?: number;
            } = {};
            if (this.version_id != null) {
                data.version_id = this.version_id;
            }
            if (this.optype != null) {
                data.optype = this.optype;
            }
            if (this.softname != null) {
                data.softname = this.softname;
            }
            if (this.major_version != null) {
                data.major_version = this.major_version;
            }
            if (this.miner_version != null) {
                data.miner_version = this.miner_version;
            }
            if (this.force != null) {
                data.force = this.force;
            }
            if (this.download_url != null) {
                data.download_url = this.download_url;
            }
            if (this.plist_url != null) {
                data.plist_url = this.plist_url;
            }
            if (this.remark != null) {
                data.remark = this.remark;
            }
            if (this.status != null) {
                data.status = this.status;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_version_id)
                writer.writeInt32(1, this.version_id);
            if (this.optype != dependency_7.api.common.OperationsType.OPERATION_TYPE_UNKNOWN)
                writer.writeEnum(2, this.optype);
            if (this.softname.length)
                writer.writeString(3, this.softname);
            if (this.major_version.length)
                writer.writeString(4, this.major_version);
            if (this.miner_version.length)
                writer.writeString(5, this.miner_version);
            if (this.force != false)
                writer.writeBool(6, this.force);
            if (this.download_url.length)
                writer.writeString(7, this.download_url);
            if (this.plist_url.length)
                writer.writeString(8, this.plist_url);
            if (this.remark.length)
                writer.writeString(9, this.remark);
            if (this.status != 0)
                writer.writeInt32(10, this.status);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): VersionRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new VersionRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.version_id = reader.readInt32();
                        break;
                    case 2:
                        message.optype = reader.readEnum();
                        break;
                    case 3:
                        message.softname = reader.readString();
                        break;
                    case 4:
                        message.major_version = reader.readString();
                        break;
                    case 5:
                        message.miner_version = reader.readString();
                        break;
                    case 6:
                        message.force = reader.readBool();
                        break;
                    case 7:
                        message.download_url = reader.readString();
                        break;
                    case 8:
                        message.plist_url = reader.readString();
                        break;
                    case 9:
                        message.remark = reader.readString();
                        break;
                    case 10:
                        message.status = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): VersionRequest {
            return VersionRequest.deserialize(bytes);
        }
    }
    export class VersionResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            version_id?: number;
            optype?: dependency_7.api.common.OperationsType;
            softname?: string;
            major_version?: string;
            miner_version?: string;
            force?: boolean;
            download_url?: string;
            plist_url?: string;
            remark?: string;
            create_at?: dependency_3.google.protobuf.Timestamp;
            update_at?: dependency_3.google.protobuf.Timestamp;
            status?: number;
            operator?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("version_id" in data && data.version_id != undefined) {
                    this.version_id = data.version_id;
                }
                if ("optype" in data && data.optype != undefined) {
                    this.optype = data.optype;
                }
                if ("softname" in data && data.softname != undefined) {
                    this.softname = data.softname;
                }
                if ("major_version" in data && data.major_version != undefined) {
                    this.major_version = data.major_version;
                }
                if ("miner_version" in data && data.miner_version != undefined) {
                    this.miner_version = data.miner_version;
                }
                if ("force" in data && data.force != undefined) {
                    this.force = data.force;
                }
                if ("download_url" in data && data.download_url != undefined) {
                    this.download_url = data.download_url;
                }
                if ("plist_url" in data && data.plist_url != undefined) {
                    this.plist_url = data.plist_url;
                }
                if ("remark" in data && data.remark != undefined) {
                    this.remark = data.remark;
                }
                if ("create_at" in data && data.create_at != undefined) {
                    this.create_at = data.create_at;
                }
                if ("update_at" in data && data.update_at != undefined) {
                    this.update_at = data.update_at;
                }
                if ("status" in data && data.status != undefined) {
                    this.status = data.status;
                }
                if ("operator" in data && data.operator != undefined) {
                    this.operator = data.operator;
                }
            }
        }
        get version_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set version_id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get optype() {
            return pb_1.Message.getFieldWithDefault(this, 2, dependency_7.api.common.OperationsType.OPERATION_TYPE_UNKNOWN) as dependency_7.api.common.OperationsType;
        }
        set optype(value: dependency_7.api.common.OperationsType) {
            pb_1.Message.setField(this, 2, value);
        }
        get softname() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set softname(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get major_version() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set major_version(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get miner_version() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set miner_version(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        get force() {
            return pb_1.Message.getFieldWithDefault(this, 6, false) as boolean;
        }
        set force(value: boolean) {
            pb_1.Message.setField(this, 6, value);
        }
        get download_url() {
            return pb_1.Message.getFieldWithDefault(this, 7, "") as string;
        }
        set download_url(value: string) {
            pb_1.Message.setField(this, 7, value);
        }
        get plist_url() {
            return pb_1.Message.getFieldWithDefault(this, 8, "") as string;
        }
        set plist_url(value: string) {
            pb_1.Message.setField(this, 8, value);
        }
        get remark() {
            return pb_1.Message.getFieldWithDefault(this, 9, "") as string;
        }
        set remark(value: string) {
            pb_1.Message.setField(this, 9, value);
        }
        get create_at() {
            return pb_1.Message.getWrapperField(this, dependency_3.google.protobuf.Timestamp, 10) as dependency_3.google.protobuf.Timestamp;
        }
        set create_at(value: dependency_3.google.protobuf.Timestamp) {
            pb_1.Message.setWrapperField(this, 10, value);
        }
        get has_create_at() {
            return pb_1.Message.getField(this, 10) != null;
        }
        get update_at() {
            return pb_1.Message.getWrapperField(this, dependency_3.google.protobuf.Timestamp, 11) as dependency_3.google.protobuf.Timestamp;
        }
        set update_at(value: dependency_3.google.protobuf.Timestamp) {
            pb_1.Message.setWrapperField(this, 11, value);
        }
        get has_update_at() {
            return pb_1.Message.getField(this, 11) != null;
        }
        get status() {
            return pb_1.Message.getFieldWithDefault(this, 12, 0) as number;
        }
        set status(value: number) {
            pb_1.Message.setField(this, 12, value);
        }
        get operator() {
            return pb_1.Message.getFieldWithDefault(this, 13, "") as string;
        }
        set operator(value: string) {
            pb_1.Message.setField(this, 13, value);
        }
        static fromObject(data: {
            version_id?: number;
            optype?: dependency_7.api.common.OperationsType;
            softname?: string;
            major_version?: string;
            miner_version?: string;
            force?: boolean;
            download_url?: string;
            plist_url?: string;
            remark?: string;
            create_at?: ReturnType<typeof dependency_3.google.protobuf.Timestamp.prototype.toObject>;
            update_at?: ReturnType<typeof dependency_3.google.protobuf.Timestamp.prototype.toObject>;
            status?: number;
            operator?: string;
        }): VersionResponse {
            const message = new VersionResponse({});
            if (data.version_id != null) {
                message.version_id = data.version_id;
            }
            if (data.optype != null) {
                message.optype = data.optype;
            }
            if (data.softname != null) {
                message.softname = data.softname;
            }
            if (data.major_version != null) {
                message.major_version = data.major_version;
            }
            if (data.miner_version != null) {
                message.miner_version = data.miner_version;
            }
            if (data.force != null) {
                message.force = data.force;
            }
            if (data.download_url != null) {
                message.download_url = data.download_url;
            }
            if (data.plist_url != null) {
                message.plist_url = data.plist_url;
            }
            if (data.remark != null) {
                message.remark = data.remark;
            }
            if (data.create_at != null) {
                message.create_at = dependency_3.google.protobuf.Timestamp.fromObject(data.create_at);
            }
            if (data.update_at != null) {
                message.update_at = dependency_3.google.protobuf.Timestamp.fromObject(data.update_at);
            }
            if (data.status != null) {
                message.status = data.status;
            }
            if (data.operator != null) {
                message.operator = data.operator;
            }
            return message;
        }
        toObject() {
            const data: {
                version_id?: number;
                optype?: dependency_7.api.common.OperationsType;
                softname?: string;
                major_version?: string;
                miner_version?: string;
                force?: boolean;
                download_url?: string;
                plist_url?: string;
                remark?: string;
                create_at?: ReturnType<typeof dependency_3.google.protobuf.Timestamp.prototype.toObject>;
                update_at?: ReturnType<typeof dependency_3.google.protobuf.Timestamp.prototype.toObject>;
                status?: number;
                operator?: string;
            } = {};
            if (this.version_id != null) {
                data.version_id = this.version_id;
            }
            if (this.optype != null) {
                data.optype = this.optype;
            }
            if (this.softname != null) {
                data.softname = this.softname;
            }
            if (this.major_version != null) {
                data.major_version = this.major_version;
            }
            if (this.miner_version != null) {
                data.miner_version = this.miner_version;
            }
            if (this.force != null) {
                data.force = this.force;
            }
            if (this.download_url != null) {
                data.download_url = this.download_url;
            }
            if (this.plist_url != null) {
                data.plist_url = this.plist_url;
            }
            if (this.remark != null) {
                data.remark = this.remark;
            }
            if (this.create_at != null) {
                data.create_at = this.create_at.toObject();
            }
            if (this.update_at != null) {
                data.update_at = this.update_at.toObject();
            }
            if (this.status != null) {
                data.status = this.status;
            }
            if (this.operator != null) {
                data.operator = this.operator;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.version_id != 0)
                writer.writeInt32(1, this.version_id);
            if (this.optype != dependency_7.api.common.OperationsType.OPERATION_TYPE_UNKNOWN)
                writer.writeEnum(2, this.optype);
            if (this.softname.length)
                writer.writeString(3, this.softname);
            if (this.major_version.length)
                writer.writeString(4, this.major_version);
            if (this.miner_version.length)
                writer.writeString(5, this.miner_version);
            if (this.force != false)
                writer.writeBool(6, this.force);
            if (this.download_url.length)
                writer.writeString(7, this.download_url);
            if (this.plist_url.length)
                writer.writeString(8, this.plist_url);
            if (this.remark.length)
                writer.writeString(9, this.remark);
            if (this.has_create_at)
                writer.writeMessage(10, this.create_at, () => this.create_at.serialize(writer));
            if (this.has_update_at)
                writer.writeMessage(11, this.update_at, () => this.update_at.serialize(writer));
            if (this.status != 0)
                writer.writeInt32(12, this.status);
            if (this.operator.length)
                writer.writeString(13, this.operator);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): VersionResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new VersionResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.version_id = reader.readInt32();
                        break;
                    case 2:
                        message.optype = reader.readEnum();
                        break;
                    case 3:
                        message.softname = reader.readString();
                        break;
                    case 4:
                        message.major_version = reader.readString();
                        break;
                    case 5:
                        message.miner_version = reader.readString();
                        break;
                    case 6:
                        message.force = reader.readBool();
                        break;
                    case 7:
                        message.download_url = reader.readString();
                        break;
                    case 8:
                        message.plist_url = reader.readString();
                        break;
                    case 9:
                        message.remark = reader.readString();
                        break;
                    case 10:
                        reader.readMessage(message.create_at, () => message.create_at = dependency_3.google.protobuf.Timestamp.deserialize(reader));
                        break;
                    case 11:
                        reader.readMessage(message.update_at, () => message.update_at = dependency_3.google.protobuf.Timestamp.deserialize(reader));
                        break;
                    case 12:
                        message.status = reader.readInt32();
                        break;
                    case 13:
                        message.operator = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): VersionResponse {
            return VersionResponse.deserialize(bytes);
        }
    }
    export class CreateVersionResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            version_id?: number;
            optype?: dependency_7.api.common.OperationsType;
            softname?: string;
            major_version?: string;
            miner_version?: string;
            force?: boolean;
            download_url?: string;
            plist_url?: string;
            remark?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("version_id" in data && data.version_id != undefined) {
                    this.version_id = data.version_id;
                }
                if ("optype" in data && data.optype != undefined) {
                    this.optype = data.optype;
                }
                if ("softname" in data && data.softname != undefined) {
                    this.softname = data.softname;
                }
                if ("major_version" in data && data.major_version != undefined) {
                    this.major_version = data.major_version;
                }
                if ("miner_version" in data && data.miner_version != undefined) {
                    this.miner_version = data.miner_version;
                }
                if ("force" in data && data.force != undefined) {
                    this.force = data.force;
                }
                if ("download_url" in data && data.download_url != undefined) {
                    this.download_url = data.download_url;
                }
                if ("plist_url" in data && data.plist_url != undefined) {
                    this.plist_url = data.plist_url;
                }
                if ("remark" in data && data.remark != undefined) {
                    this.remark = data.remark;
                }
            }
        }
        get version_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set version_id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get optype() {
            return pb_1.Message.getFieldWithDefault(this, 2, dependency_7.api.common.OperationsType.OPERATION_TYPE_UNKNOWN) as dependency_7.api.common.OperationsType;
        }
        set optype(value: dependency_7.api.common.OperationsType) {
            pb_1.Message.setField(this, 2, value);
        }
        get softname() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set softname(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get major_version() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set major_version(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get miner_version() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set miner_version(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        get force() {
            return pb_1.Message.getFieldWithDefault(this, 6, false) as boolean;
        }
        set force(value: boolean) {
            pb_1.Message.setField(this, 6, value);
        }
        get download_url() {
            return pb_1.Message.getFieldWithDefault(this, 7, "") as string;
        }
        set download_url(value: string) {
            pb_1.Message.setField(this, 7, value);
        }
        get plist_url() {
            return pb_1.Message.getFieldWithDefault(this, 8, "") as string;
        }
        set plist_url(value: string) {
            pb_1.Message.setField(this, 8, value);
        }
        get remark() {
            return pb_1.Message.getFieldWithDefault(this, 9, "") as string;
        }
        set remark(value: string) {
            pb_1.Message.setField(this, 9, value);
        }
        static fromObject(data: {
            version_id?: number;
            optype?: dependency_7.api.common.OperationsType;
            softname?: string;
            major_version?: string;
            miner_version?: string;
            force?: boolean;
            download_url?: string;
            plist_url?: string;
            remark?: string;
        }): CreateVersionResponse {
            const message = new CreateVersionResponse({});
            if (data.version_id != null) {
                message.version_id = data.version_id;
            }
            if (data.optype != null) {
                message.optype = data.optype;
            }
            if (data.softname != null) {
                message.softname = data.softname;
            }
            if (data.major_version != null) {
                message.major_version = data.major_version;
            }
            if (data.miner_version != null) {
                message.miner_version = data.miner_version;
            }
            if (data.force != null) {
                message.force = data.force;
            }
            if (data.download_url != null) {
                message.download_url = data.download_url;
            }
            if (data.plist_url != null) {
                message.plist_url = data.plist_url;
            }
            if (data.remark != null) {
                message.remark = data.remark;
            }
            return message;
        }
        toObject() {
            const data: {
                version_id?: number;
                optype?: dependency_7.api.common.OperationsType;
                softname?: string;
                major_version?: string;
                miner_version?: string;
                force?: boolean;
                download_url?: string;
                plist_url?: string;
                remark?: string;
            } = {};
            if (this.version_id != null) {
                data.version_id = this.version_id;
            }
            if (this.optype != null) {
                data.optype = this.optype;
            }
            if (this.softname != null) {
                data.softname = this.softname;
            }
            if (this.major_version != null) {
                data.major_version = this.major_version;
            }
            if (this.miner_version != null) {
                data.miner_version = this.miner_version;
            }
            if (this.force != null) {
                data.force = this.force;
            }
            if (this.download_url != null) {
                data.download_url = this.download_url;
            }
            if (this.plist_url != null) {
                data.plist_url = this.plist_url;
            }
            if (this.remark != null) {
                data.remark = this.remark;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.version_id != 0)
                writer.writeInt32(1, this.version_id);
            if (this.optype != dependency_7.api.common.OperationsType.OPERATION_TYPE_UNKNOWN)
                writer.writeEnum(2, this.optype);
            if (this.softname.length)
                writer.writeString(3, this.softname);
            if (this.major_version.length)
                writer.writeString(4, this.major_version);
            if (this.miner_version.length)
                writer.writeString(5, this.miner_version);
            if (this.force != false)
                writer.writeBool(6, this.force);
            if (this.download_url.length)
                writer.writeString(7, this.download_url);
            if (this.plist_url.length)
                writer.writeString(8, this.plist_url);
            if (this.remark.length)
                writer.writeString(9, this.remark);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CreateVersionResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CreateVersionResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.version_id = reader.readInt32();
                        break;
                    case 2:
                        message.optype = reader.readEnum();
                        break;
                    case 3:
                        message.softname = reader.readString();
                        break;
                    case 4:
                        message.major_version = reader.readString();
                        break;
                    case 5:
                        message.miner_version = reader.readString();
                        break;
                    case 6:
                        message.force = reader.readBool();
                        break;
                    case 7:
                        message.download_url = reader.readString();
                        break;
                    case 8:
                        message.plist_url = reader.readString();
                        break;
                    case 9:
                        message.remark = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CreateVersionResponse {
            return CreateVersionResponse.deserialize(bytes);
        }
    }
    export class UpdateVersionResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            version_id?: number;
            optype?: dependency_7.api.common.OperationsType;
            softname?: string;
            major_version?: string;
            miner_version?: string;
            force?: boolean;
            download_url?: string;
            plist_url?: string;
            remark?: string;
            create_at?: dependency_3.google.protobuf.Timestamp;
            update_at?: dependency_3.google.protobuf.Timestamp;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("version_id" in data && data.version_id != undefined) {
                    this.version_id = data.version_id;
                }
                if ("optype" in data && data.optype != undefined) {
                    this.optype = data.optype;
                }
                if ("softname" in data && data.softname != undefined) {
                    this.softname = data.softname;
                }
                if ("major_version" in data && data.major_version != undefined) {
                    this.major_version = data.major_version;
                }
                if ("miner_version" in data && data.miner_version != undefined) {
                    this.miner_version = data.miner_version;
                }
                if ("force" in data && data.force != undefined) {
                    this.force = data.force;
                }
                if ("download_url" in data && data.download_url != undefined) {
                    this.download_url = data.download_url;
                }
                if ("plist_url" in data && data.plist_url != undefined) {
                    this.plist_url = data.plist_url;
                }
                if ("remark" in data && data.remark != undefined) {
                    this.remark = data.remark;
                }
                if ("create_at" in data && data.create_at != undefined) {
                    this.create_at = data.create_at;
                }
                if ("update_at" in data && data.update_at != undefined) {
                    this.update_at = data.update_at;
                }
            }
        }
        get version_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set version_id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get optype() {
            return pb_1.Message.getFieldWithDefault(this, 2, dependency_7.api.common.OperationsType.OPERATION_TYPE_UNKNOWN) as dependency_7.api.common.OperationsType;
        }
        set optype(value: dependency_7.api.common.OperationsType) {
            pb_1.Message.setField(this, 2, value);
        }
        get softname() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set softname(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get major_version() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set major_version(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get miner_version() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set miner_version(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        get force() {
            return pb_1.Message.getFieldWithDefault(this, 6, false) as boolean;
        }
        set force(value: boolean) {
            pb_1.Message.setField(this, 6, value);
        }
        get download_url() {
            return pb_1.Message.getFieldWithDefault(this, 7, "") as string;
        }
        set download_url(value: string) {
            pb_1.Message.setField(this, 7, value);
        }
        get plist_url() {
            return pb_1.Message.getFieldWithDefault(this, 8, "") as string;
        }
        set plist_url(value: string) {
            pb_1.Message.setField(this, 8, value);
        }
        get remark() {
            return pb_1.Message.getFieldWithDefault(this, 9, "") as string;
        }
        set remark(value: string) {
            pb_1.Message.setField(this, 9, value);
        }
        get create_at() {
            return pb_1.Message.getWrapperField(this, dependency_3.google.protobuf.Timestamp, 10) as dependency_3.google.protobuf.Timestamp;
        }
        set create_at(value: dependency_3.google.protobuf.Timestamp) {
            pb_1.Message.setWrapperField(this, 10, value);
        }
        get has_create_at() {
            return pb_1.Message.getField(this, 10) != null;
        }
        get update_at() {
            return pb_1.Message.getWrapperField(this, dependency_3.google.protobuf.Timestamp, 11) as dependency_3.google.protobuf.Timestamp;
        }
        set update_at(value: dependency_3.google.protobuf.Timestamp) {
            pb_1.Message.setWrapperField(this, 11, value);
        }
        get has_update_at() {
            return pb_1.Message.getField(this, 11) != null;
        }
        static fromObject(data: {
            version_id?: number;
            optype?: dependency_7.api.common.OperationsType;
            softname?: string;
            major_version?: string;
            miner_version?: string;
            force?: boolean;
            download_url?: string;
            plist_url?: string;
            remark?: string;
            create_at?: ReturnType<typeof dependency_3.google.protobuf.Timestamp.prototype.toObject>;
            update_at?: ReturnType<typeof dependency_3.google.protobuf.Timestamp.prototype.toObject>;
        }): UpdateVersionResponse {
            const message = new UpdateVersionResponse({});
            if (data.version_id != null) {
                message.version_id = data.version_id;
            }
            if (data.optype != null) {
                message.optype = data.optype;
            }
            if (data.softname != null) {
                message.softname = data.softname;
            }
            if (data.major_version != null) {
                message.major_version = data.major_version;
            }
            if (data.miner_version != null) {
                message.miner_version = data.miner_version;
            }
            if (data.force != null) {
                message.force = data.force;
            }
            if (data.download_url != null) {
                message.download_url = data.download_url;
            }
            if (data.plist_url != null) {
                message.plist_url = data.plist_url;
            }
            if (data.remark != null) {
                message.remark = data.remark;
            }
            if (data.create_at != null) {
                message.create_at = dependency_3.google.protobuf.Timestamp.fromObject(data.create_at);
            }
            if (data.update_at != null) {
                message.update_at = dependency_3.google.protobuf.Timestamp.fromObject(data.update_at);
            }
            return message;
        }
        toObject() {
            const data: {
                version_id?: number;
                optype?: dependency_7.api.common.OperationsType;
                softname?: string;
                major_version?: string;
                miner_version?: string;
                force?: boolean;
                download_url?: string;
                plist_url?: string;
                remark?: string;
                create_at?: ReturnType<typeof dependency_3.google.protobuf.Timestamp.prototype.toObject>;
                update_at?: ReturnType<typeof dependency_3.google.protobuf.Timestamp.prototype.toObject>;
            } = {};
            if (this.version_id != null) {
                data.version_id = this.version_id;
            }
            if (this.optype != null) {
                data.optype = this.optype;
            }
            if (this.softname != null) {
                data.softname = this.softname;
            }
            if (this.major_version != null) {
                data.major_version = this.major_version;
            }
            if (this.miner_version != null) {
                data.miner_version = this.miner_version;
            }
            if (this.force != null) {
                data.force = this.force;
            }
            if (this.download_url != null) {
                data.download_url = this.download_url;
            }
            if (this.plist_url != null) {
                data.plist_url = this.plist_url;
            }
            if (this.remark != null) {
                data.remark = this.remark;
            }
            if (this.create_at != null) {
                data.create_at = this.create_at.toObject();
            }
            if (this.update_at != null) {
                data.update_at = this.update_at.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.version_id != 0)
                writer.writeInt32(1, this.version_id);
            if (this.optype != dependency_7.api.common.OperationsType.OPERATION_TYPE_UNKNOWN)
                writer.writeEnum(2, this.optype);
            if (this.softname.length)
                writer.writeString(3, this.softname);
            if (this.major_version.length)
                writer.writeString(4, this.major_version);
            if (this.miner_version.length)
                writer.writeString(5, this.miner_version);
            if (this.force != false)
                writer.writeBool(6, this.force);
            if (this.download_url.length)
                writer.writeString(7, this.download_url);
            if (this.plist_url.length)
                writer.writeString(8, this.plist_url);
            if (this.remark.length)
                writer.writeString(9, this.remark);
            if (this.has_create_at)
                writer.writeMessage(10, this.create_at, () => this.create_at.serialize(writer));
            if (this.has_update_at)
                writer.writeMessage(11, this.update_at, () => this.update_at.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): UpdateVersionResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new UpdateVersionResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.version_id = reader.readInt32();
                        break;
                    case 2:
                        message.optype = reader.readEnum();
                        break;
                    case 3:
                        message.softname = reader.readString();
                        break;
                    case 4:
                        message.major_version = reader.readString();
                        break;
                    case 5:
                        message.miner_version = reader.readString();
                        break;
                    case 6:
                        message.force = reader.readBool();
                        break;
                    case 7:
                        message.download_url = reader.readString();
                        break;
                    case 8:
                        message.plist_url = reader.readString();
                        break;
                    case 9:
                        message.remark = reader.readString();
                        break;
                    case 10:
                        reader.readMessage(message.create_at, () => message.create_at = dependency_3.google.protobuf.Timestamp.deserialize(reader));
                        break;
                    case 11:
                        reader.readMessage(message.update_at, () => message.update_at = dependency_3.google.protobuf.Timestamp.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): UpdateVersionResponse {
            return UpdateVersionResponse.deserialize(bytes);
        }
    }
    export class GetVersionResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            list?: VersionResponse[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("list" in data && data.list != undefined) {
                    this.list = data.list;
                }
            }
        }
        get list() {
            return pb_1.Message.getRepeatedWrapperField(this, VersionResponse, 1) as VersionResponse[];
        }
        set list(value: VersionResponse[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        static fromObject(data: {
            list?: ReturnType<typeof VersionResponse.prototype.toObject>[];
        }): GetVersionResponse {
            const message = new GetVersionResponse({});
            if (data.list != null) {
                message.list = data.list.map(item => VersionResponse.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                list?: ReturnType<typeof VersionResponse.prototype.toObject>[];
            } = {};
            if (this.list != null) {
                data.list = this.list.map((item: VersionResponse) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.list.length)
                writer.writeRepeatedMessage(1, this.list, (item: VersionResponse) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetVersionResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetVersionResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.list, () => pb_1.Message.addToRepeatedWrapperField(message, 1, VersionResponse.deserialize(reader), VersionResponse));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetVersionResponse {
            return GetVersionResponse.deserialize(bytes);
        }
    }
    export class TenantThirdSetting extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            tenant_id?: number;
            api_request_url?: string;
            api_name?: string;
            api_pwd?: string;
            api_pubKey?: string;
            api_recharge_request_url?: string;
            api_enabled?: boolean;
            api_faq_url?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("tenant_id" in data && data.tenant_id != undefined) {
                    this.tenant_id = data.tenant_id;
                }
                if ("api_request_url" in data && data.api_request_url != undefined) {
                    this.api_request_url = data.api_request_url;
                }
                if ("api_name" in data && data.api_name != undefined) {
                    this.api_name = data.api_name;
                }
                if ("api_pwd" in data && data.api_pwd != undefined) {
                    this.api_pwd = data.api_pwd;
                }
                if ("api_pubKey" in data && data.api_pubKey != undefined) {
                    this.api_pubKey = data.api_pubKey;
                }
                if ("api_recharge_request_url" in data && data.api_recharge_request_url != undefined) {
                    this.api_recharge_request_url = data.api_recharge_request_url;
                }
                if ("api_enabled" in data && data.api_enabled != undefined) {
                    this.api_enabled = data.api_enabled;
                }
                if ("api_faq_url" in data && data.api_faq_url != undefined) {
                    this.api_faq_url = data.api_faq_url;
                }
            }
        }
        get tenant_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set tenant_id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get api_request_url() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set api_request_url(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get api_name() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set api_name(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get api_pwd() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set api_pwd(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get api_pubKey() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set api_pubKey(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        get api_recharge_request_url() {
            return pb_1.Message.getFieldWithDefault(this, 6, "") as string;
        }
        set api_recharge_request_url(value: string) {
            pb_1.Message.setField(this, 6, value);
        }
        get api_enabled() {
            return pb_1.Message.getFieldWithDefault(this, 7, false) as boolean;
        }
        set api_enabled(value: boolean) {
            pb_1.Message.setField(this, 7, value);
        }
        get api_faq_url() {
            return pb_1.Message.getFieldWithDefault(this, 8, "") as string;
        }
        set api_faq_url(value: string) {
            pb_1.Message.setField(this, 8, value);
        }
        static fromObject(data: {
            tenant_id?: number;
            api_request_url?: string;
            api_name?: string;
            api_pwd?: string;
            api_pubKey?: string;
            api_recharge_request_url?: string;
            api_enabled?: boolean;
            api_faq_url?: string;
        }): TenantThirdSetting {
            const message = new TenantThirdSetting({});
            if (data.tenant_id != null) {
                message.tenant_id = data.tenant_id;
            }
            if (data.api_request_url != null) {
                message.api_request_url = data.api_request_url;
            }
            if (data.api_name != null) {
                message.api_name = data.api_name;
            }
            if (data.api_pwd != null) {
                message.api_pwd = data.api_pwd;
            }
            if (data.api_pubKey != null) {
                message.api_pubKey = data.api_pubKey;
            }
            if (data.api_recharge_request_url != null) {
                message.api_recharge_request_url = data.api_recharge_request_url;
            }
            if (data.api_enabled != null) {
                message.api_enabled = data.api_enabled;
            }
            if (data.api_faq_url != null) {
                message.api_faq_url = data.api_faq_url;
            }
            return message;
        }
        toObject() {
            const data: {
                tenant_id?: number;
                api_request_url?: string;
                api_name?: string;
                api_pwd?: string;
                api_pubKey?: string;
                api_recharge_request_url?: string;
                api_enabled?: boolean;
                api_faq_url?: string;
            } = {};
            if (this.tenant_id != null) {
                data.tenant_id = this.tenant_id;
            }
            if (this.api_request_url != null) {
                data.api_request_url = this.api_request_url;
            }
            if (this.api_name != null) {
                data.api_name = this.api_name;
            }
            if (this.api_pwd != null) {
                data.api_pwd = this.api_pwd;
            }
            if (this.api_pubKey != null) {
                data.api_pubKey = this.api_pubKey;
            }
            if (this.api_recharge_request_url != null) {
                data.api_recharge_request_url = this.api_recharge_request_url;
            }
            if (this.api_enabled != null) {
                data.api_enabled = this.api_enabled;
            }
            if (this.api_faq_url != null) {
                data.api_faq_url = this.api_faq_url;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.tenant_id != 0)
                writer.writeUint32(1, this.tenant_id);
            if (this.api_request_url.length)
                writer.writeString(2, this.api_request_url);
            if (this.api_name.length)
                writer.writeString(3, this.api_name);
            if (this.api_pwd.length)
                writer.writeString(4, this.api_pwd);
            if (this.api_pubKey.length)
                writer.writeString(5, this.api_pubKey);
            if (this.api_recharge_request_url.length)
                writer.writeString(6, this.api_recharge_request_url);
            if (this.api_enabled != false)
                writer.writeBool(7, this.api_enabled);
            if (this.api_faq_url.length)
                writer.writeString(8, this.api_faq_url);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): TenantThirdSetting {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new TenantThirdSetting();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.tenant_id = reader.readUint32();
                        break;
                    case 2:
                        message.api_request_url = reader.readString();
                        break;
                    case 3:
                        message.api_name = reader.readString();
                        break;
                    case 4:
                        message.api_pwd = reader.readString();
                        break;
                    case 5:
                        message.api_pubKey = reader.readString();
                        break;
                    case 6:
                        message.api_recharge_request_url = reader.readString();
                        break;
                    case 7:
                        message.api_enabled = reader.readBool();
                        break;
                    case 8:
                        message.api_faq_url = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): TenantThirdSetting {
            return TenantThirdSetting.deserialize(bytes);
        }
    }
    export class LineGroupListRequest extends pb_1.Message {
        #one_of_decls: number[][] = [[2], [3]];
        constructor(data?: any[] | ({
            batch?: dependency_6.api.common.Batch;
        } & (({
            name?: string;
        }) | ({
            disable_status?: dependency_6.api.common.DisableStatus;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("batch" in data && data.batch != undefined) {
                    this.batch = data.batch;
                }
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
                if ("disable_status" in data && data.disable_status != undefined) {
                    this.disable_status = data.disable_status;
                }
            }
        }
        get batch() {
            return pb_1.Message.getWrapperField(this, dependency_6.api.common.Batch, 1) as dependency_6.api.common.Batch;
        }
        set batch(value: dependency_6.api.common.Batch) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_batch() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get name() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set name(value: string) {
            pb_1.Message.setOneofField(this, 2, this.#one_of_decls[0], value);
        }
        get has_name() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get disable_status() {
            return pb_1.Message.getFieldWithDefault(this, 3, dependency_6.api.common.DisableStatus.DEFAULT) as dependency_6.api.common.DisableStatus;
        }
        set disable_status(value: dependency_6.api.common.DisableStatus) {
            pb_1.Message.setOneofField(this, 3, this.#one_of_decls[1], value);
        }
        get has_disable_status() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get _name() {
            const cases: {
                [index: number]: "none" | "name";
            } = {
                0: "none",
                2: "name"
            };
            return cases[pb_1.Message.computeOneofCase(this, [2])];
        }
        get _disable_status() {
            const cases: {
                [index: number]: "none" | "disable_status";
            } = {
                0: "none",
                3: "disable_status"
            };
            return cases[pb_1.Message.computeOneofCase(this, [3])];
        }
        static fromObject(data: {
            batch?: ReturnType<typeof dependency_6.api.common.Batch.prototype.toObject>;
            name?: string;
            disable_status?: dependency_6.api.common.DisableStatus;
        }): LineGroupListRequest {
            const message = new LineGroupListRequest({});
            if (data.batch != null) {
                message.batch = dependency_6.api.common.Batch.fromObject(data.batch);
            }
            if (data.name != null) {
                message.name = data.name;
            }
            if (data.disable_status != null) {
                message.disable_status = data.disable_status;
            }
            return message;
        }
        toObject() {
            const data: {
                batch?: ReturnType<typeof dependency_6.api.common.Batch.prototype.toObject>;
                name?: string;
                disable_status?: dependency_6.api.common.DisableStatus;
            } = {};
            if (this.batch != null) {
                data.batch = this.batch.toObject();
            }
            if (this.name != null) {
                data.name = this.name;
            }
            if (this.disable_status != null) {
                data.disable_status = this.disable_status;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_batch)
                writer.writeMessage(1, this.batch, () => this.batch.serialize(writer));
            if (this.has_name)
                writer.writeString(2, this.name);
            if (this.has_disable_status)
                writer.writeEnum(3, this.disable_status);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): LineGroupListRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new LineGroupListRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.batch, () => message.batch = dependency_6.api.common.Batch.deserialize(reader));
                        break;
                    case 2:
                        message.name = reader.readString();
                        break;
                    case 3:
                        message.disable_status = reader.readEnum();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): LineGroupListRequest {
            return LineGroupListRequest.deserialize(bytes);
        }
    }
    export class LineGroupListResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            batch?: dependency_6.api.common.Batch;
            list?: dependency_8.api.common.TenantsLineGroup[];
            total?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [2], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("batch" in data && data.batch != undefined) {
                    this.batch = data.batch;
                }
                if ("list" in data && data.list != undefined) {
                    this.list = data.list;
                }
                if ("total" in data && data.total != undefined) {
                    this.total = data.total;
                }
            }
        }
        get batch() {
            return pb_1.Message.getWrapperField(this, dependency_6.api.common.Batch, 1) as dependency_6.api.common.Batch;
        }
        set batch(value: dependency_6.api.common.Batch) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_batch() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get list() {
            return pb_1.Message.getRepeatedWrapperField(this, dependency_8.api.common.TenantsLineGroup, 2) as dependency_8.api.common.TenantsLineGroup[];
        }
        set list(value: dependency_8.api.common.TenantsLineGroup[]) {
            pb_1.Message.setRepeatedWrapperField(this, 2, value);
        }
        get total() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set total(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            batch?: ReturnType<typeof dependency_6.api.common.Batch.prototype.toObject>;
            list?: ReturnType<typeof dependency_8.api.common.TenantsLineGroup.prototype.toObject>[];
            total?: number;
        }): LineGroupListResponse {
            const message = new LineGroupListResponse({});
            if (data.batch != null) {
                message.batch = dependency_6.api.common.Batch.fromObject(data.batch);
            }
            if (data.list != null) {
                message.list = data.list.map(item => dependency_8.api.common.TenantsLineGroup.fromObject(item));
            }
            if (data.total != null) {
                message.total = data.total;
            }
            return message;
        }
        toObject() {
            const data: {
                batch?: ReturnType<typeof dependency_6.api.common.Batch.prototype.toObject>;
                list?: ReturnType<typeof dependency_8.api.common.TenantsLineGroup.prototype.toObject>[];
                total?: number;
            } = {};
            if (this.batch != null) {
                data.batch = this.batch.toObject();
            }
            if (this.list != null) {
                data.list = this.list.map((item: dependency_8.api.common.TenantsLineGroup) => item.toObject());
            }
            if (this.total != null) {
                data.total = this.total;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_batch)
                writer.writeMessage(1, this.batch, () => this.batch.serialize(writer));
            if (this.list.length)
                writer.writeRepeatedMessage(2, this.list, (item: dependency_8.api.common.TenantsLineGroup) => item.serialize(writer));
            if (this.total != 0)
                writer.writeInt32(3, this.total);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): LineGroupListResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new LineGroupListResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.batch, () => message.batch = dependency_6.api.common.Batch.deserialize(reader));
                        break;
                    case 2:
                        reader.readMessage(message.list, () => pb_1.Message.addToRepeatedWrapperField(message, 2, dependency_8.api.common.TenantsLineGroup.deserialize(reader), dependency_8.api.common.TenantsLineGroup));
                        break;
                    case 3:
                        message.total = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): LineGroupListResponse {
            return LineGroupListResponse.deserialize(bytes);
        }
    }
    export class LineGroupCreateRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            name?: string;
            h5_lines?: dependency_6.api.common.ListString;
            background_lines?: dependency_6.api.common.ListString;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
                if ("h5_lines" in data && data.h5_lines != undefined) {
                    this.h5_lines = data.h5_lines;
                }
                if ("background_lines" in data && data.background_lines != undefined) {
                    this.background_lines = data.background_lines;
                }
            }
        }
        get name() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get h5_lines() {
            return pb_1.Message.getWrapperField(this, dependency_6.api.common.ListString, 2) as dependency_6.api.common.ListString;
        }
        set h5_lines(value: dependency_6.api.common.ListString) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_h5_lines() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get background_lines() {
            return pb_1.Message.getWrapperField(this, dependency_6.api.common.ListString, 3) as dependency_6.api.common.ListString;
        }
        set background_lines(value: dependency_6.api.common.ListString) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get has_background_lines() {
            return pb_1.Message.getField(this, 3) != null;
        }
        static fromObject(data: {
            name?: string;
            h5_lines?: ReturnType<typeof dependency_6.api.common.ListString.prototype.toObject>;
            background_lines?: ReturnType<typeof dependency_6.api.common.ListString.prototype.toObject>;
        }): LineGroupCreateRequest {
            const message = new LineGroupCreateRequest({});
            if (data.name != null) {
                message.name = data.name;
            }
            if (data.h5_lines != null) {
                message.h5_lines = dependency_6.api.common.ListString.fromObject(data.h5_lines);
            }
            if (data.background_lines != null) {
                message.background_lines = dependency_6.api.common.ListString.fromObject(data.background_lines);
            }
            return message;
        }
        toObject() {
            const data: {
                name?: string;
                h5_lines?: ReturnType<typeof dependency_6.api.common.ListString.prototype.toObject>;
                background_lines?: ReturnType<typeof dependency_6.api.common.ListString.prototype.toObject>;
            } = {};
            if (this.name != null) {
                data.name = this.name;
            }
            if (this.h5_lines != null) {
                data.h5_lines = this.h5_lines.toObject();
            }
            if (this.background_lines != null) {
                data.background_lines = this.background_lines.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.name.length)
                writer.writeString(1, this.name);
            if (this.has_h5_lines)
                writer.writeMessage(2, this.h5_lines, () => this.h5_lines.serialize(writer));
            if (this.has_background_lines)
                writer.writeMessage(3, this.background_lines, () => this.background_lines.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): LineGroupCreateRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new LineGroupCreateRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.name = reader.readString();
                        break;
                    case 2:
                        reader.readMessage(message.h5_lines, () => message.h5_lines = dependency_6.api.common.ListString.deserialize(reader));
                        break;
                    case 3:
                        reader.readMessage(message.background_lines, () => message.background_lines = dependency_6.api.common.ListString.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): LineGroupCreateRequest {
            return LineGroupCreateRequest.deserialize(bytes);
        }
    }
    export class LineGroupUpdateRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            id?: number;
            name?: string;
            h5_lines?: dependency_6.api.common.ListString;
            background_lines?: dependency_6.api.common.ListString;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
                if ("h5_lines" in data && data.h5_lines != undefined) {
                    this.h5_lines = data.h5_lines;
                }
                if ("background_lines" in data && data.background_lines != undefined) {
                    this.background_lines = data.background_lines;
                }
            }
        }
        get id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get name() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get h5_lines() {
            return pb_1.Message.getWrapperField(this, dependency_6.api.common.ListString, 3) as dependency_6.api.common.ListString;
        }
        set h5_lines(value: dependency_6.api.common.ListString) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get has_h5_lines() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get background_lines() {
            return pb_1.Message.getWrapperField(this, dependency_6.api.common.ListString, 4) as dependency_6.api.common.ListString;
        }
        set background_lines(value: dependency_6.api.common.ListString) {
            pb_1.Message.setWrapperField(this, 4, value);
        }
        get has_background_lines() {
            return pb_1.Message.getField(this, 4) != null;
        }
        static fromObject(data: {
            id?: number;
            name?: string;
            h5_lines?: ReturnType<typeof dependency_6.api.common.ListString.prototype.toObject>;
            background_lines?: ReturnType<typeof dependency_6.api.common.ListString.prototype.toObject>;
        }): LineGroupUpdateRequest {
            const message = new LineGroupUpdateRequest({});
            if (data.id != null) {
                message.id = data.id;
            }
            if (data.name != null) {
                message.name = data.name;
            }
            if (data.h5_lines != null) {
                message.h5_lines = dependency_6.api.common.ListString.fromObject(data.h5_lines);
            }
            if (data.background_lines != null) {
                message.background_lines = dependency_6.api.common.ListString.fromObject(data.background_lines);
            }
            return message;
        }
        toObject() {
            const data: {
                id?: number;
                name?: string;
                h5_lines?: ReturnType<typeof dependency_6.api.common.ListString.prototype.toObject>;
                background_lines?: ReturnType<typeof dependency_6.api.common.ListString.prototype.toObject>;
            } = {};
            if (this.id != null) {
                data.id = this.id;
            }
            if (this.name != null) {
                data.name = this.name;
            }
            if (this.h5_lines != null) {
                data.h5_lines = this.h5_lines.toObject();
            }
            if (this.background_lines != null) {
                data.background_lines = this.background_lines.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.id != 0)
                writer.writeInt32(1, this.id);
            if (this.name.length)
                writer.writeString(2, this.name);
            if (this.has_h5_lines)
                writer.writeMessage(3, this.h5_lines, () => this.h5_lines.serialize(writer));
            if (this.has_background_lines)
                writer.writeMessage(4, this.background_lines, () => this.background_lines.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): LineGroupUpdateRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new LineGroupUpdateRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.id = reader.readInt32();
                        break;
                    case 2:
                        message.name = reader.readString();
                        break;
                    case 3:
                        reader.readMessage(message.h5_lines, () => message.h5_lines = dependency_6.api.common.ListString.deserialize(reader));
                        break;
                    case 4:
                        reader.readMessage(message.background_lines, () => message.background_lines = dependency_6.api.common.ListString.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): LineGroupUpdateRequest {
            return LineGroupUpdateRequest.deserialize(bytes);
        }
    }
    export class LineGroupDeleteRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            id?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
            }
        }
        get id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            id?: number;
        }): LineGroupDeleteRequest {
            const message = new LineGroupDeleteRequest({});
            if (data.id != null) {
                message.id = data.id;
            }
            return message;
        }
        toObject() {
            const data: {
                id?: number;
            } = {};
            if (this.id != null) {
                data.id = this.id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.id != 0)
                writer.writeInt32(1, this.id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): LineGroupDeleteRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new LineGroupDeleteRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.id = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): LineGroupDeleteRequest {
            return LineGroupDeleteRequest.deserialize(bytes);
        }
    }
    export class TenantWorkerQueryRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            batch?: dependency_6.api.common.Batch;
            tenant_id?: number;
            name?: string;
            worker_state?: dependency_5.api.common.WorkerState;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("batch" in data && data.batch != undefined) {
                    this.batch = data.batch;
                }
                if ("tenant_id" in data && data.tenant_id != undefined) {
                    this.tenant_id = data.tenant_id;
                }
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
                if ("worker_state" in data && data.worker_state != undefined) {
                    this.worker_state = data.worker_state;
                }
            }
        }
        get batch() {
            return pb_1.Message.getWrapperField(this, dependency_6.api.common.Batch, 1) as dependency_6.api.common.Batch;
        }
        set batch(value: dependency_6.api.common.Batch) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_batch() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get tenant_id() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set tenant_id(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get name() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get worker_state() {
            return pb_1.Message.getFieldWithDefault(this, 4, dependency_5.api.common.WorkerState.WORKER_OFFLINE) as dependency_5.api.common.WorkerState;
        }
        set worker_state(value: dependency_5.api.common.WorkerState) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            batch?: ReturnType<typeof dependency_6.api.common.Batch.prototype.toObject>;
            tenant_id?: number;
            name?: string;
            worker_state?: dependency_5.api.common.WorkerState;
        }): TenantWorkerQueryRequest {
            const message = new TenantWorkerQueryRequest({});
            if (data.batch != null) {
                message.batch = dependency_6.api.common.Batch.fromObject(data.batch);
            }
            if (data.tenant_id != null) {
                message.tenant_id = data.tenant_id;
            }
            if (data.name != null) {
                message.name = data.name;
            }
            if (data.worker_state != null) {
                message.worker_state = data.worker_state;
            }
            return message;
        }
        toObject() {
            const data: {
                batch?: ReturnType<typeof dependency_6.api.common.Batch.prototype.toObject>;
                tenant_id?: number;
                name?: string;
                worker_state?: dependency_5.api.common.WorkerState;
            } = {};
            if (this.batch != null) {
                data.batch = this.batch.toObject();
            }
            if (this.tenant_id != null) {
                data.tenant_id = this.tenant_id;
            }
            if (this.name != null) {
                data.name = this.name;
            }
            if (this.worker_state != null) {
                data.worker_state = this.worker_state;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_batch)
                writer.writeMessage(1, this.batch, () => this.batch.serialize(writer));
            if (this.tenant_id != 0)
                writer.writeInt32(2, this.tenant_id);
            if (this.name.length)
                writer.writeString(3, this.name);
            if (this.worker_state != dependency_5.api.common.WorkerState.WORKER_OFFLINE)
                writer.writeEnum(4, this.worker_state);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): TenantWorkerQueryRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new TenantWorkerQueryRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.batch, () => message.batch = dependency_6.api.common.Batch.deserialize(reader));
                        break;
                    case 2:
                        message.tenant_id = reader.readInt32();
                        break;
                    case 3:
                        message.name = reader.readString();
                        break;
                    case 4:
                        message.worker_state = reader.readEnum();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): TenantWorkerQueryRequest {
            return TenantWorkerQueryRequest.deserialize(bytes);
        }
    }
    export class TenantWorkerQueryResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            items?: WorkerWithState[];
            batch?: dependency_6.api.common.Batch;
            total?: number;
            online_total?: number;
            all_total?: number;
            workers_capacity?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("items" in data && data.items != undefined) {
                    this.items = data.items;
                }
                if ("batch" in data && data.batch != undefined) {
                    this.batch = data.batch;
                }
                if ("total" in data && data.total != undefined) {
                    this.total = data.total;
                }
                if ("online_total" in data && data.online_total != undefined) {
                    this.online_total = data.online_total;
                }
                if ("all_total" in data && data.all_total != undefined) {
                    this.all_total = data.all_total;
                }
                if ("workers_capacity" in data && data.workers_capacity != undefined) {
                    this.workers_capacity = data.workers_capacity;
                }
            }
        }
        get items() {
            return pb_1.Message.getRepeatedWrapperField(this, WorkerWithState, 1) as WorkerWithState[];
        }
        set items(value: WorkerWithState[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        get batch() {
            return pb_1.Message.getWrapperField(this, dependency_6.api.common.Batch, 2) as dependency_6.api.common.Batch;
        }
        set batch(value: dependency_6.api.common.Batch) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_batch() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get total() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set total(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        get online_total() {
            return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
        }
        set online_total(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        get all_total() {
            return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
        }
        set all_total(value: number) {
            pb_1.Message.setField(this, 5, value);
        }
        get workers_capacity() {
            return pb_1.Message.getFieldWithDefault(this, 6, 0) as number;
        }
        set workers_capacity(value: number) {
            pb_1.Message.setField(this, 6, value);
        }
        static fromObject(data: {
            items?: ReturnType<typeof WorkerWithState.prototype.toObject>[];
            batch?: ReturnType<typeof dependency_6.api.common.Batch.prototype.toObject>;
            total?: number;
            online_total?: number;
            all_total?: number;
            workers_capacity?: number;
        }): TenantWorkerQueryResponse {
            const message = new TenantWorkerQueryResponse({});
            if (data.items != null) {
                message.items = data.items.map(item => WorkerWithState.fromObject(item));
            }
            if (data.batch != null) {
                message.batch = dependency_6.api.common.Batch.fromObject(data.batch);
            }
            if (data.total != null) {
                message.total = data.total;
            }
            if (data.online_total != null) {
                message.online_total = data.online_total;
            }
            if (data.all_total != null) {
                message.all_total = data.all_total;
            }
            if (data.workers_capacity != null) {
                message.workers_capacity = data.workers_capacity;
            }
            return message;
        }
        toObject() {
            const data: {
                items?: ReturnType<typeof WorkerWithState.prototype.toObject>[];
                batch?: ReturnType<typeof dependency_6.api.common.Batch.prototype.toObject>;
                total?: number;
                online_total?: number;
                all_total?: number;
                workers_capacity?: number;
            } = {};
            if (this.items != null) {
                data.items = this.items.map((item: WorkerWithState) => item.toObject());
            }
            if (this.batch != null) {
                data.batch = this.batch.toObject();
            }
            if (this.total != null) {
                data.total = this.total;
            }
            if (this.online_total != null) {
                data.online_total = this.online_total;
            }
            if (this.all_total != null) {
                data.all_total = this.all_total;
            }
            if (this.workers_capacity != null) {
                data.workers_capacity = this.workers_capacity;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.items.length)
                writer.writeRepeatedMessage(1, this.items, (item: WorkerWithState) => item.serialize(writer));
            if (this.has_batch)
                writer.writeMessage(2, this.batch, () => this.batch.serialize(writer));
            if (this.total != 0)
                writer.writeInt32(3, this.total);
            if (this.online_total != 0)
                writer.writeInt32(4, this.online_total);
            if (this.all_total != 0)
                writer.writeInt32(5, this.all_total);
            if (this.workers_capacity != 0)
                writer.writeInt32(6, this.workers_capacity);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): TenantWorkerQueryResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new TenantWorkerQueryResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.items, () => pb_1.Message.addToRepeatedWrapperField(message, 1, WorkerWithState.deserialize(reader), WorkerWithState));
                        break;
                    case 2:
                        reader.readMessage(message.batch, () => message.batch = dependency_6.api.common.Batch.deserialize(reader));
                        break;
                    case 3:
                        message.total = reader.readInt32();
                        break;
                    case 4:
                        message.online_total = reader.readInt32();
                        break;
                    case 5:
                        message.all_total = reader.readInt32();
                        break;
                    case 6:
                        message.workers_capacity = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): TenantWorkerQueryResponse {
            return TenantWorkerQueryResponse.deserialize(bytes);
        }
    }
    export class WorkerWithState extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            worker?: dependency_5.api.common.Worker;
            worker_state?: dependency_5.api.common.WorkerState;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("worker" in data && data.worker != undefined) {
                    this.worker = data.worker;
                }
                if ("worker_state" in data && data.worker_state != undefined) {
                    this.worker_state = data.worker_state;
                }
            }
        }
        get worker() {
            return pb_1.Message.getWrapperField(this, dependency_5.api.common.Worker, 1) as dependency_5.api.common.Worker;
        }
        set worker(value: dependency_5.api.common.Worker) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_worker() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get worker_state() {
            return pb_1.Message.getFieldWithDefault(this, 2, dependency_5.api.common.WorkerState.WORKER_OFFLINE) as dependency_5.api.common.WorkerState;
        }
        set worker_state(value: dependency_5.api.common.WorkerState) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            worker?: ReturnType<typeof dependency_5.api.common.Worker.prototype.toObject>;
            worker_state?: dependency_5.api.common.WorkerState;
        }): WorkerWithState {
            const message = new WorkerWithState({});
            if (data.worker != null) {
                message.worker = dependency_5.api.common.Worker.fromObject(data.worker);
            }
            if (data.worker_state != null) {
                message.worker_state = data.worker_state;
            }
            return message;
        }
        toObject() {
            const data: {
                worker?: ReturnType<typeof dependency_5.api.common.Worker.prototype.toObject>;
                worker_state?: dependency_5.api.common.WorkerState;
            } = {};
            if (this.worker != null) {
                data.worker = this.worker.toObject();
            }
            if (this.worker_state != null) {
                data.worker_state = this.worker_state;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_worker)
                writer.writeMessage(1, this.worker, () => this.worker.serialize(writer));
            if (this.worker_state != dependency_5.api.common.WorkerState.WORKER_OFFLINE)
                writer.writeEnum(2, this.worker_state);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): WorkerWithState {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new WorkerWithState();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.worker, () => message.worker = dependency_5.api.common.Worker.deserialize(reader));
                        break;
                    case 2:
                        message.worker_state = reader.readEnum();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): WorkerWithState {
            return WorkerWithState.deserialize(bytes);
        }
    }
    export class TenantLogReq extends pb_1.Message {
        #one_of_decls: number[][] = [[5]];
        constructor(data?: any[] | ({
            batch?: dependency_6.api.common.Batch;
            query_type?: number;
            user_name?: string;
            role?: number;
            date?: string;
        } & (({
            ip?: string;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("batch" in data && data.batch != undefined) {
                    this.batch = data.batch;
                }
                if ("query_type" in data && data.query_type != undefined) {
                    this.query_type = data.query_type;
                }
                if ("user_name" in data && data.user_name != undefined) {
                    this.user_name = data.user_name;
                }
                if ("role" in data && data.role != undefined) {
                    this.role = data.role;
                }
                if ("ip" in data && data.ip != undefined) {
                    this.ip = data.ip;
                }
                if ("date" in data && data.date != undefined) {
                    this.date = data.date;
                }
            }
        }
        get batch() {
            return pb_1.Message.getWrapperField(this, dependency_6.api.common.Batch, 1) as dependency_6.api.common.Batch;
        }
        set batch(value: dependency_6.api.common.Batch) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_batch() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get query_type() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set query_type(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get user_name() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set user_name(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get role() {
            return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
        }
        set role(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        get ip() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set ip(value: string) {
            pb_1.Message.setOneofField(this, 5, this.#one_of_decls[0], value);
        }
        get has_ip() {
            return pb_1.Message.getField(this, 5) != null;
        }
        get date() {
            return pb_1.Message.getFieldWithDefault(this, 6, "") as string;
        }
        set date(value: string) {
            pb_1.Message.setField(this, 6, value);
        }
        get _ip() {
            const cases: {
                [index: number]: "none" | "ip";
            } = {
                0: "none",
                5: "ip"
            };
            return cases[pb_1.Message.computeOneofCase(this, [5])];
        }
        static fromObject(data: {
            batch?: ReturnType<typeof dependency_6.api.common.Batch.prototype.toObject>;
            query_type?: number;
            user_name?: string;
            role?: number;
            ip?: string;
            date?: string;
        }): TenantLogReq {
            const message = new TenantLogReq({});
            if (data.batch != null) {
                message.batch = dependency_6.api.common.Batch.fromObject(data.batch);
            }
            if (data.query_type != null) {
                message.query_type = data.query_type;
            }
            if (data.user_name != null) {
                message.user_name = data.user_name;
            }
            if (data.role != null) {
                message.role = data.role;
            }
            if (data.ip != null) {
                message.ip = data.ip;
            }
            if (data.date != null) {
                message.date = data.date;
            }
            return message;
        }
        toObject() {
            const data: {
                batch?: ReturnType<typeof dependency_6.api.common.Batch.prototype.toObject>;
                query_type?: number;
                user_name?: string;
                role?: number;
                ip?: string;
                date?: string;
            } = {};
            if (this.batch != null) {
                data.batch = this.batch.toObject();
            }
            if (this.query_type != null) {
                data.query_type = this.query_type;
            }
            if (this.user_name != null) {
                data.user_name = this.user_name;
            }
            if (this.role != null) {
                data.role = this.role;
            }
            if (this.ip != null) {
                data.ip = this.ip;
            }
            if (this.date != null) {
                data.date = this.date;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_batch)
                writer.writeMessage(1, this.batch, () => this.batch.serialize(writer));
            if (this.query_type != 0)
                writer.writeInt32(2, this.query_type);
            if (this.user_name.length)
                writer.writeString(3, this.user_name);
            if (this.role != 0)
                writer.writeInt32(4, this.role);
            if (this.has_ip)
                writer.writeString(5, this.ip);
            if (this.date.length)
                writer.writeString(6, this.date);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): TenantLogReq {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new TenantLogReq();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.batch, () => message.batch = dependency_6.api.common.Batch.deserialize(reader));
                        break;
                    case 2:
                        message.query_type = reader.readInt32();
                        break;
                    case 3:
                        message.user_name = reader.readString();
                        break;
                    case 4:
                        message.role = reader.readInt32();
                        break;
                    case 5:
                        message.ip = reader.readString();
                        break;
                    case 6:
                        message.date = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): TenantLogReq {
            return TenantLogReq.deserialize(bytes);
        }
    }
    export class TenantLogItem extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            id?: number;
            user_id?: number;
            user_account?: string;
            role?: string;
            create_time?: number;
            detail?: string;
            ip?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
                if ("user_id" in data && data.user_id != undefined) {
                    this.user_id = data.user_id;
                }
                if ("user_account" in data && data.user_account != undefined) {
                    this.user_account = data.user_account;
                }
                if ("role" in data && data.role != undefined) {
                    this.role = data.role;
                }
                if ("create_time" in data && data.create_time != undefined) {
                    this.create_time = data.create_time;
                }
                if ("detail" in data && data.detail != undefined) {
                    this.detail = data.detail;
                }
                if ("ip" in data && data.ip != undefined) {
                    this.ip = data.ip;
                }
            }
        }
        get id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get user_id() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set user_id(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get user_account() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set user_account(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get role() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set role(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get create_time() {
            return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
        }
        set create_time(value: number) {
            pb_1.Message.setField(this, 5, value);
        }
        get detail() {
            return pb_1.Message.getFieldWithDefault(this, 6, "") as string;
        }
        set detail(value: string) {
            pb_1.Message.setField(this, 6, value);
        }
        get ip() {
            return pb_1.Message.getFieldWithDefault(this, 7, "") as string;
        }
        set ip(value: string) {
            pb_1.Message.setField(this, 7, value);
        }
        static fromObject(data: {
            id?: number;
            user_id?: number;
            user_account?: string;
            role?: string;
            create_time?: number;
            detail?: string;
            ip?: string;
        }): TenantLogItem {
            const message = new TenantLogItem({});
            if (data.id != null) {
                message.id = data.id;
            }
            if (data.user_id != null) {
                message.user_id = data.user_id;
            }
            if (data.user_account != null) {
                message.user_account = data.user_account;
            }
            if (data.role != null) {
                message.role = data.role;
            }
            if (data.create_time != null) {
                message.create_time = data.create_time;
            }
            if (data.detail != null) {
                message.detail = data.detail;
            }
            if (data.ip != null) {
                message.ip = data.ip;
            }
            return message;
        }
        toObject() {
            const data: {
                id?: number;
                user_id?: number;
                user_account?: string;
                role?: string;
                create_time?: number;
                detail?: string;
                ip?: string;
            } = {};
            if (this.id != null) {
                data.id = this.id;
            }
            if (this.user_id != null) {
                data.user_id = this.user_id;
            }
            if (this.user_account != null) {
                data.user_account = this.user_account;
            }
            if (this.role != null) {
                data.role = this.role;
            }
            if (this.create_time != null) {
                data.create_time = this.create_time;
            }
            if (this.detail != null) {
                data.detail = this.detail;
            }
            if (this.ip != null) {
                data.ip = this.ip;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.id != 0)
                writer.writeInt32(1, this.id);
            if (this.user_id != 0)
                writer.writeInt32(2, this.user_id);
            if (this.user_account.length)
                writer.writeString(3, this.user_account);
            if (this.role.length)
                writer.writeString(4, this.role);
            if (this.create_time != 0)
                writer.writeInt64(5, this.create_time);
            if (this.detail.length)
                writer.writeString(6, this.detail);
            if (this.ip.length)
                writer.writeString(7, this.ip);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): TenantLogItem {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new TenantLogItem();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.id = reader.readInt32();
                        break;
                    case 2:
                        message.user_id = reader.readInt32();
                        break;
                    case 3:
                        message.user_account = reader.readString();
                        break;
                    case 4:
                        message.role = reader.readString();
                        break;
                    case 5:
                        message.create_time = reader.readInt64();
                        break;
                    case 6:
                        message.detail = reader.readString();
                        break;
                    case 7:
                        message.ip = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): TenantLogItem {
            return TenantLogItem.deserialize(bytes);
        }
    }
    export class TenantLogResp extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            batch?: dependency_6.api.common.Batch;
            logs?: TenantLogItem[];
            total?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [2], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("batch" in data && data.batch != undefined) {
                    this.batch = data.batch;
                }
                if ("logs" in data && data.logs != undefined) {
                    this.logs = data.logs;
                }
                if ("total" in data && data.total != undefined) {
                    this.total = data.total;
                }
            }
        }
        get batch() {
            return pb_1.Message.getWrapperField(this, dependency_6.api.common.Batch, 1) as dependency_6.api.common.Batch;
        }
        set batch(value: dependency_6.api.common.Batch) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_batch() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get logs() {
            return pb_1.Message.getRepeatedWrapperField(this, TenantLogItem, 2) as TenantLogItem[];
        }
        set logs(value: TenantLogItem[]) {
            pb_1.Message.setRepeatedWrapperField(this, 2, value);
        }
        get total() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set total(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            batch?: ReturnType<typeof dependency_6.api.common.Batch.prototype.toObject>;
            logs?: ReturnType<typeof TenantLogItem.prototype.toObject>[];
            total?: number;
        }): TenantLogResp {
            const message = new TenantLogResp({});
            if (data.batch != null) {
                message.batch = dependency_6.api.common.Batch.fromObject(data.batch);
            }
            if (data.logs != null) {
                message.logs = data.logs.map(item => TenantLogItem.fromObject(item));
            }
            if (data.total != null) {
                message.total = data.total;
            }
            return message;
        }
        toObject() {
            const data: {
                batch?: ReturnType<typeof dependency_6.api.common.Batch.prototype.toObject>;
                logs?: ReturnType<typeof TenantLogItem.prototype.toObject>[];
                total?: number;
            } = {};
            if (this.batch != null) {
                data.batch = this.batch.toObject();
            }
            if (this.logs != null) {
                data.logs = this.logs.map((item: TenantLogItem) => item.toObject());
            }
            if (this.total != null) {
                data.total = this.total;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_batch)
                writer.writeMessage(1, this.batch, () => this.batch.serialize(writer));
            if (this.logs.length)
                writer.writeRepeatedMessage(2, this.logs, (item: TenantLogItem) => item.serialize(writer));
            if (this.total != 0)
                writer.writeInt32(3, this.total);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): TenantLogResp {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new TenantLogResp();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.batch, () => message.batch = dependency_6.api.common.Batch.deserialize(reader));
                        break;
                    case 2:
                        reader.readMessage(message.logs, () => pb_1.Message.addToRepeatedWrapperField(message, 2, TenantLogItem.deserialize(reader), TenantLogItem));
                        break;
                    case 3:
                        message.total = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): TenantLogResp {
            return TenantLogResp.deserialize(bytes);
        }
    }
    export class TenantRouteListRequest extends pb_1.Message {
        #one_of_decls: number[][] = [[2], [3], [4]];
        constructor(data?: any[] | ({
            batch?: dependency_6.api.common.Page;
        } & (({
            name?: string;
        }) | ({
            url?: string;
        }) | ({
            pid?: number;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("batch" in data && data.batch != undefined) {
                    this.batch = data.batch;
                }
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
                if ("url" in data && data.url != undefined) {
                    this.url = data.url;
                }
                if ("pid" in data && data.pid != undefined) {
                    this.pid = data.pid;
                }
            }
        }
        get batch() {
            return pb_1.Message.getWrapperField(this, dependency_6.api.common.Page, 1) as dependency_6.api.common.Page;
        }
        set batch(value: dependency_6.api.common.Page) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_batch() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get name() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set name(value: string) {
            pb_1.Message.setOneofField(this, 2, this.#one_of_decls[0], value);
        }
        get has_name() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get url() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set url(value: string) {
            pb_1.Message.setOneofField(this, 3, this.#one_of_decls[1], value);
        }
        get has_url() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get pid() {
            return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
        }
        set pid(value: number) {
            pb_1.Message.setOneofField(this, 4, this.#one_of_decls[2], value);
        }
        get has_pid() {
            return pb_1.Message.getField(this, 4) != null;
        }
        get _name() {
            const cases: {
                [index: number]: "none" | "name";
            } = {
                0: "none",
                2: "name"
            };
            return cases[pb_1.Message.computeOneofCase(this, [2])];
        }
        get _url() {
            const cases: {
                [index: number]: "none" | "url";
            } = {
                0: "none",
                3: "url"
            };
            return cases[pb_1.Message.computeOneofCase(this, [3])];
        }
        get _pid() {
            const cases: {
                [index: number]: "none" | "pid";
            } = {
                0: "none",
                4: "pid"
            };
            return cases[pb_1.Message.computeOneofCase(this, [4])];
        }
        static fromObject(data: {
            batch?: ReturnType<typeof dependency_6.api.common.Page.prototype.toObject>;
            name?: string;
            url?: string;
            pid?: number;
        }): TenantRouteListRequest {
            const message = new TenantRouteListRequest({});
            if (data.batch != null) {
                message.batch = dependency_6.api.common.Page.fromObject(data.batch);
            }
            if (data.name != null) {
                message.name = data.name;
            }
            if (data.url != null) {
                message.url = data.url;
            }
            if (data.pid != null) {
                message.pid = data.pid;
            }
            return message;
        }
        toObject() {
            const data: {
                batch?: ReturnType<typeof dependency_6.api.common.Page.prototype.toObject>;
                name?: string;
                url?: string;
                pid?: number;
            } = {};
            if (this.batch != null) {
                data.batch = this.batch.toObject();
            }
            if (this.name != null) {
                data.name = this.name;
            }
            if (this.url != null) {
                data.url = this.url;
            }
            if (this.pid != null) {
                data.pid = this.pid;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_batch)
                writer.writeMessage(1, this.batch, () => this.batch.serialize(writer));
            if (this.has_name)
                writer.writeString(2, this.name);
            if (this.has_url)
                writer.writeString(3, this.url);
            if (this.has_pid)
                writer.writeInt32(4, this.pid);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): TenantRouteListRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new TenantRouteListRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.batch, () => message.batch = dependency_6.api.common.Page.deserialize(reader));
                        break;
                    case 2:
                        message.name = reader.readString();
                        break;
                    case 3:
                        message.url = reader.readString();
                        break;
                    case 4:
                        message.pid = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): TenantRouteListRequest {
            return TenantRouteListRequest.deserialize(bytes);
        }
    }
    export class TenantRouteListResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            batch?: dependency_6.api.common.Page;
            list?: dependency_8.api.common.TenantRoute[];
            total?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [2], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("batch" in data && data.batch != undefined) {
                    this.batch = data.batch;
                }
                if ("list" in data && data.list != undefined) {
                    this.list = data.list;
                }
                if ("total" in data && data.total != undefined) {
                    this.total = data.total;
                }
            }
        }
        get batch() {
            return pb_1.Message.getWrapperField(this, dependency_6.api.common.Page, 1) as dependency_6.api.common.Page;
        }
        set batch(value: dependency_6.api.common.Page) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_batch() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get list() {
            return pb_1.Message.getRepeatedWrapperField(this, dependency_8.api.common.TenantRoute, 2) as dependency_8.api.common.TenantRoute[];
        }
        set list(value: dependency_8.api.common.TenantRoute[]) {
            pb_1.Message.setRepeatedWrapperField(this, 2, value);
        }
        get total() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set total(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            batch?: ReturnType<typeof dependency_6.api.common.Page.prototype.toObject>;
            list?: ReturnType<typeof dependency_8.api.common.TenantRoute.prototype.toObject>[];
            total?: number;
        }): TenantRouteListResponse {
            const message = new TenantRouteListResponse({});
            if (data.batch != null) {
                message.batch = dependency_6.api.common.Page.fromObject(data.batch);
            }
            if (data.list != null) {
                message.list = data.list.map(item => dependency_8.api.common.TenantRoute.fromObject(item));
            }
            if (data.total != null) {
                message.total = data.total;
            }
            return message;
        }
        toObject() {
            const data: {
                batch?: ReturnType<typeof dependency_6.api.common.Page.prototype.toObject>;
                list?: ReturnType<typeof dependency_8.api.common.TenantRoute.prototype.toObject>[];
                total?: number;
            } = {};
            if (this.batch != null) {
                data.batch = this.batch.toObject();
            }
            if (this.list != null) {
                data.list = this.list.map((item: dependency_8.api.common.TenantRoute) => item.toObject());
            }
            if (this.total != null) {
                data.total = this.total;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_batch)
                writer.writeMessage(1, this.batch, () => this.batch.serialize(writer));
            if (this.list.length)
                writer.writeRepeatedMessage(2, this.list, (item: dependency_8.api.common.TenantRoute) => item.serialize(writer));
            if (this.total != 0)
                writer.writeInt32(3, this.total);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): TenantRouteListResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new TenantRouteListResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.batch, () => message.batch = dependency_6.api.common.Page.deserialize(reader));
                        break;
                    case 2:
                        reader.readMessage(message.list, () => pb_1.Message.addToRepeatedWrapperField(message, 2, dependency_8.api.common.TenantRoute.deserialize(reader), dependency_8.api.common.TenantRoute));
                        break;
                    case 3:
                        message.total = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): TenantRouteListResponse {
            return TenantRouteListResponse.deserialize(bytes);
        }
    }
    export class TenantRouteCreateRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            name?: string;
            url?: string;
            pid?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
                if ("url" in data && data.url != undefined) {
                    this.url = data.url;
                }
                if ("pid" in data && data.pid != undefined) {
                    this.pid = data.pid;
                }
            }
        }
        get name() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get url() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set url(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get pid() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set pid(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            name?: string;
            url?: string;
            pid?: number;
        }): TenantRouteCreateRequest {
            const message = new TenantRouteCreateRequest({});
            if (data.name != null) {
                message.name = data.name;
            }
            if (data.url != null) {
                message.url = data.url;
            }
            if (data.pid != null) {
                message.pid = data.pid;
            }
            return message;
        }
        toObject() {
            const data: {
                name?: string;
                url?: string;
                pid?: number;
            } = {};
            if (this.name != null) {
                data.name = this.name;
            }
            if (this.url != null) {
                data.url = this.url;
            }
            if (this.pid != null) {
                data.pid = this.pid;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.name.length)
                writer.writeString(1, this.name);
            if (this.url.length)
                writer.writeString(2, this.url);
            if (this.pid != 0)
                writer.writeInt32(3, this.pid);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): TenantRouteCreateRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new TenantRouteCreateRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.name = reader.readString();
                        break;
                    case 2:
                        message.url = reader.readString();
                        break;
                    case 3:
                        message.pid = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): TenantRouteCreateRequest {
            return TenantRouteCreateRequest.deserialize(bytes);
        }
    }
    export class TenantRouteUpdateRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            id?: number;
            name?: string;
            url?: string;
            pid?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
                if ("url" in data && data.url != undefined) {
                    this.url = data.url;
                }
                if ("pid" in data && data.pid != undefined) {
                    this.pid = data.pid;
                }
            }
        }
        get id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get name() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get url() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set url(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get pid() {
            return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
        }
        set pid(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            id?: number;
            name?: string;
            url?: string;
            pid?: number;
        }): TenantRouteUpdateRequest {
            const message = new TenantRouteUpdateRequest({});
            if (data.id != null) {
                message.id = data.id;
            }
            if (data.name != null) {
                message.name = data.name;
            }
            if (data.url != null) {
                message.url = data.url;
            }
            if (data.pid != null) {
                message.pid = data.pid;
            }
            return message;
        }
        toObject() {
            const data: {
                id?: number;
                name?: string;
                url?: string;
                pid?: number;
            } = {};
            if (this.id != null) {
                data.id = this.id;
            }
            if (this.name != null) {
                data.name = this.name;
            }
            if (this.url != null) {
                data.url = this.url;
            }
            if (this.pid != null) {
                data.pid = this.pid;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.id != 0)
                writer.writeInt32(1, this.id);
            if (this.name.length)
                writer.writeString(2, this.name);
            if (this.url.length)
                writer.writeString(3, this.url);
            if (this.pid != 0)
                writer.writeInt32(4, this.pid);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): TenantRouteUpdateRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new TenantRouteUpdateRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.id = reader.readInt32();
                        break;
                    case 2:
                        message.name = reader.readString();
                        break;
                    case 3:
                        message.url = reader.readString();
                        break;
                    case 4:
                        message.pid = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): TenantRouteUpdateRequest {
            return TenantRouteUpdateRequest.deserialize(bytes);
        }
    }
    export class TenantRouteDeleteRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            id?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
            }
        }
        get id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            id?: number;
        }): TenantRouteDeleteRequest {
            const message = new TenantRouteDeleteRequest({});
            if (data.id != null) {
                message.id = data.id;
            }
            return message;
        }
        toObject() {
            const data: {
                id?: number;
            } = {};
            if (this.id != null) {
                data.id = this.id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.id != 0)
                writer.writeInt32(1, this.id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): TenantRouteDeleteRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new TenantRouteDeleteRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.id = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): TenantRouteDeleteRequest {
            return TenantRouteDeleteRequest.deserialize(bytes);
        }
    }
    export class TenantRoleListRequest extends pb_1.Message {
        #one_of_decls: number[][] = [[2]];
        constructor(data?: any[] | ({
            batch?: dependency_6.api.common.Page;
        } & (({
            name?: string;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("batch" in data && data.batch != undefined) {
                    this.batch = data.batch;
                }
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
            }
        }
        get batch() {
            return pb_1.Message.getWrapperField(this, dependency_6.api.common.Page, 1) as dependency_6.api.common.Page;
        }
        set batch(value: dependency_6.api.common.Page) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_batch() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get name() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set name(value: string) {
            pb_1.Message.setOneofField(this, 2, this.#one_of_decls[0], value);
        }
        get has_name() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get _name() {
            const cases: {
                [index: number]: "none" | "name";
            } = {
                0: "none",
                2: "name"
            };
            return cases[pb_1.Message.computeOneofCase(this, [2])];
        }
        static fromObject(data: {
            batch?: ReturnType<typeof dependency_6.api.common.Page.prototype.toObject>;
            name?: string;
        }): TenantRoleListRequest {
            const message = new TenantRoleListRequest({});
            if (data.batch != null) {
                message.batch = dependency_6.api.common.Page.fromObject(data.batch);
            }
            if (data.name != null) {
                message.name = data.name;
            }
            return message;
        }
        toObject() {
            const data: {
                batch?: ReturnType<typeof dependency_6.api.common.Page.prototype.toObject>;
                name?: string;
            } = {};
            if (this.batch != null) {
                data.batch = this.batch.toObject();
            }
            if (this.name != null) {
                data.name = this.name;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_batch)
                writer.writeMessage(1, this.batch, () => this.batch.serialize(writer));
            if (this.has_name)
                writer.writeString(2, this.name);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): TenantRoleListRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new TenantRoleListRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.batch, () => message.batch = dependency_6.api.common.Page.deserialize(reader));
                        break;
                    case 2:
                        message.name = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): TenantRoleListRequest {
            return TenantRoleListRequest.deserialize(bytes);
        }
    }
    export class TenantRoleListResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            batch?: dependency_6.api.common.Page;
            list?: dependency_8.api.common.TenantRole[];
            total?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [2], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("batch" in data && data.batch != undefined) {
                    this.batch = data.batch;
                }
                if ("list" in data && data.list != undefined) {
                    this.list = data.list;
                }
                if ("total" in data && data.total != undefined) {
                    this.total = data.total;
                }
            }
        }
        get batch() {
            return pb_1.Message.getWrapperField(this, dependency_6.api.common.Page, 1) as dependency_6.api.common.Page;
        }
        set batch(value: dependency_6.api.common.Page) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_batch() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get list() {
            return pb_1.Message.getRepeatedWrapperField(this, dependency_8.api.common.TenantRole, 2) as dependency_8.api.common.TenantRole[];
        }
        set list(value: dependency_8.api.common.TenantRole[]) {
            pb_1.Message.setRepeatedWrapperField(this, 2, value);
        }
        get total() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set total(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            batch?: ReturnType<typeof dependency_6.api.common.Page.prototype.toObject>;
            list?: ReturnType<typeof dependency_8.api.common.TenantRole.prototype.toObject>[];
            total?: number;
        }): TenantRoleListResponse {
            const message = new TenantRoleListResponse({});
            if (data.batch != null) {
                message.batch = dependency_6.api.common.Page.fromObject(data.batch);
            }
            if (data.list != null) {
                message.list = data.list.map(item => dependency_8.api.common.TenantRole.fromObject(item));
            }
            if (data.total != null) {
                message.total = data.total;
            }
            return message;
        }
        toObject() {
            const data: {
                batch?: ReturnType<typeof dependency_6.api.common.Page.prototype.toObject>;
                list?: ReturnType<typeof dependency_8.api.common.TenantRole.prototype.toObject>[];
                total?: number;
            } = {};
            if (this.batch != null) {
                data.batch = this.batch.toObject();
            }
            if (this.list != null) {
                data.list = this.list.map((item: dependency_8.api.common.TenantRole) => item.toObject());
            }
            if (this.total != null) {
                data.total = this.total;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_batch)
                writer.writeMessage(1, this.batch, () => this.batch.serialize(writer));
            if (this.list.length)
                writer.writeRepeatedMessage(2, this.list, (item: dependency_8.api.common.TenantRole) => item.serialize(writer));
            if (this.total != 0)
                writer.writeInt32(3, this.total);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): TenantRoleListResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new TenantRoleListResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.batch, () => message.batch = dependency_6.api.common.Page.deserialize(reader));
                        break;
                    case 2:
                        reader.readMessage(message.list, () => pb_1.Message.addToRepeatedWrapperField(message, 2, dependency_8.api.common.TenantRole.deserialize(reader), dependency_8.api.common.TenantRole));
                        break;
                    case 3:
                        message.total = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): TenantRoleListResponse {
            return TenantRoleListResponse.deserialize(bytes);
        }
    }
    export class TenantRoleCreateRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            name?: string;
            is_super?: dependency_8.api.common.TenantIsSuper;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
                if ("is_super" in data && data.is_super != undefined) {
                    this.is_super = data.is_super;
                }
            }
        }
        get name() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get is_super() {
            return pb_1.Message.getFieldWithDefault(this, 2, dependency_8.api.common.TenantIsSuper.IS_SUPER_DEFAULT) as dependency_8.api.common.TenantIsSuper;
        }
        set is_super(value: dependency_8.api.common.TenantIsSuper) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            name?: string;
            is_super?: dependency_8.api.common.TenantIsSuper;
        }): TenantRoleCreateRequest {
            const message = new TenantRoleCreateRequest({});
            if (data.name != null) {
                message.name = data.name;
            }
            if (data.is_super != null) {
                message.is_super = data.is_super;
            }
            return message;
        }
        toObject() {
            const data: {
                name?: string;
                is_super?: dependency_8.api.common.TenantIsSuper;
            } = {};
            if (this.name != null) {
                data.name = this.name;
            }
            if (this.is_super != null) {
                data.is_super = this.is_super;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.name.length)
                writer.writeString(1, this.name);
            if (this.is_super != dependency_8.api.common.TenantIsSuper.IS_SUPER_DEFAULT)
                writer.writeEnum(2, this.is_super);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): TenantRoleCreateRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new TenantRoleCreateRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.name = reader.readString();
                        break;
                    case 2:
                        message.is_super = reader.readEnum();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): TenantRoleCreateRequest {
            return TenantRoleCreateRequest.deserialize(bytes);
        }
    }
    export class TenantRoleUpdateRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            id?: number;
            name?: string;
            is_super?: dependency_8.api.common.TenantIsSuper;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
                if ("is_super" in data && data.is_super != undefined) {
                    this.is_super = data.is_super;
                }
            }
        }
        get id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get name() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get is_super() {
            return pb_1.Message.getFieldWithDefault(this, 3, dependency_8.api.common.TenantIsSuper.IS_SUPER_DEFAULT) as dependency_8.api.common.TenantIsSuper;
        }
        set is_super(value: dependency_8.api.common.TenantIsSuper) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            id?: number;
            name?: string;
            is_super?: dependency_8.api.common.TenantIsSuper;
        }): TenantRoleUpdateRequest {
            const message = new TenantRoleUpdateRequest({});
            if (data.id != null) {
                message.id = data.id;
            }
            if (data.name != null) {
                message.name = data.name;
            }
            if (data.is_super != null) {
                message.is_super = data.is_super;
            }
            return message;
        }
        toObject() {
            const data: {
                id?: number;
                name?: string;
                is_super?: dependency_8.api.common.TenantIsSuper;
            } = {};
            if (this.id != null) {
                data.id = this.id;
            }
            if (this.name != null) {
                data.name = this.name;
            }
            if (this.is_super != null) {
                data.is_super = this.is_super;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.id != 0)
                writer.writeInt32(1, this.id);
            if (this.name.length)
                writer.writeString(2, this.name);
            if (this.is_super != dependency_8.api.common.TenantIsSuper.IS_SUPER_DEFAULT)
                writer.writeEnum(3, this.is_super);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): TenantRoleUpdateRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new TenantRoleUpdateRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.id = reader.readInt32();
                        break;
                    case 2:
                        message.name = reader.readString();
                        break;
                    case 3:
                        message.is_super = reader.readEnum();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): TenantRoleUpdateRequest {
            return TenantRoleUpdateRequest.deserialize(bytes);
        }
    }
    export class TenantRoleDeleteRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            id?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
            }
        }
        get id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            id?: number;
        }): TenantRoleDeleteRequest {
            const message = new TenantRoleDeleteRequest({});
            if (data.id != null) {
                message.id = data.id;
            }
            return message;
        }
        toObject() {
            const data: {
                id?: number;
            } = {};
            if (this.id != null) {
                data.id = this.id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.id != 0)
                writer.writeInt32(1, this.id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): TenantRoleDeleteRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new TenantRoleDeleteRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.id = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): TenantRoleDeleteRequest {
            return TenantRoleDeleteRequest.deserialize(bytes);
        }
    }
    export class TenantRoleRouteRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            role_id?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("role_id" in data && data.role_id != undefined) {
                    this.role_id = data.role_id;
                }
            }
        }
        get role_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set role_id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            role_id?: number;
        }): TenantRoleRouteRequest {
            const message = new TenantRoleRouteRequest({});
            if (data.role_id != null) {
                message.role_id = data.role_id;
            }
            return message;
        }
        toObject() {
            const data: {
                role_id?: number;
            } = {};
            if (this.role_id != null) {
                data.role_id = this.role_id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.role_id != 0)
                writer.writeInt32(1, this.role_id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): TenantRoleRouteRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new TenantRoleRouteRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.role_id = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): TenantRoleRouteRequest {
            return TenantRoleRouteRequest.deserialize(bytes);
        }
    }
    export class TenantRoleRouteResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            list?: dependency_8.api.common.TenantRouteWithItem[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("list" in data && data.list != undefined) {
                    this.list = data.list;
                }
            }
        }
        get list() {
            return pb_1.Message.getRepeatedWrapperField(this, dependency_8.api.common.TenantRouteWithItem, 1) as dependency_8.api.common.TenantRouteWithItem[];
        }
        set list(value: dependency_8.api.common.TenantRouteWithItem[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        static fromObject(data: {
            list?: ReturnType<typeof dependency_8.api.common.TenantRouteWithItem.prototype.toObject>[];
        }): TenantRoleRouteResponse {
            const message = new TenantRoleRouteResponse({});
            if (data.list != null) {
                message.list = data.list.map(item => dependency_8.api.common.TenantRouteWithItem.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                list?: ReturnType<typeof dependency_8.api.common.TenantRouteWithItem.prototype.toObject>[];
            } = {};
            if (this.list != null) {
                data.list = this.list.map((item: dependency_8.api.common.TenantRouteWithItem) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.list.length)
                writer.writeRepeatedMessage(1, this.list, (item: dependency_8.api.common.TenantRouteWithItem) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): TenantRoleRouteResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new TenantRoleRouteResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.list, () => pb_1.Message.addToRepeatedWrapperField(message, 1, dependency_8.api.common.TenantRouteWithItem.deserialize(reader), dependency_8.api.common.TenantRouteWithItem));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): TenantRoleRouteResponse {
            return TenantRoleRouteResponse.deserialize(bytes);
        }
    }
    export class TenantRoleRouteUpdateRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            role_id?: number;
            route_ids?: number[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [2], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("role_id" in data && data.role_id != undefined) {
                    this.role_id = data.role_id;
                }
                if ("route_ids" in data && data.route_ids != undefined) {
                    this.route_ids = data.route_ids;
                }
            }
        }
        get role_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set role_id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get route_ids() {
            return pb_1.Message.getFieldWithDefault(this, 2, []) as number[];
        }
        set route_ids(value: number[]) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            role_id?: number;
            route_ids?: number[];
        }): TenantRoleRouteUpdateRequest {
            const message = new TenantRoleRouteUpdateRequest({});
            if (data.role_id != null) {
                message.role_id = data.role_id;
            }
            if (data.route_ids != null) {
                message.route_ids = data.route_ids;
            }
            return message;
        }
        toObject() {
            const data: {
                role_id?: number;
                route_ids?: number[];
            } = {};
            if (this.role_id != null) {
                data.role_id = this.role_id;
            }
            if (this.route_ids != null) {
                data.route_ids = this.route_ids;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.role_id != 0)
                writer.writeInt32(1, this.role_id);
            if (this.route_ids.length)
                writer.writePackedInt32(2, this.route_ids);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): TenantRoleRouteUpdateRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new TenantRoleRouteUpdateRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.role_id = reader.readInt32();
                        break;
                    case 2:
                        message.route_ids = reader.readPackedInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): TenantRoleRouteUpdateRequest {
            return TenantRoleRouteUpdateRequest.deserialize(bytes);
        }
    }
    export class TenantManagerListRequest extends pb_1.Message {
        #one_of_decls: number[][] = [[2], [4], [5]];
        constructor(data?: any[] | ({
            batch?: dependency_6.api.common.Page;
        } & (({
            account?: string;
        }) | ({
            role_id?: number;
        }) | ({
            status?: dependency_6.api.common.DisableStatus;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("batch" in data && data.batch != undefined) {
                    this.batch = data.batch;
                }
                if ("account" in data && data.account != undefined) {
                    this.account = data.account;
                }
                if ("role_id" in data && data.role_id != undefined) {
                    this.role_id = data.role_id;
                }
                if ("status" in data && data.status != undefined) {
                    this.status = data.status;
                }
            }
        }
        get batch() {
            return pb_1.Message.getWrapperField(this, dependency_6.api.common.Page, 1) as dependency_6.api.common.Page;
        }
        set batch(value: dependency_6.api.common.Page) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_batch() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get account() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set account(value: string) {
            pb_1.Message.setOneofField(this, 2, this.#one_of_decls[0], value);
        }
        get has_account() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get role_id() {
            return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
        }
        set role_id(value: number) {
            pb_1.Message.setOneofField(this, 4, this.#one_of_decls[1], value);
        }
        get has_role_id() {
            return pb_1.Message.getField(this, 4) != null;
        }
        get status() {
            return pb_1.Message.getFieldWithDefault(this, 5, dependency_6.api.common.DisableStatus.DEFAULT) as dependency_6.api.common.DisableStatus;
        }
        set status(value: dependency_6.api.common.DisableStatus) {
            pb_1.Message.setOneofField(this, 5, this.#one_of_decls[2], value);
        }
        get has_status() {
            return pb_1.Message.getField(this, 5) != null;
        }
        get _account() {
            const cases: {
                [index: number]: "none" | "account";
            } = {
                0: "none",
                2: "account"
            };
            return cases[pb_1.Message.computeOneofCase(this, [2])];
        }
        get _role_id() {
            const cases: {
                [index: number]: "none" | "role_id";
            } = {
                0: "none",
                4: "role_id"
            };
            return cases[pb_1.Message.computeOneofCase(this, [4])];
        }
        get _status() {
            const cases: {
                [index: number]: "none" | "status";
            } = {
                0: "none",
                5: "status"
            };
            return cases[pb_1.Message.computeOneofCase(this, [5])];
        }
        static fromObject(data: {
            batch?: ReturnType<typeof dependency_6.api.common.Page.prototype.toObject>;
            account?: string;
            role_id?: number;
            status?: dependency_6.api.common.DisableStatus;
        }): TenantManagerListRequest {
            const message = new TenantManagerListRequest({});
            if (data.batch != null) {
                message.batch = dependency_6.api.common.Page.fromObject(data.batch);
            }
            if (data.account != null) {
                message.account = data.account;
            }
            if (data.role_id != null) {
                message.role_id = data.role_id;
            }
            if (data.status != null) {
                message.status = data.status;
            }
            return message;
        }
        toObject() {
            const data: {
                batch?: ReturnType<typeof dependency_6.api.common.Page.prototype.toObject>;
                account?: string;
                role_id?: number;
                status?: dependency_6.api.common.DisableStatus;
            } = {};
            if (this.batch != null) {
                data.batch = this.batch.toObject();
            }
            if (this.account != null) {
                data.account = this.account;
            }
            if (this.role_id != null) {
                data.role_id = this.role_id;
            }
            if (this.status != null) {
                data.status = this.status;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_batch)
                writer.writeMessage(1, this.batch, () => this.batch.serialize(writer));
            if (this.has_account)
                writer.writeString(2, this.account);
            if (this.has_role_id)
                writer.writeInt32(4, this.role_id);
            if (this.has_status)
                writer.writeEnum(5, this.status);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): TenantManagerListRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new TenantManagerListRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.batch, () => message.batch = dependency_6.api.common.Page.deserialize(reader));
                        break;
                    case 2:
                        message.account = reader.readString();
                        break;
                    case 4:
                        message.role_id = reader.readInt32();
                        break;
                    case 5:
                        message.status = reader.readEnum();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): TenantManagerListRequest {
            return TenantManagerListRequest.deserialize(bytes);
        }
    }
    export class TenantManagerListResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            batch?: dependency_6.api.common.Page;
            list?: dependency_8.api.common.TenantManager[];
            total?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [2], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("batch" in data && data.batch != undefined) {
                    this.batch = data.batch;
                }
                if ("list" in data && data.list != undefined) {
                    this.list = data.list;
                }
                if ("total" in data && data.total != undefined) {
                    this.total = data.total;
                }
            }
        }
        get batch() {
            return pb_1.Message.getWrapperField(this, dependency_6.api.common.Page, 1) as dependency_6.api.common.Page;
        }
        set batch(value: dependency_6.api.common.Page) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_batch() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get list() {
            return pb_1.Message.getRepeatedWrapperField(this, dependency_8.api.common.TenantManager, 2) as dependency_8.api.common.TenantManager[];
        }
        set list(value: dependency_8.api.common.TenantManager[]) {
            pb_1.Message.setRepeatedWrapperField(this, 2, value);
        }
        get total() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set total(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            batch?: ReturnType<typeof dependency_6.api.common.Page.prototype.toObject>;
            list?: ReturnType<typeof dependency_8.api.common.TenantManager.prototype.toObject>[];
            total?: number;
        }): TenantManagerListResponse {
            const message = new TenantManagerListResponse({});
            if (data.batch != null) {
                message.batch = dependency_6.api.common.Page.fromObject(data.batch);
            }
            if (data.list != null) {
                message.list = data.list.map(item => dependency_8.api.common.TenantManager.fromObject(item));
            }
            if (data.total != null) {
                message.total = data.total;
            }
            return message;
        }
        toObject() {
            const data: {
                batch?: ReturnType<typeof dependency_6.api.common.Page.prototype.toObject>;
                list?: ReturnType<typeof dependency_8.api.common.TenantManager.prototype.toObject>[];
                total?: number;
            } = {};
            if (this.batch != null) {
                data.batch = this.batch.toObject();
            }
            if (this.list != null) {
                data.list = this.list.map((item: dependency_8.api.common.TenantManager) => item.toObject());
            }
            if (this.total != null) {
                data.total = this.total;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_batch)
                writer.writeMessage(1, this.batch, () => this.batch.serialize(writer));
            if (this.list.length)
                writer.writeRepeatedMessage(2, this.list, (item: dependency_8.api.common.TenantManager) => item.serialize(writer));
            if (this.total != 0)
                writer.writeInt32(3, this.total);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): TenantManagerListResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new TenantManagerListResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.batch, () => message.batch = dependency_6.api.common.Page.deserialize(reader));
                        break;
                    case 2:
                        reader.readMessage(message.list, () => pb_1.Message.addToRepeatedWrapperField(message, 2, dependency_8.api.common.TenantManager.deserialize(reader), dependency_8.api.common.TenantManager));
                        break;
                    case 3:
                        message.total = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): TenantManagerListResponse {
            return TenantManagerListResponse.deserialize(bytes);
        }
    }
    export class TenantManagerCreateRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            account?: string;
            password?: string;
            role_id?: number;
            status?: dependency_6.api.common.DisableStatus;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("account" in data && data.account != undefined) {
                    this.account = data.account;
                }
                if ("password" in data && data.password != undefined) {
                    this.password = data.password;
                }
                if ("role_id" in data && data.role_id != undefined) {
                    this.role_id = data.role_id;
                }
                if ("status" in data && data.status != undefined) {
                    this.status = data.status;
                }
            }
        }
        get account() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set account(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get password() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set password(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get role_id() {
            return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
        }
        set role_id(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        get status() {
            return pb_1.Message.getFieldWithDefault(this, 5, dependency_6.api.common.DisableStatus.DEFAULT) as dependency_6.api.common.DisableStatus;
        }
        set status(value: dependency_6.api.common.DisableStatus) {
            pb_1.Message.setField(this, 5, value);
        }
        static fromObject(data: {
            account?: string;
            password?: string;
            role_id?: number;
            status?: dependency_6.api.common.DisableStatus;
        }): TenantManagerCreateRequest {
            const message = new TenantManagerCreateRequest({});
            if (data.account != null) {
                message.account = data.account;
            }
            if (data.password != null) {
                message.password = data.password;
            }
            if (data.role_id != null) {
                message.role_id = data.role_id;
            }
            if (data.status != null) {
                message.status = data.status;
            }
            return message;
        }
        toObject() {
            const data: {
                account?: string;
                password?: string;
                role_id?: number;
                status?: dependency_6.api.common.DisableStatus;
            } = {};
            if (this.account != null) {
                data.account = this.account;
            }
            if (this.password != null) {
                data.password = this.password;
            }
            if (this.role_id != null) {
                data.role_id = this.role_id;
            }
            if (this.status != null) {
                data.status = this.status;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.account.length)
                writer.writeString(2, this.account);
            if (this.password.length)
                writer.writeString(3, this.password);
            if (this.role_id != 0)
                writer.writeInt32(4, this.role_id);
            if (this.status != dependency_6.api.common.DisableStatus.DEFAULT)
                writer.writeEnum(5, this.status);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): TenantManagerCreateRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new TenantManagerCreateRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 2:
                        message.account = reader.readString();
                        break;
                    case 3:
                        message.password = reader.readString();
                        break;
                    case 4:
                        message.role_id = reader.readInt32();
                        break;
                    case 5:
                        message.status = reader.readEnum();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): TenantManagerCreateRequest {
            return TenantManagerCreateRequest.deserialize(bytes);
        }
    }
    export class TenantManagerUpdateRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            id?: number;
            account?: string;
            password?: string;
            role_id?: number;
            status?: dependency_6.api.common.DisableStatus;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
                if ("account" in data && data.account != undefined) {
                    this.account = data.account;
                }
                if ("password" in data && data.password != undefined) {
                    this.password = data.password;
                }
                if ("role_id" in data && data.role_id != undefined) {
                    this.role_id = data.role_id;
                }
                if ("status" in data && data.status != undefined) {
                    this.status = data.status;
                }
            }
        }
        get id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get account() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set account(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get password() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set password(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get role_id() {
            return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
        }
        set role_id(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        get status() {
            return pb_1.Message.getFieldWithDefault(this, 5, dependency_6.api.common.DisableStatus.DEFAULT) as dependency_6.api.common.DisableStatus;
        }
        set status(value: dependency_6.api.common.DisableStatus) {
            pb_1.Message.setField(this, 5, value);
        }
        static fromObject(data: {
            id?: number;
            account?: string;
            password?: string;
            role_id?: number;
            status?: dependency_6.api.common.DisableStatus;
        }): TenantManagerUpdateRequest {
            const message = new TenantManagerUpdateRequest({});
            if (data.id != null) {
                message.id = data.id;
            }
            if (data.account != null) {
                message.account = data.account;
            }
            if (data.password != null) {
                message.password = data.password;
            }
            if (data.role_id != null) {
                message.role_id = data.role_id;
            }
            if (data.status != null) {
                message.status = data.status;
            }
            return message;
        }
        toObject() {
            const data: {
                id?: number;
                account?: string;
                password?: string;
                role_id?: number;
                status?: dependency_6.api.common.DisableStatus;
            } = {};
            if (this.id != null) {
                data.id = this.id;
            }
            if (this.account != null) {
                data.account = this.account;
            }
            if (this.password != null) {
                data.password = this.password;
            }
            if (this.role_id != null) {
                data.role_id = this.role_id;
            }
            if (this.status != null) {
                data.status = this.status;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.id != 0)
                writer.writeInt32(1, this.id);
            if (this.account.length)
                writer.writeString(2, this.account);
            if (this.password.length)
                writer.writeString(3, this.password);
            if (this.role_id != 0)
                writer.writeInt32(4, this.role_id);
            if (this.status != dependency_6.api.common.DisableStatus.DEFAULT)
                writer.writeEnum(5, this.status);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): TenantManagerUpdateRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new TenantManagerUpdateRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.id = reader.readInt32();
                        break;
                    case 2:
                        message.account = reader.readString();
                        break;
                    case 3:
                        message.password = reader.readString();
                        break;
                    case 4:
                        message.role_id = reader.readInt32();
                        break;
                    case 5:
                        message.status = reader.readEnum();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): TenantManagerUpdateRequest {
            return TenantManagerUpdateRequest.deserialize(bytes);
        }
    }
    export class TenantManagerDeleteRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            id?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
            }
        }
        get id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            id?: number;
        }): TenantManagerDeleteRequest {
            const message = new TenantManagerDeleteRequest({});
            if (data.id != null) {
                message.id = data.id;
            }
            return message;
        }
        toObject() {
            const data: {
                id?: number;
            } = {};
            if (this.id != null) {
                data.id = this.id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.id != 0)
                writer.writeInt32(1, this.id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): TenantManagerDeleteRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new TenantManagerDeleteRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.id = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): TenantManagerDeleteRequest {
            return TenantManagerDeleteRequest.deserialize(bytes);
        }
    }
    export class TenantManagerDisableRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            id?: number;
            status?: dependency_6.api.common.DisableStatus;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
                if ("status" in data && data.status != undefined) {
                    this.status = data.status;
                }
            }
        }
        get id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get status() {
            return pb_1.Message.getFieldWithDefault(this, 2, dependency_6.api.common.DisableStatus.DEFAULT) as dependency_6.api.common.DisableStatus;
        }
        set status(value: dependency_6.api.common.DisableStatus) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            id?: number;
            status?: dependency_6.api.common.DisableStatus;
        }): TenantManagerDisableRequest {
            const message = new TenantManagerDisableRequest({});
            if (data.id != null) {
                message.id = data.id;
            }
            if (data.status != null) {
                message.status = data.status;
            }
            return message;
        }
        toObject() {
            const data: {
                id?: number;
                status?: dependency_6.api.common.DisableStatus;
            } = {};
            if (this.id != null) {
                data.id = this.id;
            }
            if (this.status != null) {
                data.status = this.status;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.id != 0)
                writer.writeInt32(1, this.id);
            if (this.status != dependency_6.api.common.DisableStatus.DEFAULT)
                writer.writeEnum(2, this.status);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): TenantManagerDisableRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new TenantManagerDisableRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.id = reader.readInt32();
                        break;
                    case 2:
                        message.status = reader.readEnum();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): TenantManagerDisableRequest {
            return TenantManagerDisableRequest.deserialize(bytes);
        }
    }
    export class TenantManagerLoginRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            account?: string;
            password?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("account" in data && data.account != undefined) {
                    this.account = data.account;
                }
                if ("password" in data && data.password != undefined) {
                    this.password = data.password;
                }
            }
        }
        get account() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set account(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get password() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set password(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            account?: string;
            password?: string;
        }): TenantManagerLoginRequest {
            const message = new TenantManagerLoginRequest({});
            if (data.account != null) {
                message.account = data.account;
            }
            if (data.password != null) {
                message.password = data.password;
            }
            return message;
        }
        toObject() {
            const data: {
                account?: string;
                password?: string;
            } = {};
            if (this.account != null) {
                data.account = this.account;
            }
            if (this.password != null) {
                data.password = this.password;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.account.length)
                writer.writeString(1, this.account);
            if (this.password.length)
                writer.writeString(2, this.password);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): TenantManagerLoginRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new TenantManagerLoginRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.account = reader.readString();
                        break;
                    case 2:
                        message.password = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): TenantManagerLoginRequest {
            return TenantManagerLoginRequest.deserialize(bytes);
        }
    }
    export class TenantManagerLoginResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            token?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("token" in data && data.token != undefined) {
                    this.token = data.token;
                }
            }
        }
        get token() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set token(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            token?: string;
        }): TenantManagerLoginResponse {
            const message = new TenantManagerLoginResponse({});
            if (data.token != null) {
                message.token = data.token;
            }
            return message;
        }
        toObject() {
            const data: {
                token?: string;
            } = {};
            if (this.token != null) {
                data.token = this.token;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.token.length)
                writer.writeString(1, this.token);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): TenantManagerLoginResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new TenantManagerLoginResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.token = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): TenantManagerLoginResponse {
            return TenantManagerLoginResponse.deserialize(bytes);
        }
    }
    export class GetTenantSystemSettingResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            copy_config?: CopyConfig;
            expire_time?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("copy_config" in data && data.copy_config != undefined) {
                    this.copy_config = data.copy_config;
                }
                if ("expire_time" in data && data.expire_time != undefined) {
                    this.expire_time = data.expire_time;
                }
            }
        }
        get copy_config() {
            return pb_1.Message.getWrapperField(this, CopyConfig, 1) as CopyConfig;
        }
        set copy_config(value: CopyConfig) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_copy_config() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get expire_time() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set expire_time(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            copy_config?: ReturnType<typeof CopyConfig.prototype.toObject>;
            expire_time?: number;
        }): GetTenantSystemSettingResponse {
            const message = new GetTenantSystemSettingResponse({});
            if (data.copy_config != null) {
                message.copy_config = CopyConfig.fromObject(data.copy_config);
            }
            if (data.expire_time != null) {
                message.expire_time = data.expire_time;
            }
            return message;
        }
        toObject() {
            const data: {
                copy_config?: ReturnType<typeof CopyConfig.prototype.toObject>;
                expire_time?: number;
            } = {};
            if (this.copy_config != null) {
                data.copy_config = this.copy_config.toObject();
            }
            if (this.expire_time != null) {
                data.expire_time = this.expire_time;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_copy_config)
                writer.writeMessage(1, this.copy_config, () => this.copy_config.serialize(writer));
            if (this.expire_time != 0)
                writer.writeInt32(2, this.expire_time);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetTenantSystemSettingResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetTenantSystemSettingResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.copy_config, () => message.copy_config = CopyConfig.deserialize(reader));
                        break;
                    case 2:
                        message.expire_time = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetTenantSystemSettingResponse {
            return GetTenantSystemSettingResponse.deserialize(bytes);
        }
    }
    export class CopyConfig extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            copy_types?: copyType[];
            current_copy_type?: dependency_8.api.common.TenantCopyType;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("copy_types" in data && data.copy_types != undefined) {
                    this.copy_types = data.copy_types;
                }
                if ("current_copy_type" in data && data.current_copy_type != undefined) {
                    this.current_copy_type = data.current_copy_type;
                }
            }
        }
        get copy_types() {
            return pb_1.Message.getRepeatedWrapperField(this, copyType, 1) as copyType[];
        }
        set copy_types(value: copyType[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        get current_copy_type() {
            return pb_1.Message.getFieldWithDefault(this, 2, dependency_8.api.common.TenantCopyType.TCT_UNKNOWN) as dependency_8.api.common.TenantCopyType;
        }
        set current_copy_type(value: dependency_8.api.common.TenantCopyType) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            copy_types?: ReturnType<typeof copyType.prototype.toObject>[];
            current_copy_type?: dependency_8.api.common.TenantCopyType;
        }): CopyConfig {
            const message = new CopyConfig({});
            if (data.copy_types != null) {
                message.copy_types = data.copy_types.map(item => copyType.fromObject(item));
            }
            if (data.current_copy_type != null) {
                message.current_copy_type = data.current_copy_type;
            }
            return message;
        }
        toObject() {
            const data: {
                copy_types?: ReturnType<typeof copyType.prototype.toObject>[];
                current_copy_type?: dependency_8.api.common.TenantCopyType;
            } = {};
            if (this.copy_types != null) {
                data.copy_types = this.copy_types.map((item: copyType) => item.toObject());
            }
            if (this.current_copy_type != null) {
                data.current_copy_type = this.current_copy_type;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.copy_types.length)
                writer.writeRepeatedMessage(1, this.copy_types, (item: copyType) => item.serialize(writer));
            if (this.current_copy_type != dependency_8.api.common.TenantCopyType.TCT_UNKNOWN)
                writer.writeEnum(2, this.current_copy_type);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CopyConfig {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CopyConfig();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.copy_types, () => pb_1.Message.addToRepeatedWrapperField(message, 1, copyType.deserialize(reader), copyType));
                        break;
                    case 2:
                        message.current_copy_type = reader.readEnum();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CopyConfig {
            return CopyConfig.deserialize(bytes);
        }
    }
    export class copyType extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            copy_type?: dependency_8.api.common.TenantCopyType;
            title?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("copy_type" in data && data.copy_type != undefined) {
                    this.copy_type = data.copy_type;
                }
                if ("title" in data && data.title != undefined) {
                    this.title = data.title;
                }
            }
        }
        get copy_type() {
            return pb_1.Message.getFieldWithDefault(this, 1, dependency_8.api.common.TenantCopyType.TCT_UNKNOWN) as dependency_8.api.common.TenantCopyType;
        }
        set copy_type(value: dependency_8.api.common.TenantCopyType) {
            pb_1.Message.setField(this, 1, value);
        }
        get title() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set title(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            copy_type?: dependency_8.api.common.TenantCopyType;
            title?: string;
        }): copyType {
            const message = new copyType({});
            if (data.copy_type != null) {
                message.copy_type = data.copy_type;
            }
            if (data.title != null) {
                message.title = data.title;
            }
            return message;
        }
        toObject() {
            const data: {
                copy_type?: dependency_8.api.common.TenantCopyType;
                title?: string;
            } = {};
            if (this.copy_type != null) {
                data.copy_type = this.copy_type;
            }
            if (this.title != null) {
                data.title = this.title;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.copy_type != dependency_8.api.common.TenantCopyType.TCT_UNKNOWN)
                writer.writeEnum(1, this.copy_type);
            if (this.title.length)
                writer.writeString(2, this.title);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): copyType {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new copyType();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.copy_type = reader.readEnum();
                        break;
                    case 2:
                        message.title = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): copyType {
            return copyType.deserialize(bytes);
        }
    }
    export class SetTenantSystemSettingRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            copy_type?: dependency_8.api.common.TenantCopyType;
            expire_time?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("copy_type" in data && data.copy_type != undefined) {
                    this.copy_type = data.copy_type;
                }
                if ("expire_time" in data && data.expire_time != undefined) {
                    this.expire_time = data.expire_time;
                }
            }
        }
        get copy_type() {
            return pb_1.Message.getFieldWithDefault(this, 1, dependency_8.api.common.TenantCopyType.TCT_UNKNOWN) as dependency_8.api.common.TenantCopyType;
        }
        set copy_type(value: dependency_8.api.common.TenantCopyType) {
            pb_1.Message.setField(this, 1, value);
        }
        get expire_time() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set expire_time(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            copy_type?: dependency_8.api.common.TenantCopyType;
            expire_time?: number;
        }): SetTenantSystemSettingRequest {
            const message = new SetTenantSystemSettingRequest({});
            if (data.copy_type != null) {
                message.copy_type = data.copy_type;
            }
            if (data.expire_time != null) {
                message.expire_time = data.expire_time;
            }
            return message;
        }
        toObject() {
            const data: {
                copy_type?: dependency_8.api.common.TenantCopyType;
                expire_time?: number;
            } = {};
            if (this.copy_type != null) {
                data.copy_type = this.copy_type;
            }
            if (this.expire_time != null) {
                data.expire_time = this.expire_time;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.copy_type != dependency_8.api.common.TenantCopyType.TCT_UNKNOWN)
                writer.writeEnum(1, this.copy_type);
            if (this.expire_time != 0)
                writer.writeInt32(2, this.expire_time);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SetTenantSystemSettingRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SetTenantSystemSettingRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.copy_type = reader.readEnum();
                        break;
                    case 2:
                        message.expire_time = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): SetTenantSystemSettingRequest {
            return SetTenantSystemSettingRequest.deserialize(bytes);
        }
    }
    export class WorkerSessionActivityLogRequest extends pb_1.Message {
        #one_of_decls: number[][] = [[3], [4], [5], [6]];
        constructor(data?: any[] | ({
            page?: number;
            pageSize?: number;
        } & (({
            account?: string;
        }) | ({
            ip?: string;
        }) | ({
            begin?: string;
        }) | ({
            end?: string;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("page" in data && data.page != undefined) {
                    this.page = data.page;
                }
                if ("pageSize" in data && data.pageSize != undefined) {
                    this.pageSize = data.pageSize;
                }
                if ("account" in data && data.account != undefined) {
                    this.account = data.account;
                }
                if ("ip" in data && data.ip != undefined) {
                    this.ip = data.ip;
                }
                if ("begin" in data && data.begin != undefined) {
                    this.begin = data.begin;
                }
                if ("end" in data && data.end != undefined) {
                    this.end = data.end;
                }
            }
        }
        get page() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set page(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get pageSize() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set pageSize(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get account() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set account(value: string) {
            pb_1.Message.setOneofField(this, 3, this.#one_of_decls[0], value);
        }
        get has_account() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get ip() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set ip(value: string) {
            pb_1.Message.setOneofField(this, 4, this.#one_of_decls[1], value);
        }
        get has_ip() {
            return pb_1.Message.getField(this, 4) != null;
        }
        get begin() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set begin(value: string) {
            pb_1.Message.setOneofField(this, 5, this.#one_of_decls[2], value);
        }
        get has_begin() {
            return pb_1.Message.getField(this, 5) != null;
        }
        get end() {
            return pb_1.Message.getFieldWithDefault(this, 6, "") as string;
        }
        set end(value: string) {
            pb_1.Message.setOneofField(this, 6, this.#one_of_decls[3], value);
        }
        get has_end() {
            return pb_1.Message.getField(this, 6) != null;
        }
        get _account() {
            const cases: {
                [index: number]: "none" | "account";
            } = {
                0: "none",
                3: "account"
            };
            return cases[pb_1.Message.computeOneofCase(this, [3])];
        }
        get _ip() {
            const cases: {
                [index: number]: "none" | "ip";
            } = {
                0: "none",
                4: "ip"
            };
            return cases[pb_1.Message.computeOneofCase(this, [4])];
        }
        get _begin() {
            const cases: {
                [index: number]: "none" | "begin";
            } = {
                0: "none",
                5: "begin"
            };
            return cases[pb_1.Message.computeOneofCase(this, [5])];
        }
        get _end() {
            const cases: {
                [index: number]: "none" | "end";
            } = {
                0: "none",
                6: "end"
            };
            return cases[pb_1.Message.computeOneofCase(this, [6])];
        }
        static fromObject(data: {
            page?: number;
            pageSize?: number;
            account?: string;
            ip?: string;
            begin?: string;
            end?: string;
        }): WorkerSessionActivityLogRequest {
            const message = new WorkerSessionActivityLogRequest({});
            if (data.page != null) {
                message.page = data.page;
            }
            if (data.pageSize != null) {
                message.pageSize = data.pageSize;
            }
            if (data.account != null) {
                message.account = data.account;
            }
            if (data.ip != null) {
                message.ip = data.ip;
            }
            if (data.begin != null) {
                message.begin = data.begin;
            }
            if (data.end != null) {
                message.end = data.end;
            }
            return message;
        }
        toObject() {
            const data: {
                page?: number;
                pageSize?: number;
                account?: string;
                ip?: string;
                begin?: string;
                end?: string;
            } = {};
            if (this.page != null) {
                data.page = this.page;
            }
            if (this.pageSize != null) {
                data.pageSize = this.pageSize;
            }
            if (this.account != null) {
                data.account = this.account;
            }
            if (this.ip != null) {
                data.ip = this.ip;
            }
            if (this.begin != null) {
                data.begin = this.begin;
            }
            if (this.end != null) {
                data.end = this.end;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.page != 0)
                writer.writeUint32(1, this.page);
            if (this.pageSize != 0)
                writer.writeUint32(2, this.pageSize);
            if (this.has_account)
                writer.writeString(3, this.account);
            if (this.has_ip)
                writer.writeString(4, this.ip);
            if (this.has_begin)
                writer.writeString(5, this.begin);
            if (this.has_end)
                writer.writeString(6, this.end);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): WorkerSessionActivityLogRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new WorkerSessionActivityLogRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.page = reader.readUint32();
                        break;
                    case 2:
                        message.pageSize = reader.readUint32();
                        break;
                    case 3:
                        message.account = reader.readString();
                        break;
                    case 4:
                        message.ip = reader.readString();
                        break;
                    case 5:
                        message.begin = reader.readString();
                        break;
                    case 6:
                        message.end = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): WorkerSessionActivityLogRequest {
            return WorkerSessionActivityLogRequest.deserialize(bytes);
        }
    }
    export class WorkerSessionActivityLogItem extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            worker_id?: number;
            account?: string;
            name?: string;
            group_name?: string;
            login_at?: string;
            logout_at?: string;
            ip?: string;
            device_info?: dependency_5.api.common.DeviceInfo;
            client_ver?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("worker_id" in data && data.worker_id != undefined) {
                    this.worker_id = data.worker_id;
                }
                if ("account" in data && data.account != undefined) {
                    this.account = data.account;
                }
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
                if ("group_name" in data && data.group_name != undefined) {
                    this.group_name = data.group_name;
                }
                if ("login_at" in data && data.login_at != undefined) {
                    this.login_at = data.login_at;
                }
                if ("logout_at" in data && data.logout_at != undefined) {
                    this.logout_at = data.logout_at;
                }
                if ("ip" in data && data.ip != undefined) {
                    this.ip = data.ip;
                }
                if ("device_info" in data && data.device_info != undefined) {
                    this.device_info = data.device_info;
                }
                if ("client_ver" in data && data.client_ver != undefined) {
                    this.client_ver = data.client_ver;
                }
            }
        }
        get worker_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set worker_id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get account() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set account(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get name() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get group_name() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set group_name(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get login_at() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set login_at(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        get logout_at() {
            return pb_1.Message.getFieldWithDefault(this, 6, "") as string;
        }
        set logout_at(value: string) {
            pb_1.Message.setField(this, 6, value);
        }
        get ip() {
            return pb_1.Message.getFieldWithDefault(this, 7, "") as string;
        }
        set ip(value: string) {
            pb_1.Message.setField(this, 7, value);
        }
        get device_info() {
            return pb_1.Message.getWrapperField(this, dependency_5.api.common.DeviceInfo, 8) as dependency_5.api.common.DeviceInfo;
        }
        set device_info(value: dependency_5.api.common.DeviceInfo) {
            pb_1.Message.setWrapperField(this, 8, value);
        }
        get has_device_info() {
            return pb_1.Message.getField(this, 8) != null;
        }
        get client_ver() {
            return pb_1.Message.getFieldWithDefault(this, 9, "") as string;
        }
        set client_ver(value: string) {
            pb_1.Message.setField(this, 9, value);
        }
        static fromObject(data: {
            worker_id?: number;
            account?: string;
            name?: string;
            group_name?: string;
            login_at?: string;
            logout_at?: string;
            ip?: string;
            device_info?: ReturnType<typeof dependency_5.api.common.DeviceInfo.prototype.toObject>;
            client_ver?: string;
        }): WorkerSessionActivityLogItem {
            const message = new WorkerSessionActivityLogItem({});
            if (data.worker_id != null) {
                message.worker_id = data.worker_id;
            }
            if (data.account != null) {
                message.account = data.account;
            }
            if (data.name != null) {
                message.name = data.name;
            }
            if (data.group_name != null) {
                message.group_name = data.group_name;
            }
            if (data.login_at != null) {
                message.login_at = data.login_at;
            }
            if (data.logout_at != null) {
                message.logout_at = data.logout_at;
            }
            if (data.ip != null) {
                message.ip = data.ip;
            }
            if (data.device_info != null) {
                message.device_info = dependency_5.api.common.DeviceInfo.fromObject(data.device_info);
            }
            if (data.client_ver != null) {
                message.client_ver = data.client_ver;
            }
            return message;
        }
        toObject() {
            const data: {
                worker_id?: number;
                account?: string;
                name?: string;
                group_name?: string;
                login_at?: string;
                logout_at?: string;
                ip?: string;
                device_info?: ReturnType<typeof dependency_5.api.common.DeviceInfo.prototype.toObject>;
                client_ver?: string;
            } = {};
            if (this.worker_id != null) {
                data.worker_id = this.worker_id;
            }
            if (this.account != null) {
                data.account = this.account;
            }
            if (this.name != null) {
                data.name = this.name;
            }
            if (this.group_name != null) {
                data.group_name = this.group_name;
            }
            if (this.login_at != null) {
                data.login_at = this.login_at;
            }
            if (this.logout_at != null) {
                data.logout_at = this.logout_at;
            }
            if (this.ip != null) {
                data.ip = this.ip;
            }
            if (this.device_info != null) {
                data.device_info = this.device_info.toObject();
            }
            if (this.client_ver != null) {
                data.client_ver = this.client_ver;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.worker_id != 0)
                writer.writeInt32(1, this.worker_id);
            if (this.account.length)
                writer.writeString(2, this.account);
            if (this.name.length)
                writer.writeString(3, this.name);
            if (this.group_name.length)
                writer.writeString(4, this.group_name);
            if (this.login_at.length)
                writer.writeString(5, this.login_at);
            if (this.logout_at.length)
                writer.writeString(6, this.logout_at);
            if (this.ip.length)
                writer.writeString(7, this.ip);
            if (this.has_device_info)
                writer.writeMessage(8, this.device_info, () => this.device_info.serialize(writer));
            if (this.client_ver.length)
                writer.writeString(9, this.client_ver);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): WorkerSessionActivityLogItem {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new WorkerSessionActivityLogItem();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.worker_id = reader.readInt32();
                        break;
                    case 2:
                        message.account = reader.readString();
                        break;
                    case 3:
                        message.name = reader.readString();
                        break;
                    case 4:
                        message.group_name = reader.readString();
                        break;
                    case 5:
                        message.login_at = reader.readString();
                        break;
                    case 6:
                        message.logout_at = reader.readString();
                        break;
                    case 7:
                        message.ip = reader.readString();
                        break;
                    case 8:
                        reader.readMessage(message.device_info, () => message.device_info = dependency_5.api.common.DeviceInfo.deserialize(reader));
                        break;
                    case 9:
                        message.client_ver = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): WorkerSessionActivityLogItem {
            return WorkerSessionActivityLogItem.deserialize(bytes);
        }
    }
    export class WorkerSessionActivityLogResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            list?: WorkerSessionActivityLogItem[];
            total?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [2], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("list" in data && data.list != undefined) {
                    this.list = data.list;
                }
                if ("total" in data && data.total != undefined) {
                    this.total = data.total;
                }
            }
        }
        get list() {
            return pb_1.Message.getRepeatedWrapperField(this, WorkerSessionActivityLogItem, 2) as WorkerSessionActivityLogItem[];
        }
        set list(value: WorkerSessionActivityLogItem[]) {
            pb_1.Message.setRepeatedWrapperField(this, 2, value);
        }
        get total() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set total(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            list?: ReturnType<typeof WorkerSessionActivityLogItem.prototype.toObject>[];
            total?: number;
        }): WorkerSessionActivityLogResponse {
            const message = new WorkerSessionActivityLogResponse({});
            if (data.list != null) {
                message.list = data.list.map(item => WorkerSessionActivityLogItem.fromObject(item));
            }
            if (data.total != null) {
                message.total = data.total;
            }
            return message;
        }
        toObject() {
            const data: {
                list?: ReturnType<typeof WorkerSessionActivityLogItem.prototype.toObject>[];
                total?: number;
            } = {};
            if (this.list != null) {
                data.list = this.list.map((item: WorkerSessionActivityLogItem) => item.toObject());
            }
            if (this.total != null) {
                data.total = this.total;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.list.length)
                writer.writeRepeatedMessage(2, this.list, (item: WorkerSessionActivityLogItem) => item.serialize(writer));
            if (this.total != 0)
                writer.writeUint32(3, this.total);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): WorkerSessionActivityLogResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new WorkerSessionActivityLogResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 2:
                        reader.readMessage(message.list, () => pb_1.Message.addToRepeatedWrapperField(message, 2, WorkerSessionActivityLogItem.deserialize(reader), WorkerSessionActivityLogItem));
                        break;
                    case 3:
                        message.total = reader.readUint32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): WorkerSessionActivityLogResponse {
            return WorkerSessionActivityLogResponse.deserialize(bytes);
        }
    }
    export class AddQualityContentReq extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            index?: number;
            content?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("index" in data && data.index != undefined) {
                    this.index = data.index;
                }
                if ("content" in data && data.content != undefined) {
                    this.content = data.content;
                }
            }
        }
        get index() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set index(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get content() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set content(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            index?: number;
            content?: string;
        }): AddQualityContentReq {
            const message = new AddQualityContentReq({});
            if (data.index != null) {
                message.index = data.index;
            }
            if (data.content != null) {
                message.content = data.content;
            }
            return message;
        }
        toObject() {
            const data: {
                index?: number;
                content?: string;
            } = {};
            if (this.index != null) {
                data.index = this.index;
            }
            if (this.content != null) {
                data.content = this.content;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.index != 0)
                writer.writeInt32(1, this.index);
            if (this.content.length)
                writer.writeString(2, this.content);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): AddQualityContentReq {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new AddQualityContentReq();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.index = reader.readInt32();
                        break;
                    case 2:
                        message.content = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): AddQualityContentReq {
            return AddQualityContentReq.deserialize(bytes);
        }
    }
    export class UpdateQualityContentReq extends pb_1.Message {
        #one_of_decls: number[][] = [[4], [5]];
        constructor(data?: any[] | ({
            id?: number;
            index?: number;
            content?: string;
        } & (({
            enable?: boolean;
        }) | ({
            disable?: boolean;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
                if ("index" in data && data.index != undefined) {
                    this.index = data.index;
                }
                if ("content" in data && data.content != undefined) {
                    this.content = data.content;
                }
                if ("enable" in data && data.enable != undefined) {
                    this.enable = data.enable;
                }
                if ("disable" in data && data.disable != undefined) {
                    this.disable = data.disable;
                }
            }
        }
        get id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get index() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set index(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get content() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set content(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get enable() {
            return pb_1.Message.getFieldWithDefault(this, 4, false) as boolean;
        }
        set enable(value: boolean) {
            pb_1.Message.setOneofField(this, 4, this.#one_of_decls[0], value);
        }
        get has_enable() {
            return pb_1.Message.getField(this, 4) != null;
        }
        get disable() {
            return pb_1.Message.getFieldWithDefault(this, 5, false) as boolean;
        }
        set disable(value: boolean) {
            pb_1.Message.setOneofField(this, 5, this.#one_of_decls[1], value);
        }
        get has_disable() {
            return pb_1.Message.getField(this, 5) != null;
        }
        get _enable() {
            const cases: {
                [index: number]: "none" | "enable";
            } = {
                0: "none",
                4: "enable"
            };
            return cases[pb_1.Message.computeOneofCase(this, [4])];
        }
        get _disable() {
            const cases: {
                [index: number]: "none" | "disable";
            } = {
                0: "none",
                5: "disable"
            };
            return cases[pb_1.Message.computeOneofCase(this, [5])];
        }
        static fromObject(data: {
            id?: number;
            index?: number;
            content?: string;
            enable?: boolean;
            disable?: boolean;
        }): UpdateQualityContentReq {
            const message = new UpdateQualityContentReq({});
            if (data.id != null) {
                message.id = data.id;
            }
            if (data.index != null) {
                message.index = data.index;
            }
            if (data.content != null) {
                message.content = data.content;
            }
            if (data.enable != null) {
                message.enable = data.enable;
            }
            if (data.disable != null) {
                message.disable = data.disable;
            }
            return message;
        }
        toObject() {
            const data: {
                id?: number;
                index?: number;
                content?: string;
                enable?: boolean;
                disable?: boolean;
            } = {};
            if (this.id != null) {
                data.id = this.id;
            }
            if (this.index != null) {
                data.index = this.index;
            }
            if (this.content != null) {
                data.content = this.content;
            }
            if (this.enable != null) {
                data.enable = this.enable;
            }
            if (this.disable != null) {
                data.disable = this.disable;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.id != 0)
                writer.writeInt32(1, this.id);
            if (this.index != 0)
                writer.writeInt32(2, this.index);
            if (this.content.length)
                writer.writeString(3, this.content);
            if (this.has_enable)
                writer.writeBool(4, this.enable);
            if (this.has_disable)
                writer.writeBool(5, this.disable);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): UpdateQualityContentReq {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new UpdateQualityContentReq();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.id = reader.readInt32();
                        break;
                    case 2:
                        message.index = reader.readInt32();
                        break;
                    case 3:
                        message.content = reader.readString();
                        break;
                    case 4:
                        message.enable = reader.readBool();
                        break;
                    case 5:
                        message.disable = reader.readBool();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): UpdateQualityContentReq {
            return UpdateQualityContentReq.deserialize(bytes);
        }
    }
    export class TenantQualityContentItem extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            id?: number;
            index?: number;
            content?: string;
            create_time?: dependency_3.google.protobuf.Timestamp;
            enabled?: boolean;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
                if ("index" in data && data.index != undefined) {
                    this.index = data.index;
                }
                if ("content" in data && data.content != undefined) {
                    this.content = data.content;
                }
                if ("create_time" in data && data.create_time != undefined) {
                    this.create_time = data.create_time;
                }
                if ("enabled" in data && data.enabled != undefined) {
                    this.enabled = data.enabled;
                }
            }
        }
        get id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get index() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set index(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get content() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set content(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get create_time() {
            return pb_1.Message.getWrapperField(this, dependency_3.google.protobuf.Timestamp, 4) as dependency_3.google.protobuf.Timestamp;
        }
        set create_time(value: dependency_3.google.protobuf.Timestamp) {
            pb_1.Message.setWrapperField(this, 4, value);
        }
        get has_create_time() {
            return pb_1.Message.getField(this, 4) != null;
        }
        get enabled() {
            return pb_1.Message.getFieldWithDefault(this, 5, false) as boolean;
        }
        set enabled(value: boolean) {
            pb_1.Message.setField(this, 5, value);
        }
        static fromObject(data: {
            id?: number;
            index?: number;
            content?: string;
            create_time?: ReturnType<typeof dependency_3.google.protobuf.Timestamp.prototype.toObject>;
            enabled?: boolean;
        }): TenantQualityContentItem {
            const message = new TenantQualityContentItem({});
            if (data.id != null) {
                message.id = data.id;
            }
            if (data.index != null) {
                message.index = data.index;
            }
            if (data.content != null) {
                message.content = data.content;
            }
            if (data.create_time != null) {
                message.create_time = dependency_3.google.protobuf.Timestamp.fromObject(data.create_time);
            }
            if (data.enabled != null) {
                message.enabled = data.enabled;
            }
            return message;
        }
        toObject() {
            const data: {
                id?: number;
                index?: number;
                content?: string;
                create_time?: ReturnType<typeof dependency_3.google.protobuf.Timestamp.prototype.toObject>;
                enabled?: boolean;
            } = {};
            if (this.id != null) {
                data.id = this.id;
            }
            if (this.index != null) {
                data.index = this.index;
            }
            if (this.content != null) {
                data.content = this.content;
            }
            if (this.create_time != null) {
                data.create_time = this.create_time.toObject();
            }
            if (this.enabled != null) {
                data.enabled = this.enabled;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.id != 0)
                writer.writeInt32(1, this.id);
            if (this.index != 0)
                writer.writeInt32(2, this.index);
            if (this.content.length)
                writer.writeString(3, this.content);
            if (this.has_create_time)
                writer.writeMessage(4, this.create_time, () => this.create_time.serialize(writer));
            if (this.enabled != false)
                writer.writeBool(5, this.enabled);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): TenantQualityContentItem {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new TenantQualityContentItem();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.id = reader.readInt32();
                        break;
                    case 2:
                        message.index = reader.readInt32();
                        break;
                    case 3:
                        message.content = reader.readString();
                        break;
                    case 4:
                        reader.readMessage(message.create_time, () => message.create_time = dependency_3.google.protobuf.Timestamp.deserialize(reader));
                        break;
                    case 5:
                        message.enabled = reader.readBool();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): TenantQualityContentItem {
            return TenantQualityContentItem.deserialize(bytes);
        }
    }
    export class TenantQualityContentListResp extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            items?: TenantQualityContentItem[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("items" in data && data.items != undefined) {
                    this.items = data.items;
                }
            }
        }
        get items() {
            return pb_1.Message.getRepeatedWrapperField(this, TenantQualityContentItem, 1) as TenantQualityContentItem[];
        }
        set items(value: TenantQualityContentItem[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        static fromObject(data: {
            items?: ReturnType<typeof TenantQualityContentItem.prototype.toObject>[];
        }): TenantQualityContentListResp {
            const message = new TenantQualityContentListResp({});
            if (data.items != null) {
                message.items = data.items.map(item => TenantQualityContentItem.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                items?: ReturnType<typeof TenantQualityContentItem.prototype.toObject>[];
            } = {};
            if (this.items != null) {
                data.items = this.items.map((item: TenantQualityContentItem) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.items.length)
                writer.writeRepeatedMessage(1, this.items, (item: TenantQualityContentItem) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): TenantQualityContentListResp {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new TenantQualityContentListResp();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.items, () => pb_1.Message.addToRepeatedWrapperField(message, 1, TenantQualityContentItem.deserialize(reader), TenantQualityContentItem));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): TenantQualityContentListResp {
            return TenantQualityContentListResp.deserialize(bytes);
        }
    }
    export class TimeWarnInterval extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            start_time?: string;
            end_time?: string;
            seconds?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("start_time" in data && data.start_time != undefined) {
                    this.start_time = data.start_time;
                }
                if ("end_time" in data && data.end_time != undefined) {
                    this.end_time = data.end_time;
                }
                if ("seconds" in data && data.seconds != undefined) {
                    this.seconds = data.seconds;
                }
            }
        }
        get start_time() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set start_time(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get end_time() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set end_time(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get seconds() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set seconds(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            start_time?: string;
            end_time?: string;
            seconds?: number;
        }): TimeWarnInterval {
            const message = new TimeWarnInterval({});
            if (data.start_time != null) {
                message.start_time = data.start_time;
            }
            if (data.end_time != null) {
                message.end_time = data.end_time;
            }
            if (data.seconds != null) {
                message.seconds = data.seconds;
            }
            return message;
        }
        toObject() {
            const data: {
                start_time?: string;
                end_time?: string;
                seconds?: number;
            } = {};
            if (this.start_time != null) {
                data.start_time = this.start_time;
            }
            if (this.end_time != null) {
                data.end_time = this.end_time;
            }
            if (this.seconds != null) {
                data.seconds = this.seconds;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.start_time.length)
                writer.writeString(1, this.start_time);
            if (this.end_time.length)
                writer.writeString(2, this.end_time);
            if (this.seconds != 0)
                writer.writeInt32(3, this.seconds);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): TimeWarnInterval {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new TimeWarnInterval();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.start_time = reader.readString();
                        break;
                    case 2:
                        message.end_time = reader.readString();
                        break;
                    case 3:
                        message.seconds = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): TimeWarnInterval {
            return TimeWarnInterval.deserialize(bytes);
        }
    }
    export class TimeWarnSet extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            intervals?: TimeWarnInterval[];
            seconds?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("intervals" in data && data.intervals != undefined) {
                    this.intervals = data.intervals;
                }
                if ("seconds" in data && data.seconds != undefined) {
                    this.seconds = data.seconds;
                }
            }
        }
        get intervals() {
            return pb_1.Message.getRepeatedWrapperField(this, TimeWarnInterval, 1) as TimeWarnInterval[];
        }
        set intervals(value: TimeWarnInterval[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        get seconds() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set seconds(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            intervals?: ReturnType<typeof TimeWarnInterval.prototype.toObject>[];
            seconds?: number;
        }): TimeWarnSet {
            const message = new TimeWarnSet({});
            if (data.intervals != null) {
                message.intervals = data.intervals.map(item => TimeWarnInterval.fromObject(item));
            }
            if (data.seconds != null) {
                message.seconds = data.seconds;
            }
            return message;
        }
        toObject() {
            const data: {
                intervals?: ReturnType<typeof TimeWarnInterval.prototype.toObject>[];
                seconds?: number;
            } = {};
            if (this.intervals != null) {
                data.intervals = this.intervals.map((item: TimeWarnInterval) => item.toObject());
            }
            if (this.seconds != null) {
                data.seconds = this.seconds;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.intervals.length)
                writer.writeRepeatedMessage(1, this.intervals, (item: TimeWarnInterval) => item.serialize(writer));
            if (this.seconds != 0)
                writer.writeInt32(2, this.seconds);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): TimeWarnSet {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new TimeWarnSet();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.intervals, () => pb_1.Message.addToRepeatedWrapperField(message, 1, TimeWarnInterval.deserialize(reader), TimeWarnInterval));
                        break;
                    case 2:
                        message.seconds = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): TimeWarnSet {
            return TimeWarnSet.deserialize(bytes);
        }
    }
    export class TenantWarnParams extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            time_warn_enabled?: boolean;
            time_warn?: TimeWarnSet;
            replay_user_warn_enabled?: boolean;
            replay_user_count?: number;
            leave_work_warn_enabled?: boolean;
            leave_work_count?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("time_warn_enabled" in data && data.time_warn_enabled != undefined) {
                    this.time_warn_enabled = data.time_warn_enabled;
                }
                if ("time_warn" in data && data.time_warn != undefined) {
                    this.time_warn = data.time_warn;
                }
                if ("replay_user_warn_enabled" in data && data.replay_user_warn_enabled != undefined) {
                    this.replay_user_warn_enabled = data.replay_user_warn_enabled;
                }
                if ("replay_user_count" in data && data.replay_user_count != undefined) {
                    this.replay_user_count = data.replay_user_count;
                }
                if ("leave_work_warn_enabled" in data && data.leave_work_warn_enabled != undefined) {
                    this.leave_work_warn_enabled = data.leave_work_warn_enabled;
                }
                if ("leave_work_count" in data && data.leave_work_count != undefined) {
                    this.leave_work_count = data.leave_work_count;
                }
            }
        }
        get time_warn_enabled() {
            return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
        }
        set time_warn_enabled(value: boolean) {
            pb_1.Message.setField(this, 1, value);
        }
        get time_warn() {
            return pb_1.Message.getWrapperField(this, TimeWarnSet, 2) as TimeWarnSet;
        }
        set time_warn(value: TimeWarnSet) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_time_warn() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get replay_user_warn_enabled() {
            return pb_1.Message.getFieldWithDefault(this, 3, false) as boolean;
        }
        set replay_user_warn_enabled(value: boolean) {
            pb_1.Message.setField(this, 3, value);
        }
        get replay_user_count() {
            return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
        }
        set replay_user_count(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        get leave_work_warn_enabled() {
            return pb_1.Message.getFieldWithDefault(this, 5, false) as boolean;
        }
        set leave_work_warn_enabled(value: boolean) {
            pb_1.Message.setField(this, 5, value);
        }
        get leave_work_count() {
            return pb_1.Message.getFieldWithDefault(this, 6, 0) as number;
        }
        set leave_work_count(value: number) {
            pb_1.Message.setField(this, 6, value);
        }
        static fromObject(data: {
            time_warn_enabled?: boolean;
            time_warn?: ReturnType<typeof TimeWarnSet.prototype.toObject>;
            replay_user_warn_enabled?: boolean;
            replay_user_count?: number;
            leave_work_warn_enabled?: boolean;
            leave_work_count?: number;
        }): TenantWarnParams {
            const message = new TenantWarnParams({});
            if (data.time_warn_enabled != null) {
                message.time_warn_enabled = data.time_warn_enabled;
            }
            if (data.time_warn != null) {
                message.time_warn = TimeWarnSet.fromObject(data.time_warn);
            }
            if (data.replay_user_warn_enabled != null) {
                message.replay_user_warn_enabled = data.replay_user_warn_enabled;
            }
            if (data.replay_user_count != null) {
                message.replay_user_count = data.replay_user_count;
            }
            if (data.leave_work_warn_enabled != null) {
                message.leave_work_warn_enabled = data.leave_work_warn_enabled;
            }
            if (data.leave_work_count != null) {
                message.leave_work_count = data.leave_work_count;
            }
            return message;
        }
        toObject() {
            const data: {
                time_warn_enabled?: boolean;
                time_warn?: ReturnType<typeof TimeWarnSet.prototype.toObject>;
                replay_user_warn_enabled?: boolean;
                replay_user_count?: number;
                leave_work_warn_enabled?: boolean;
                leave_work_count?: number;
            } = {};
            if (this.time_warn_enabled != null) {
                data.time_warn_enabled = this.time_warn_enabled;
            }
            if (this.time_warn != null) {
                data.time_warn = this.time_warn.toObject();
            }
            if (this.replay_user_warn_enabled != null) {
                data.replay_user_warn_enabled = this.replay_user_warn_enabled;
            }
            if (this.replay_user_count != null) {
                data.replay_user_count = this.replay_user_count;
            }
            if (this.leave_work_warn_enabled != null) {
                data.leave_work_warn_enabled = this.leave_work_warn_enabled;
            }
            if (this.leave_work_count != null) {
                data.leave_work_count = this.leave_work_count;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.time_warn_enabled != false)
                writer.writeBool(1, this.time_warn_enabled);
            if (this.has_time_warn)
                writer.writeMessage(2, this.time_warn, () => this.time_warn.serialize(writer));
            if (this.replay_user_warn_enabled != false)
                writer.writeBool(3, this.replay_user_warn_enabled);
            if (this.replay_user_count != 0)
                writer.writeInt32(4, this.replay_user_count);
            if (this.leave_work_warn_enabled != false)
                writer.writeBool(5, this.leave_work_warn_enabled);
            if (this.leave_work_count != 0)
                writer.writeInt32(6, this.leave_work_count);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): TenantWarnParams {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new TenantWarnParams();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.time_warn_enabled = reader.readBool();
                        break;
                    case 2:
                        reader.readMessage(message.time_warn, () => message.time_warn = TimeWarnSet.deserialize(reader));
                        break;
                    case 3:
                        message.replay_user_warn_enabled = reader.readBool();
                        break;
                    case 4:
                        message.replay_user_count = reader.readInt32();
                        break;
                    case 5:
                        message.leave_work_warn_enabled = reader.readBool();
                        break;
                    case 6:
                        message.leave_work_count = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): TenantWarnParams {
            return TenantWarnParams.deserialize(bytes);
        }
    }
    export class TenantWarnNotifyParams extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            warn_notify_enabled?: boolean;
            worker_group_ids?: number[];
            worker_ids?: number[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [2, 3], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("warn_notify_enabled" in data && data.warn_notify_enabled != undefined) {
                    this.warn_notify_enabled = data.warn_notify_enabled;
                }
                if ("worker_group_ids" in data && data.worker_group_ids != undefined) {
                    this.worker_group_ids = data.worker_group_ids;
                }
                if ("worker_ids" in data && data.worker_ids != undefined) {
                    this.worker_ids = data.worker_ids;
                }
            }
        }
        get warn_notify_enabled() {
            return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
        }
        set warn_notify_enabled(value: boolean) {
            pb_1.Message.setField(this, 1, value);
        }
        get worker_group_ids() {
            return pb_1.Message.getFieldWithDefault(this, 2, []) as number[];
        }
        set worker_group_ids(value: number[]) {
            pb_1.Message.setField(this, 2, value);
        }
        get worker_ids() {
            return pb_1.Message.getFieldWithDefault(this, 3, []) as number[];
        }
        set worker_ids(value: number[]) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            warn_notify_enabled?: boolean;
            worker_group_ids?: number[];
            worker_ids?: number[];
        }): TenantWarnNotifyParams {
            const message = new TenantWarnNotifyParams({});
            if (data.warn_notify_enabled != null) {
                message.warn_notify_enabled = data.warn_notify_enabled;
            }
            if (data.worker_group_ids != null) {
                message.worker_group_ids = data.worker_group_ids;
            }
            if (data.worker_ids != null) {
                message.worker_ids = data.worker_ids;
            }
            return message;
        }
        toObject() {
            const data: {
                warn_notify_enabled?: boolean;
                worker_group_ids?: number[];
                worker_ids?: number[];
            } = {};
            if (this.warn_notify_enabled != null) {
                data.warn_notify_enabled = this.warn_notify_enabled;
            }
            if (this.worker_group_ids != null) {
                data.worker_group_ids = this.worker_group_ids;
            }
            if (this.worker_ids != null) {
                data.worker_ids = this.worker_ids;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.warn_notify_enabled != false)
                writer.writeBool(1, this.warn_notify_enabled);
            if (this.worker_group_ids.length)
                writer.writePackedInt64(2, this.worker_group_ids);
            if (this.worker_ids.length)
                writer.writePackedInt64(3, this.worker_ids);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): TenantWarnNotifyParams {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new TenantWarnNotifyParams();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.warn_notify_enabled = reader.readBool();
                        break;
                    case 2:
                        message.worker_group_ids = reader.readPackedInt64();
                        break;
                    case 3:
                        message.worker_ids = reader.readPackedInt64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): TenantWarnNotifyParams {
            return TenantWarnNotifyParams.deserialize(bytes);
        }
    }
    export class WarnRecordReq extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            event_type?: dependency_8.api.common.TenantWarnEventType;
            event_value?: number;
            worker_name?: string;
            worker_account?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("event_type" in data && data.event_type != undefined) {
                    this.event_type = data.event_type;
                }
                if ("event_value" in data && data.event_value != undefined) {
                    this.event_value = data.event_value;
                }
                if ("worker_name" in data && data.worker_name != undefined) {
                    this.worker_name = data.worker_name;
                }
                if ("worker_account" in data && data.worker_account != undefined) {
                    this.worker_account = data.worker_account;
                }
            }
        }
        get event_type() {
            return pb_1.Message.getFieldWithDefault(this, 1, dependency_8.api.common.TenantWarnEventType.Warn_Unknown) as dependency_8.api.common.TenantWarnEventType;
        }
        set event_type(value: dependency_8.api.common.TenantWarnEventType) {
            pb_1.Message.setField(this, 1, value);
        }
        get event_value() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set event_value(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get worker_name() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set worker_name(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get worker_account() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set worker_account(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            event_type?: dependency_8.api.common.TenantWarnEventType;
            event_value?: number;
            worker_name?: string;
            worker_account?: string;
        }): WarnRecordReq {
            const message = new WarnRecordReq({});
            if (data.event_type != null) {
                message.event_type = data.event_type;
            }
            if (data.event_value != null) {
                message.event_value = data.event_value;
            }
            if (data.worker_name != null) {
                message.worker_name = data.worker_name;
            }
            if (data.worker_account != null) {
                message.worker_account = data.worker_account;
            }
            return message;
        }
        toObject() {
            const data: {
                event_type?: dependency_8.api.common.TenantWarnEventType;
                event_value?: number;
                worker_name?: string;
                worker_account?: string;
            } = {};
            if (this.event_type != null) {
                data.event_type = this.event_type;
            }
            if (this.event_value != null) {
                data.event_value = this.event_value;
            }
            if (this.worker_name != null) {
                data.worker_name = this.worker_name;
            }
            if (this.worker_account != null) {
                data.worker_account = this.worker_account;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.event_type != dependency_8.api.common.TenantWarnEventType.Warn_Unknown)
                writer.writeEnum(1, this.event_type);
            if (this.event_value != 0)
                writer.writeInt32(2, this.event_value);
            if (this.worker_name.length)
                writer.writeString(3, this.worker_name);
            if (this.worker_account.length)
                writer.writeString(4, this.worker_account);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): WarnRecordReq {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new WarnRecordReq();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.event_type = reader.readEnum();
                        break;
                    case 2:
                        message.event_value = reader.readInt32();
                        break;
                    case 3:
                        message.worker_name = reader.readString();
                        break;
                    case 4:
                        message.worker_account = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): WarnRecordReq {
            return WarnRecordReq.deserialize(bytes);
        }
    }
    export class WarnRecordQueryReq extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            start_time?: dependency_3.google.protobuf.Timestamp;
            end_time?: dependency_3.google.protobuf.Timestamp;
            group_pid?: number;
            worker_id?: number;
            like_word?: string;
            event_type?: number;
            page?: number;
            pageSize?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("start_time" in data && data.start_time != undefined) {
                    this.start_time = data.start_time;
                }
                if ("end_time" in data && data.end_time != undefined) {
                    this.end_time = data.end_time;
                }
                if ("group_pid" in data && data.group_pid != undefined) {
                    this.group_pid = data.group_pid;
                }
                if ("worker_id" in data && data.worker_id != undefined) {
                    this.worker_id = data.worker_id;
                }
                if ("like_word" in data && data.like_word != undefined) {
                    this.like_word = data.like_word;
                }
                if ("event_type" in data && data.event_type != undefined) {
                    this.event_type = data.event_type;
                }
                if ("page" in data && data.page != undefined) {
                    this.page = data.page;
                }
                if ("pageSize" in data && data.pageSize != undefined) {
                    this.pageSize = data.pageSize;
                }
            }
        }
        get start_time() {
            return pb_1.Message.getWrapperField(this, dependency_3.google.protobuf.Timestamp, 1) as dependency_3.google.protobuf.Timestamp;
        }
        set start_time(value: dependency_3.google.protobuf.Timestamp) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_start_time() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get end_time() {
            return pb_1.Message.getWrapperField(this, dependency_3.google.protobuf.Timestamp, 2) as dependency_3.google.protobuf.Timestamp;
        }
        set end_time(value: dependency_3.google.protobuf.Timestamp) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_end_time() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get group_pid() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set group_pid(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        get worker_id() {
            return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
        }
        set worker_id(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        get like_word() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set like_word(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        get event_type() {
            return pb_1.Message.getFieldWithDefault(this, 6, 0) as number;
        }
        set event_type(value: number) {
            pb_1.Message.setField(this, 6, value);
        }
        get page() {
            return pb_1.Message.getFieldWithDefault(this, 7, 0) as number;
        }
        set page(value: number) {
            pb_1.Message.setField(this, 7, value);
        }
        get pageSize() {
            return pb_1.Message.getFieldWithDefault(this, 8, 0) as number;
        }
        set pageSize(value: number) {
            pb_1.Message.setField(this, 8, value);
        }
        static fromObject(data: {
            start_time?: ReturnType<typeof dependency_3.google.protobuf.Timestamp.prototype.toObject>;
            end_time?: ReturnType<typeof dependency_3.google.protobuf.Timestamp.prototype.toObject>;
            group_pid?: number;
            worker_id?: number;
            like_word?: string;
            event_type?: number;
            page?: number;
            pageSize?: number;
        }): WarnRecordQueryReq {
            const message = new WarnRecordQueryReq({});
            if (data.start_time != null) {
                message.start_time = dependency_3.google.protobuf.Timestamp.fromObject(data.start_time);
            }
            if (data.end_time != null) {
                message.end_time = dependency_3.google.protobuf.Timestamp.fromObject(data.end_time);
            }
            if (data.group_pid != null) {
                message.group_pid = data.group_pid;
            }
            if (data.worker_id != null) {
                message.worker_id = data.worker_id;
            }
            if (data.like_word != null) {
                message.like_word = data.like_word;
            }
            if (data.event_type != null) {
                message.event_type = data.event_type;
            }
            if (data.page != null) {
                message.page = data.page;
            }
            if (data.pageSize != null) {
                message.pageSize = data.pageSize;
            }
            return message;
        }
        toObject() {
            const data: {
                start_time?: ReturnType<typeof dependency_3.google.protobuf.Timestamp.prototype.toObject>;
                end_time?: ReturnType<typeof dependency_3.google.protobuf.Timestamp.prototype.toObject>;
                group_pid?: number;
                worker_id?: number;
                like_word?: string;
                event_type?: number;
                page?: number;
                pageSize?: number;
            } = {};
            if (this.start_time != null) {
                data.start_time = this.start_time.toObject();
            }
            if (this.end_time != null) {
                data.end_time = this.end_time.toObject();
            }
            if (this.group_pid != null) {
                data.group_pid = this.group_pid;
            }
            if (this.worker_id != null) {
                data.worker_id = this.worker_id;
            }
            if (this.like_word != null) {
                data.like_word = this.like_word;
            }
            if (this.event_type != null) {
                data.event_type = this.event_type;
            }
            if (this.page != null) {
                data.page = this.page;
            }
            if (this.pageSize != null) {
                data.pageSize = this.pageSize;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_start_time)
                writer.writeMessage(1, this.start_time, () => this.start_time.serialize(writer));
            if (this.has_end_time)
                writer.writeMessage(2, this.end_time, () => this.end_time.serialize(writer));
            if (this.group_pid != 0)
                writer.writeInt32(3, this.group_pid);
            if (this.worker_id != 0)
                writer.writeInt32(4, this.worker_id);
            if (this.like_word.length)
                writer.writeString(5, this.like_word);
            if (this.event_type != 0)
                writer.writeInt32(6, this.event_type);
            if (this.page != 0)
                writer.writeUint32(7, this.page);
            if (this.pageSize != 0)
                writer.writeUint32(8, this.pageSize);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): WarnRecordQueryReq {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new WarnRecordQueryReq();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.start_time, () => message.start_time = dependency_3.google.protobuf.Timestamp.deserialize(reader));
                        break;
                    case 2:
                        reader.readMessage(message.end_time, () => message.end_time = dependency_3.google.protobuf.Timestamp.deserialize(reader));
                        break;
                    case 3:
                        message.group_pid = reader.readInt32();
                        break;
                    case 4:
                        message.worker_id = reader.readInt32();
                        break;
                    case 5:
                        message.like_word = reader.readString();
                        break;
                    case 6:
                        message.event_type = reader.readInt32();
                        break;
                    case 7:
                        message.page = reader.readUint32();
                        break;
                    case 8:
                        message.pageSize = reader.readUint32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): WarnRecordQueryReq {
            return WarnRecordQueryReq.deserialize(bytes);
        }
    }
    export class ExportWarnRecordQueryReq extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            start_time?: dependency_3.google.protobuf.Timestamp;
            end_time?: dependency_3.google.protobuf.Timestamp;
            group_pid?: number;
            worker_id?: number;
            like_word?: string;
            event_type?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("start_time" in data && data.start_time != undefined) {
                    this.start_time = data.start_time;
                }
                if ("end_time" in data && data.end_time != undefined) {
                    this.end_time = data.end_time;
                }
                if ("group_pid" in data && data.group_pid != undefined) {
                    this.group_pid = data.group_pid;
                }
                if ("worker_id" in data && data.worker_id != undefined) {
                    this.worker_id = data.worker_id;
                }
                if ("like_word" in data && data.like_word != undefined) {
                    this.like_word = data.like_word;
                }
                if ("event_type" in data && data.event_type != undefined) {
                    this.event_type = data.event_type;
                }
            }
        }
        get start_time() {
            return pb_1.Message.getWrapperField(this, dependency_3.google.protobuf.Timestamp, 1) as dependency_3.google.protobuf.Timestamp;
        }
        set start_time(value: dependency_3.google.protobuf.Timestamp) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_start_time() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get end_time() {
            return pb_1.Message.getWrapperField(this, dependency_3.google.protobuf.Timestamp, 2) as dependency_3.google.protobuf.Timestamp;
        }
        set end_time(value: dependency_3.google.protobuf.Timestamp) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_end_time() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get group_pid() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set group_pid(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        get worker_id() {
            return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
        }
        set worker_id(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        get like_word() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set like_word(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        get event_type() {
            return pb_1.Message.getFieldWithDefault(this, 6, 0) as number;
        }
        set event_type(value: number) {
            pb_1.Message.setField(this, 6, value);
        }
        static fromObject(data: {
            start_time?: ReturnType<typeof dependency_3.google.protobuf.Timestamp.prototype.toObject>;
            end_time?: ReturnType<typeof dependency_3.google.protobuf.Timestamp.prototype.toObject>;
            group_pid?: number;
            worker_id?: number;
            like_word?: string;
            event_type?: number;
        }): ExportWarnRecordQueryReq {
            const message = new ExportWarnRecordQueryReq({});
            if (data.start_time != null) {
                message.start_time = dependency_3.google.protobuf.Timestamp.fromObject(data.start_time);
            }
            if (data.end_time != null) {
                message.end_time = dependency_3.google.protobuf.Timestamp.fromObject(data.end_time);
            }
            if (data.group_pid != null) {
                message.group_pid = data.group_pid;
            }
            if (data.worker_id != null) {
                message.worker_id = data.worker_id;
            }
            if (data.like_word != null) {
                message.like_word = data.like_word;
            }
            if (data.event_type != null) {
                message.event_type = data.event_type;
            }
            return message;
        }
        toObject() {
            const data: {
                start_time?: ReturnType<typeof dependency_3.google.protobuf.Timestamp.prototype.toObject>;
                end_time?: ReturnType<typeof dependency_3.google.protobuf.Timestamp.prototype.toObject>;
                group_pid?: number;
                worker_id?: number;
                like_word?: string;
                event_type?: number;
            } = {};
            if (this.start_time != null) {
                data.start_time = this.start_time.toObject();
            }
            if (this.end_time != null) {
                data.end_time = this.end_time.toObject();
            }
            if (this.group_pid != null) {
                data.group_pid = this.group_pid;
            }
            if (this.worker_id != null) {
                data.worker_id = this.worker_id;
            }
            if (this.like_word != null) {
                data.like_word = this.like_word;
            }
            if (this.event_type != null) {
                data.event_type = this.event_type;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_start_time)
                writer.writeMessage(1, this.start_time, () => this.start_time.serialize(writer));
            if (this.has_end_time)
                writer.writeMessage(2, this.end_time, () => this.end_time.serialize(writer));
            if (this.group_pid != 0)
                writer.writeInt32(3, this.group_pid);
            if (this.worker_id != 0)
                writer.writeInt32(4, this.worker_id);
            if (this.like_word.length)
                writer.writeString(5, this.like_word);
            if (this.event_type != 0)
                writer.writeInt32(6, this.event_type);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ExportWarnRecordQueryReq {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ExportWarnRecordQueryReq();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.start_time, () => message.start_time = dependency_3.google.protobuf.Timestamp.deserialize(reader));
                        break;
                    case 2:
                        reader.readMessage(message.end_time, () => message.end_time = dependency_3.google.protobuf.Timestamp.deserialize(reader));
                        break;
                    case 3:
                        message.group_pid = reader.readInt32();
                        break;
                    case 4:
                        message.worker_id = reader.readInt32();
                        break;
                    case 5:
                        message.like_word = reader.readString();
                        break;
                    case 6:
                        message.event_type = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ExportWarnRecordQueryReq {
            return ExportWarnRecordQueryReq.deserialize(bytes);
        }
    }
    export class WarnRecord extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            id?: number;
            event_type?: dependency_8.api.common.TenantWarnEventType;
            event_value?: number;
            create_time?: number;
            worker_name?: string;
            worker_group?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
                if ("event_type" in data && data.event_type != undefined) {
                    this.event_type = data.event_type;
                }
                if ("event_value" in data && data.event_value != undefined) {
                    this.event_value = data.event_value;
                }
                if ("create_time" in data && data.create_time != undefined) {
                    this.create_time = data.create_time;
                }
                if ("worker_name" in data && data.worker_name != undefined) {
                    this.worker_name = data.worker_name;
                }
                if ("worker_group" in data && data.worker_group != undefined) {
                    this.worker_group = data.worker_group;
                }
            }
        }
        get id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get event_type() {
            return pb_1.Message.getFieldWithDefault(this, 2, dependency_8.api.common.TenantWarnEventType.Warn_Unknown) as dependency_8.api.common.TenantWarnEventType;
        }
        set event_type(value: dependency_8.api.common.TenantWarnEventType) {
            pb_1.Message.setField(this, 2, value);
        }
        get event_value() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set event_value(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        get create_time() {
            return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
        }
        set create_time(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        get worker_name() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set worker_name(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        get worker_group() {
            return pb_1.Message.getFieldWithDefault(this, 6, "") as string;
        }
        set worker_group(value: string) {
            pb_1.Message.setField(this, 6, value);
        }
        static fromObject(data: {
            id?: number;
            event_type?: dependency_8.api.common.TenantWarnEventType;
            event_value?: number;
            create_time?: number;
            worker_name?: string;
            worker_group?: string;
        }): WarnRecord {
            const message = new WarnRecord({});
            if (data.id != null) {
                message.id = data.id;
            }
            if (data.event_type != null) {
                message.event_type = data.event_type;
            }
            if (data.event_value != null) {
                message.event_value = data.event_value;
            }
            if (data.create_time != null) {
                message.create_time = data.create_time;
            }
            if (data.worker_name != null) {
                message.worker_name = data.worker_name;
            }
            if (data.worker_group != null) {
                message.worker_group = data.worker_group;
            }
            return message;
        }
        toObject() {
            const data: {
                id?: number;
                event_type?: dependency_8.api.common.TenantWarnEventType;
                event_value?: number;
                create_time?: number;
                worker_name?: string;
                worker_group?: string;
            } = {};
            if (this.id != null) {
                data.id = this.id;
            }
            if (this.event_type != null) {
                data.event_type = this.event_type;
            }
            if (this.event_value != null) {
                data.event_value = this.event_value;
            }
            if (this.create_time != null) {
                data.create_time = this.create_time;
            }
            if (this.worker_name != null) {
                data.worker_name = this.worker_name;
            }
            if (this.worker_group != null) {
                data.worker_group = this.worker_group;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.id != 0)
                writer.writeInt32(1, this.id);
            if (this.event_type != dependency_8.api.common.TenantWarnEventType.Warn_Unknown)
                writer.writeEnum(2, this.event_type);
            if (this.event_value != 0)
                writer.writeInt32(3, this.event_value);
            if (this.create_time != 0)
                writer.writeInt64(4, this.create_time);
            if (this.worker_name.length)
                writer.writeString(5, this.worker_name);
            if (this.worker_group.length)
                writer.writeString(6, this.worker_group);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): WarnRecord {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new WarnRecord();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.id = reader.readInt32();
                        break;
                    case 2:
                        message.event_type = reader.readEnum();
                        break;
                    case 3:
                        message.event_value = reader.readInt32();
                        break;
                    case 4:
                        message.create_time = reader.readInt64();
                        break;
                    case 5:
                        message.worker_name = reader.readString();
                        break;
                    case 6:
                        message.worker_group = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): WarnRecord {
            return WarnRecord.deserialize(bytes);
        }
    }
    export class WarnRecordQueryResp extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            items?: WarnRecord[];
            total?: number;
            event_unreply_count?: number;
            event_time_count?: number;
            event_leave_count?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("items" in data && data.items != undefined) {
                    this.items = data.items;
                }
                if ("total" in data && data.total != undefined) {
                    this.total = data.total;
                }
                if ("event_unreply_count" in data && data.event_unreply_count != undefined) {
                    this.event_unreply_count = data.event_unreply_count;
                }
                if ("event_time_count" in data && data.event_time_count != undefined) {
                    this.event_time_count = data.event_time_count;
                }
                if ("event_leave_count" in data && data.event_leave_count != undefined) {
                    this.event_leave_count = data.event_leave_count;
                }
            }
        }
        get items() {
            return pb_1.Message.getRepeatedWrapperField(this, WarnRecord, 1) as WarnRecord[];
        }
        set items(value: WarnRecord[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        get total() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set total(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get event_unreply_count() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set event_unreply_count(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        get event_time_count() {
            return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
        }
        set event_time_count(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        get event_leave_count() {
            return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
        }
        set event_leave_count(value: number) {
            pb_1.Message.setField(this, 5, value);
        }
        static fromObject(data: {
            items?: ReturnType<typeof WarnRecord.prototype.toObject>[];
            total?: number;
            event_unreply_count?: number;
            event_time_count?: number;
            event_leave_count?: number;
        }): WarnRecordQueryResp {
            const message = new WarnRecordQueryResp({});
            if (data.items != null) {
                message.items = data.items.map(item => WarnRecord.fromObject(item));
            }
            if (data.total != null) {
                message.total = data.total;
            }
            if (data.event_unreply_count != null) {
                message.event_unreply_count = data.event_unreply_count;
            }
            if (data.event_time_count != null) {
                message.event_time_count = data.event_time_count;
            }
            if (data.event_leave_count != null) {
                message.event_leave_count = data.event_leave_count;
            }
            return message;
        }
        toObject() {
            const data: {
                items?: ReturnType<typeof WarnRecord.prototype.toObject>[];
                total?: number;
                event_unreply_count?: number;
                event_time_count?: number;
                event_leave_count?: number;
            } = {};
            if (this.items != null) {
                data.items = this.items.map((item: WarnRecord) => item.toObject());
            }
            if (this.total != null) {
                data.total = this.total;
            }
            if (this.event_unreply_count != null) {
                data.event_unreply_count = this.event_unreply_count;
            }
            if (this.event_time_count != null) {
                data.event_time_count = this.event_time_count;
            }
            if (this.event_leave_count != null) {
                data.event_leave_count = this.event_leave_count;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.items.length)
                writer.writeRepeatedMessage(1, this.items, (item: WarnRecord) => item.serialize(writer));
            if (this.total != 0)
                writer.writeInt64(2, this.total);
            if (this.event_unreply_count != 0)
                writer.writeInt64(3, this.event_unreply_count);
            if (this.event_time_count != 0)
                writer.writeInt64(4, this.event_time_count);
            if (this.event_leave_count != 0)
                writer.writeInt64(5, this.event_leave_count);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): WarnRecordQueryResp {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new WarnRecordQueryResp();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.items, () => pb_1.Message.addToRepeatedWrapperField(message, 1, WarnRecord.deserialize(reader), WarnRecord));
                        break;
                    case 2:
                        message.total = reader.readInt64();
                        break;
                    case 3:
                        message.event_unreply_count = reader.readInt64();
                        break;
                    case 4:
                        message.event_time_count = reader.readInt64();
                        break;
                    case 5:
                        message.event_leave_count = reader.readInt64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): WarnRecordQueryResp {
            return WarnRecordQueryResp.deserialize(bytes);
        }
    }
    interface GrpcUnaryServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
    }
    interface GrpcStreamServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
        (message: P, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
    }
    interface GrpWritableServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
    }
    interface GrpcChunkServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
        (options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
    }
    interface GrpcPromiseServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): Promise<R>;
        (message: P, options?: grpc_1.CallOptions): Promise<R>;
    }
    export abstract class UnimplementedTenantService {
        static definition = {
            AdminLogin: {
                path: "/api.core.Tenant/AdminLogin",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: AdminLoginRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => AdminLoginRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: AdminLoginResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => AdminLoginResponse.deserialize(new Uint8Array(bytes))
            },
            Login: {
                path: "/api.core.Tenant/Login",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: LoginRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => LoginRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: LoginResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => LoginResponse.deserialize(new Uint8Array(bytes))
            },
            Logout: {
                path: "/api.core.Tenant/Logout",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: dependency_2.google.protobuf.Empty) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => dependency_2.google.protobuf.Empty.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: dependency_2.google.protobuf.Empty) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => dependency_2.google.protobuf.Empty.deserialize(new Uint8Array(bytes))
            },
            Create: {
                path: "/api.core.Tenant/Create",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: TenantCreateRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => TenantCreateRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: dependency_2.google.protobuf.Empty) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => dependency_2.google.protobuf.Empty.deserialize(new Uint8Array(bytes))
            },
            Query: {
                path: "/api.core.Tenant/Query",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: TenantQueryRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => TenantQueryRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: TenantQueryResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => TenantQueryResponse.deserialize(new Uint8Array(bytes))
            },
            UpdateTenant: {
                path: "/api.core.Tenant/UpdateTenant",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: UpdateTenantRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => UpdateTenantRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: dependency_2.google.protobuf.Empty) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => dependency_2.google.protobuf.Empty.deserialize(new Uint8Array(bytes))
            },
            DeleteTenant: {
                path: "/api.core.Tenant/DeleteTenant",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: DeleteTenantRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => DeleteTenantRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: dependency_2.google.protobuf.Empty) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => dependency_2.google.protobuf.Empty.deserialize(new Uint8Array(bytes))
            },
            ManagerLogin: {
                path: "/api.core.Tenant/ManagerLogin",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: ManagerLoginRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => ManagerLoginRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: ManagerLoginResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => ManagerLoginResponse.deserialize(new Uint8Array(bytes))
            },
            GetRoutes: {
                path: "/api.core.Tenant/GetRoutes",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: RouteRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => RouteRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: RouteResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => RouteResponse.deserialize(new Uint8Array(bytes))
            },
            CreatePublicKey: {
                path: "/api.core.Tenant/CreatePublicKey",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: dependency_2.google.protobuf.Empty) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => dependency_2.google.protobuf.Empty.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: PublicKeyResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => PublicKeyResponse.deserialize(new Uint8Array(bytes))
            },
            QuerySelfInfo: {
                path: "/api.core.Tenant/QuerySelfInfo",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: dependency_2.google.protobuf.Empty) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => dependency_2.google.protobuf.Empty.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: QueryTenantInfoResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => QueryTenantInfoResponse.deserialize(new Uint8Array(bytes))
            },
            UpdateNimInfo: {
                path: "/api.core.Tenant/UpdateNimInfo",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: UpdateNimInfoRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => UpdateNimInfoRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: dependency_2.google.protobuf.Empty) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => dependency_2.google.protobuf.Empty.deserialize(new Uint8Array(bytes))
            },
            ExportUsersList: {
                path: "/api.core.Tenant/ExportUsersList",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: dependency_2.google.protobuf.Empty) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => dependency_2.google.protobuf.Empty.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: dependency_2.google.protobuf.Empty) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => dependency_2.google.protobuf.Empty.deserialize(new Uint8Array(bytes))
            },
            create_version: {
                path: "/api.core.Tenant/create_version",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: VersionRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => VersionRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: CreateVersionResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => CreateVersionResponse.deserialize(new Uint8Array(bytes))
            },
            update_version: {
                path: "/api.core.Tenant/update_version",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: VersionRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => VersionRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: UpdateVersionResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => UpdateVersionResponse.deserialize(new Uint8Array(bytes))
            },
            getallversion: {
                path: "/api.core.Tenant/getallversion",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: dependency_2.google.protobuf.Empty) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => dependency_2.google.protobuf.Empty.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: GetVersionResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => GetVersionResponse.deserialize(new Uint8Array(bytes))
            },
            version: {
                path: "/api.core.Tenant/version",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: dependency_2.google.protobuf.Empty) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => dependency_2.google.protobuf.Empty.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: GetVersionResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => GetVersionResponse.deserialize(new Uint8Array(bytes))
            },
            api_set: {
                path: "/api.core.Tenant/api_set",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: TenantThirdSetting) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => TenantThirdSetting.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: dependency_2.google.protobuf.Empty) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => dependency_2.google.protobuf.Empty.deserialize(new Uint8Array(bytes))
            },
            LineGroupList: {
                path: "/api.core.Tenant/LineGroupList",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: LineGroupListRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => LineGroupListRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: LineGroupListResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => LineGroupListResponse.deserialize(new Uint8Array(bytes))
            },
            LineGroupCreate: {
                path: "/api.core.Tenant/LineGroupCreate",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: LineGroupCreateRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => LineGroupCreateRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: dependency_2.google.protobuf.Empty) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => dependency_2.google.protobuf.Empty.deserialize(new Uint8Array(bytes))
            },
            LineGroupUpdate: {
                path: "/api.core.Tenant/LineGroupUpdate",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: LineGroupUpdateRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => LineGroupUpdateRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: dependency_2.google.protobuf.Empty) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => dependency_2.google.protobuf.Empty.deserialize(new Uint8Array(bytes))
            },
            LineGroupDelete: {
                path: "/api.core.Tenant/LineGroupDelete",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: LineGroupDeleteRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => LineGroupDeleteRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: dependency_2.google.protobuf.Empty) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => dependency_2.google.protobuf.Empty.deserialize(new Uint8Array(bytes))
            },
            TenantWorkerQuery: {
                path: "/api.core.Tenant/TenantWorkerQuery",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: TenantWorkerQueryRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => TenantWorkerQueryRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: TenantWorkerQueryResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => TenantWorkerQueryResponse.deserialize(new Uint8Array(bytes))
            },
            TenantLogQuery: {
                path: "/api.core.Tenant/TenantLogQuery",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: TenantLogReq) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => TenantLogReq.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: TenantLogResp) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => TenantLogResp.deserialize(new Uint8Array(bytes))
            },
            TenantRouteList: {
                path: "/api.core.Tenant/TenantRouteList",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: TenantRouteListRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => TenantRouteListRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: TenantRouteListResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => TenantRouteListResponse.deserialize(new Uint8Array(bytes))
            },
            TenantRouteCreate: {
                path: "/api.core.Tenant/TenantRouteCreate",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: TenantRouteCreateRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => TenantRouteCreateRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: dependency_2.google.protobuf.Empty) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => dependency_2.google.protobuf.Empty.deserialize(new Uint8Array(bytes))
            },
            TenantRouteUpdate: {
                path: "/api.core.Tenant/TenantRouteUpdate",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: TenantRouteUpdateRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => TenantRouteUpdateRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: dependency_2.google.protobuf.Empty) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => dependency_2.google.protobuf.Empty.deserialize(new Uint8Array(bytes))
            },
            TenantRouteDelete: {
                path: "/api.core.Tenant/TenantRouteDelete",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: TenantRouteDeleteRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => TenantRouteDeleteRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: dependency_2.google.protobuf.Empty) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => dependency_2.google.protobuf.Empty.deserialize(new Uint8Array(bytes))
            },
            TenantRoleList: {
                path: "/api.core.Tenant/TenantRoleList",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: TenantRoleListRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => TenantRoleListRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: TenantRoleListResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => TenantRoleListResponse.deserialize(new Uint8Array(bytes))
            },
            TenantRoleCreate: {
                path: "/api.core.Tenant/TenantRoleCreate",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: TenantRoleCreateRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => TenantRoleCreateRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: dependency_2.google.protobuf.Empty) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => dependency_2.google.protobuf.Empty.deserialize(new Uint8Array(bytes))
            },
            TenantRoleUpdate: {
                path: "/api.core.Tenant/TenantRoleUpdate",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: TenantRoleUpdateRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => TenantRoleUpdateRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: dependency_2.google.protobuf.Empty) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => dependency_2.google.protobuf.Empty.deserialize(new Uint8Array(bytes))
            },
            TenantRoleDelete: {
                path: "/api.core.Tenant/TenantRoleDelete",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: TenantRoleDeleteRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => TenantRoleDeleteRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: dependency_2.google.protobuf.Empty) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => dependency_2.google.protobuf.Empty.deserialize(new Uint8Array(bytes))
            },
            TenantManagerList: {
                path: "/api.core.Tenant/TenantManagerList",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: TenantManagerListRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => TenantManagerListRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: TenantManagerListResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => TenantManagerListResponse.deserialize(new Uint8Array(bytes))
            },
            TenantManagerCreate: {
                path: "/api.core.Tenant/TenantManagerCreate",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: TenantManagerCreateRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => TenantManagerCreateRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: dependency_2.google.protobuf.Empty) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => dependency_2.google.protobuf.Empty.deserialize(new Uint8Array(bytes))
            },
            TenantManagerUpdate: {
                path: "/api.core.Tenant/TenantManagerUpdate",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: TenantManagerUpdateRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => TenantManagerUpdateRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: dependency_2.google.protobuf.Empty) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => dependency_2.google.protobuf.Empty.deserialize(new Uint8Array(bytes))
            },
            TenantManagerDelete: {
                path: "/api.core.Tenant/TenantManagerDelete",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: TenantManagerDeleteRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => TenantManagerDeleteRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: dependency_2.google.protobuf.Empty) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => dependency_2.google.protobuf.Empty.deserialize(new Uint8Array(bytes))
            },
            TenantRoleRouteList: {
                path: "/api.core.Tenant/TenantRoleRouteList",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: TenantRoleRouteRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => TenantRoleRouteRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: TenantRoleRouteResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => TenantRoleRouteResponse.deserialize(new Uint8Array(bytes))
            },
            TenantRoleRouteUpdate: {
                path: "/api.core.Tenant/TenantRoleRouteUpdate",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: TenantRoleRouteUpdateRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => TenantRoleRouteUpdateRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: dependency_2.google.protobuf.Empty) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => dependency_2.google.protobuf.Empty.deserialize(new Uint8Array(bytes))
            },
            TenantManagerDisable: {
                path: "/api.core.Tenant/TenantManagerDisable",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: TenantManagerDisableRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => TenantManagerDisableRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: dependency_2.google.protobuf.Empty) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => dependency_2.google.protobuf.Empty.deserialize(new Uint8Array(bytes))
            },
            TenantManagerLogin: {
                path: "/api.core.Tenant/TenantManagerLogin",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: TenantManagerLoginRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => TenantManagerLoginRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: TenantManagerLoginResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => TenantManagerLoginResponse.deserialize(new Uint8Array(bytes))
            },
            GetTenantSystemSetting: {
                path: "/api.core.Tenant/GetTenantSystemSetting",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: dependency_2.google.protobuf.Empty) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => dependency_2.google.protobuf.Empty.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: GetTenantSystemSettingResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => GetTenantSystemSettingResponse.deserialize(new Uint8Array(bytes))
            },
            SetTenantSystemSetting: {
                path: "/api.core.Tenant/SetTenantSystemSetting",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: SetTenantSystemSettingRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => SetTenantSystemSettingRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: dependency_2.google.protobuf.Empty) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => dependency_2.google.protobuf.Empty.deserialize(new Uint8Array(bytes))
            },
            Captcha: {
                path: "/api.core.Tenant/Captcha",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: dependency_2.google.protobuf.Empty) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => dependency_2.google.protobuf.Empty.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: CaptchaResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => CaptchaResponse.deserialize(new Uint8Array(bytes))
            },
            WorkerSessionActivityLog: {
                path: "/api.core.Tenant/WorkerSessionActivityLog",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: WorkerSessionActivityLogRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => WorkerSessionActivityLogRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: WorkerSessionActivityLogResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => WorkerSessionActivityLogResponse.deserialize(new Uint8Array(bytes))
            },
            TenantQualityContentAdd: {
                path: "/api.core.Tenant/TenantQualityContentAdd",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: AddQualityContentReq) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => AddQualityContentReq.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: dependency_2.google.protobuf.Empty) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => dependency_2.google.protobuf.Empty.deserialize(new Uint8Array(bytes))
            },
            TenantQualityContentUpdate: {
                path: "/api.core.Tenant/TenantQualityContentUpdate",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: UpdateQualityContentReq) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => UpdateQualityContentReq.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: dependency_2.google.protobuf.Empty) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => dependency_2.google.protobuf.Empty.deserialize(new Uint8Array(bytes))
            },
            TenantQualityContentList: {
                path: "/api.core.Tenant/TenantQualityContentList",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: dependency_2.google.protobuf.Empty) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => dependency_2.google.protobuf.Empty.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: TenantQualityContentListResp) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => TenantQualityContentListResp.deserialize(new Uint8Array(bytes))
            },
            TenantWarnSet: {
                path: "/api.core.Tenant/TenantWarnSet",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: TenantWarnParams) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => TenantWarnParams.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: dependency_2.google.protobuf.Empty) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => dependency_2.google.protobuf.Empty.deserialize(new Uint8Array(bytes))
            },
            TenantWarnGet: {
                path: "/api.core.Tenant/TenantWarnGet",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: dependency_2.google.protobuf.Empty) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => dependency_2.google.protobuf.Empty.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: TenantWarnParams) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => TenantWarnParams.deserialize(new Uint8Array(bytes))
            },
            TenantWarnNotifySet: {
                path: "/api.core.Tenant/TenantWarnNotifySet",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: TenantWarnNotifyParams) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => TenantWarnNotifyParams.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: dependency_2.google.protobuf.Empty) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => dependency_2.google.protobuf.Empty.deserialize(new Uint8Array(bytes))
            },
            TenantWarnNotifyGet: {
                path: "/api.core.Tenant/TenantWarnNotifyGet",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: dependency_2.google.protobuf.Empty) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => dependency_2.google.protobuf.Empty.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: TenantWarnNotifyParams) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => TenantWarnNotifyParams.deserialize(new Uint8Array(bytes))
            },
            TenantWarnRecordCreate: {
                path: "/api.core.Tenant/TenantWarnRecordCreate",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: WarnRecordReq) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => WarnRecordReq.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: dependency_2.google.protobuf.Empty) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => dependency_2.google.protobuf.Empty.deserialize(new Uint8Array(bytes))
            },
            TenantWarnRecordQuery: {
                path: "/api.core.Tenant/TenantWarnRecordQuery",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: WarnRecordQueryReq) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => WarnRecordQueryReq.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: WarnRecordQueryResp) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => WarnRecordQueryResp.deserialize(new Uint8Array(bytes))
            },
            ExportTenantWarnRecordQuery: {
                path: "/api.core.Tenant/ExportTenantWarnRecordQuery",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: ExportWarnRecordQueryReq) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => ExportWarnRecordQueryReq.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: dependency_2.google.protobuf.Empty) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => dependency_2.google.protobuf.Empty.deserialize(new Uint8Array(bytes))
            }
        };
        [method: string]: grpc_1.UntypedHandleCall;
        abstract AdminLogin(call: grpc_1.ServerUnaryCall<AdminLoginRequest, AdminLoginResponse>, callback: grpc_1.sendUnaryData<AdminLoginResponse>): void;
        abstract Login(call: grpc_1.ServerUnaryCall<LoginRequest, LoginResponse>, callback: grpc_1.sendUnaryData<LoginResponse>): void;
        abstract Logout(call: grpc_1.ServerUnaryCall<dependency_2.google.protobuf.Empty, dependency_2.google.protobuf.Empty>, callback: grpc_1.sendUnaryData<dependency_2.google.protobuf.Empty>): void;
        abstract Create(call: grpc_1.ServerUnaryCall<TenantCreateRequest, dependency_2.google.protobuf.Empty>, callback: grpc_1.sendUnaryData<dependency_2.google.protobuf.Empty>): void;
        abstract Query(call: grpc_1.ServerUnaryCall<TenantQueryRequest, TenantQueryResponse>, callback: grpc_1.sendUnaryData<TenantQueryResponse>): void;
        abstract UpdateTenant(call: grpc_1.ServerUnaryCall<UpdateTenantRequest, dependency_2.google.protobuf.Empty>, callback: grpc_1.sendUnaryData<dependency_2.google.protobuf.Empty>): void;
        abstract DeleteTenant(call: grpc_1.ServerUnaryCall<DeleteTenantRequest, dependency_2.google.protobuf.Empty>, callback: grpc_1.sendUnaryData<dependency_2.google.protobuf.Empty>): void;
        abstract ManagerLogin(call: grpc_1.ServerUnaryCall<ManagerLoginRequest, ManagerLoginResponse>, callback: grpc_1.sendUnaryData<ManagerLoginResponse>): void;
        abstract GetRoutes(call: grpc_1.ServerUnaryCall<RouteRequest, RouteResponse>, callback: grpc_1.sendUnaryData<RouteResponse>): void;
        abstract CreatePublicKey(call: grpc_1.ServerUnaryCall<dependency_2.google.protobuf.Empty, PublicKeyResponse>, callback: grpc_1.sendUnaryData<PublicKeyResponse>): void;
        abstract QuerySelfInfo(call: grpc_1.ServerUnaryCall<dependency_2.google.protobuf.Empty, QueryTenantInfoResponse>, callback: grpc_1.sendUnaryData<QueryTenantInfoResponse>): void;
        abstract UpdateNimInfo(call: grpc_1.ServerUnaryCall<UpdateNimInfoRequest, dependency_2.google.protobuf.Empty>, callback: grpc_1.sendUnaryData<dependency_2.google.protobuf.Empty>): void;
        abstract ExportUsersList(call: grpc_1.ServerUnaryCall<dependency_2.google.protobuf.Empty, dependency_2.google.protobuf.Empty>, callback: grpc_1.sendUnaryData<dependency_2.google.protobuf.Empty>): void;
        abstract create_version(call: grpc_1.ServerUnaryCall<VersionRequest, CreateVersionResponse>, callback: grpc_1.sendUnaryData<CreateVersionResponse>): void;
        abstract update_version(call: grpc_1.ServerUnaryCall<VersionRequest, UpdateVersionResponse>, callback: grpc_1.sendUnaryData<UpdateVersionResponse>): void;
        abstract getallversion(call: grpc_1.ServerUnaryCall<dependency_2.google.protobuf.Empty, GetVersionResponse>, callback: grpc_1.sendUnaryData<GetVersionResponse>): void;
        abstract version(call: grpc_1.ServerUnaryCall<dependency_2.google.protobuf.Empty, GetVersionResponse>, callback: grpc_1.sendUnaryData<GetVersionResponse>): void;
        abstract api_set(call: grpc_1.ServerUnaryCall<TenantThirdSetting, dependency_2.google.protobuf.Empty>, callback: grpc_1.sendUnaryData<dependency_2.google.protobuf.Empty>): void;
        abstract LineGroupList(call: grpc_1.ServerUnaryCall<LineGroupListRequest, LineGroupListResponse>, callback: grpc_1.sendUnaryData<LineGroupListResponse>): void;
        abstract LineGroupCreate(call: grpc_1.ServerUnaryCall<LineGroupCreateRequest, dependency_2.google.protobuf.Empty>, callback: grpc_1.sendUnaryData<dependency_2.google.protobuf.Empty>): void;
        abstract LineGroupUpdate(call: grpc_1.ServerUnaryCall<LineGroupUpdateRequest, dependency_2.google.protobuf.Empty>, callback: grpc_1.sendUnaryData<dependency_2.google.protobuf.Empty>): void;
        abstract LineGroupDelete(call: grpc_1.ServerUnaryCall<LineGroupDeleteRequest, dependency_2.google.protobuf.Empty>, callback: grpc_1.sendUnaryData<dependency_2.google.protobuf.Empty>): void;
        abstract TenantWorkerQuery(call: grpc_1.ServerUnaryCall<TenantWorkerQueryRequest, TenantWorkerQueryResponse>, callback: grpc_1.sendUnaryData<TenantWorkerQueryResponse>): void;
        abstract TenantLogQuery(call: grpc_1.ServerUnaryCall<TenantLogReq, TenantLogResp>, callback: grpc_1.sendUnaryData<TenantLogResp>): void;
        abstract TenantRouteList(call: grpc_1.ServerUnaryCall<TenantRouteListRequest, TenantRouteListResponse>, callback: grpc_1.sendUnaryData<TenantRouteListResponse>): void;
        abstract TenantRouteCreate(call: grpc_1.ServerUnaryCall<TenantRouteCreateRequest, dependency_2.google.protobuf.Empty>, callback: grpc_1.sendUnaryData<dependency_2.google.protobuf.Empty>): void;
        abstract TenantRouteUpdate(call: grpc_1.ServerUnaryCall<TenantRouteUpdateRequest, dependency_2.google.protobuf.Empty>, callback: grpc_1.sendUnaryData<dependency_2.google.protobuf.Empty>): void;
        abstract TenantRouteDelete(call: grpc_1.ServerUnaryCall<TenantRouteDeleteRequest, dependency_2.google.protobuf.Empty>, callback: grpc_1.sendUnaryData<dependency_2.google.protobuf.Empty>): void;
        abstract TenantRoleList(call: grpc_1.ServerUnaryCall<TenantRoleListRequest, TenantRoleListResponse>, callback: grpc_1.sendUnaryData<TenantRoleListResponse>): void;
        abstract TenantRoleCreate(call: grpc_1.ServerUnaryCall<TenantRoleCreateRequest, dependency_2.google.protobuf.Empty>, callback: grpc_1.sendUnaryData<dependency_2.google.protobuf.Empty>): void;
        abstract TenantRoleUpdate(call: grpc_1.ServerUnaryCall<TenantRoleUpdateRequest, dependency_2.google.protobuf.Empty>, callback: grpc_1.sendUnaryData<dependency_2.google.protobuf.Empty>): void;
        abstract TenantRoleDelete(call: grpc_1.ServerUnaryCall<TenantRoleDeleteRequest, dependency_2.google.protobuf.Empty>, callback: grpc_1.sendUnaryData<dependency_2.google.protobuf.Empty>): void;
        abstract TenantManagerList(call: grpc_1.ServerUnaryCall<TenantManagerListRequest, TenantManagerListResponse>, callback: grpc_1.sendUnaryData<TenantManagerListResponse>): void;
        abstract TenantManagerCreate(call: grpc_1.ServerUnaryCall<TenantManagerCreateRequest, dependency_2.google.protobuf.Empty>, callback: grpc_1.sendUnaryData<dependency_2.google.protobuf.Empty>): void;
        abstract TenantManagerUpdate(call: grpc_1.ServerUnaryCall<TenantManagerUpdateRequest, dependency_2.google.protobuf.Empty>, callback: grpc_1.sendUnaryData<dependency_2.google.protobuf.Empty>): void;
        abstract TenantManagerDelete(call: grpc_1.ServerUnaryCall<TenantManagerDeleteRequest, dependency_2.google.protobuf.Empty>, callback: grpc_1.sendUnaryData<dependency_2.google.protobuf.Empty>): void;
        abstract TenantRoleRouteList(call: grpc_1.ServerUnaryCall<TenantRoleRouteRequest, TenantRoleRouteResponse>, callback: grpc_1.sendUnaryData<TenantRoleRouteResponse>): void;
        abstract TenantRoleRouteUpdate(call: grpc_1.ServerUnaryCall<TenantRoleRouteUpdateRequest, dependency_2.google.protobuf.Empty>, callback: grpc_1.sendUnaryData<dependency_2.google.protobuf.Empty>): void;
        abstract TenantManagerDisable(call: grpc_1.ServerUnaryCall<TenantManagerDisableRequest, dependency_2.google.protobuf.Empty>, callback: grpc_1.sendUnaryData<dependency_2.google.protobuf.Empty>): void;
        abstract TenantManagerLogin(call: grpc_1.ServerUnaryCall<TenantManagerLoginRequest, TenantManagerLoginResponse>, callback: grpc_1.sendUnaryData<TenantManagerLoginResponse>): void;
        abstract GetTenantSystemSetting(call: grpc_1.ServerUnaryCall<dependency_2.google.protobuf.Empty, GetTenantSystemSettingResponse>, callback: grpc_1.sendUnaryData<GetTenantSystemSettingResponse>): void;
        abstract SetTenantSystemSetting(call: grpc_1.ServerUnaryCall<SetTenantSystemSettingRequest, dependency_2.google.protobuf.Empty>, callback: grpc_1.sendUnaryData<dependency_2.google.protobuf.Empty>): void;
        abstract Captcha(call: grpc_1.ServerUnaryCall<dependency_2.google.protobuf.Empty, CaptchaResponse>, callback: grpc_1.sendUnaryData<CaptchaResponse>): void;
        abstract WorkerSessionActivityLog(call: grpc_1.ServerUnaryCall<WorkerSessionActivityLogRequest, WorkerSessionActivityLogResponse>, callback: grpc_1.sendUnaryData<WorkerSessionActivityLogResponse>): void;
        abstract TenantQualityContentAdd(call: grpc_1.ServerUnaryCall<AddQualityContentReq, dependency_2.google.protobuf.Empty>, callback: grpc_1.sendUnaryData<dependency_2.google.protobuf.Empty>): void;
        abstract TenantQualityContentUpdate(call: grpc_1.ServerUnaryCall<UpdateQualityContentReq, dependency_2.google.protobuf.Empty>, callback: grpc_1.sendUnaryData<dependency_2.google.protobuf.Empty>): void;
        abstract TenantQualityContentList(call: grpc_1.ServerUnaryCall<dependency_2.google.protobuf.Empty, TenantQualityContentListResp>, callback: grpc_1.sendUnaryData<TenantQualityContentListResp>): void;
        abstract TenantWarnSet(call: grpc_1.ServerUnaryCall<TenantWarnParams, dependency_2.google.protobuf.Empty>, callback: grpc_1.sendUnaryData<dependency_2.google.protobuf.Empty>): void;
        abstract TenantWarnGet(call: grpc_1.ServerUnaryCall<dependency_2.google.protobuf.Empty, TenantWarnParams>, callback: grpc_1.sendUnaryData<TenantWarnParams>): void;
        abstract TenantWarnNotifySet(call: grpc_1.ServerUnaryCall<TenantWarnNotifyParams, dependency_2.google.protobuf.Empty>, callback: grpc_1.sendUnaryData<dependency_2.google.protobuf.Empty>): void;
        abstract TenantWarnNotifyGet(call: grpc_1.ServerUnaryCall<dependency_2.google.protobuf.Empty, TenantWarnNotifyParams>, callback: grpc_1.sendUnaryData<TenantWarnNotifyParams>): void;
        abstract TenantWarnRecordCreate(call: grpc_1.ServerUnaryCall<WarnRecordReq, dependency_2.google.protobuf.Empty>, callback: grpc_1.sendUnaryData<dependency_2.google.protobuf.Empty>): void;
        abstract TenantWarnRecordQuery(call: grpc_1.ServerUnaryCall<WarnRecordQueryReq, WarnRecordQueryResp>, callback: grpc_1.sendUnaryData<WarnRecordQueryResp>): void;
        abstract ExportTenantWarnRecordQuery(call: grpc_1.ServerUnaryCall<ExportWarnRecordQueryReq, dependency_2.google.protobuf.Empty>, callback: grpc_1.sendUnaryData<dependency_2.google.protobuf.Empty>): void;
    }
    export class TenantClient extends grpc_1.makeGenericClientConstructor(UnimplementedTenantService.definition, "Tenant", {}) {
        constructor(address: string, credentials: grpc_1.ChannelCredentials, options?: Partial<grpc_1.ChannelOptions>) {
            super(address, credentials, options);
        }
        AdminLogin: GrpcUnaryServiceInterface<AdminLoginRequest, AdminLoginResponse> = (message: AdminLoginRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<AdminLoginResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<AdminLoginResponse>, callback?: grpc_1.requestCallback<AdminLoginResponse>): grpc_1.ClientUnaryCall => {
            return super.AdminLogin(message, metadata, options, callback);
        };
        Login: GrpcUnaryServiceInterface<LoginRequest, LoginResponse> = (message: LoginRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<LoginResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<LoginResponse>, callback?: grpc_1.requestCallback<LoginResponse>): grpc_1.ClientUnaryCall => {
            return super.Login(message, metadata, options, callback);
        };
        Logout: GrpcUnaryServiceInterface<dependency_2.google.protobuf.Empty, dependency_2.google.protobuf.Empty> = (message: dependency_2.google.protobuf.Empty, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<dependency_2.google.protobuf.Empty>, options?: grpc_1.CallOptions | grpc_1.requestCallback<dependency_2.google.protobuf.Empty>, callback?: grpc_1.requestCallback<dependency_2.google.protobuf.Empty>): grpc_1.ClientUnaryCall => {
            return super.Logout(message, metadata, options, callback);
        };
        Create: GrpcUnaryServiceInterface<TenantCreateRequest, dependency_2.google.protobuf.Empty> = (message: TenantCreateRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<dependency_2.google.protobuf.Empty>, options?: grpc_1.CallOptions | grpc_1.requestCallback<dependency_2.google.protobuf.Empty>, callback?: grpc_1.requestCallback<dependency_2.google.protobuf.Empty>): grpc_1.ClientUnaryCall => {
            return super.Create(message, metadata, options, callback);
        };
        Query: GrpcUnaryServiceInterface<TenantQueryRequest, TenantQueryResponse> = (message: TenantQueryRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<TenantQueryResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<TenantQueryResponse>, callback?: grpc_1.requestCallback<TenantQueryResponse>): grpc_1.ClientUnaryCall => {
            return super.Query(message, metadata, options, callback);
        };
        UpdateTenant: GrpcUnaryServiceInterface<UpdateTenantRequest, dependency_2.google.protobuf.Empty> = (message: UpdateTenantRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<dependency_2.google.protobuf.Empty>, options?: grpc_1.CallOptions | grpc_1.requestCallback<dependency_2.google.protobuf.Empty>, callback?: grpc_1.requestCallback<dependency_2.google.protobuf.Empty>): grpc_1.ClientUnaryCall => {
            return super.UpdateTenant(message, metadata, options, callback);
        };
        DeleteTenant: GrpcUnaryServiceInterface<DeleteTenantRequest, dependency_2.google.protobuf.Empty> = (message: DeleteTenantRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<dependency_2.google.protobuf.Empty>, options?: grpc_1.CallOptions | grpc_1.requestCallback<dependency_2.google.protobuf.Empty>, callback?: grpc_1.requestCallback<dependency_2.google.protobuf.Empty>): grpc_1.ClientUnaryCall => {
            return super.DeleteTenant(message, metadata, options, callback);
        };
        ManagerLogin: GrpcUnaryServiceInterface<ManagerLoginRequest, ManagerLoginResponse> = (message: ManagerLoginRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<ManagerLoginResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<ManagerLoginResponse>, callback?: grpc_1.requestCallback<ManagerLoginResponse>): grpc_1.ClientUnaryCall => {
            return super.ManagerLogin(message, metadata, options, callback);
        };
        GetRoutes: GrpcUnaryServiceInterface<RouteRequest, RouteResponse> = (message: RouteRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<RouteResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<RouteResponse>, callback?: grpc_1.requestCallback<RouteResponse>): grpc_1.ClientUnaryCall => {
            return super.GetRoutes(message, metadata, options, callback);
        };
        CreatePublicKey: GrpcUnaryServiceInterface<dependency_2.google.protobuf.Empty, PublicKeyResponse> = (message: dependency_2.google.protobuf.Empty, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<PublicKeyResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<PublicKeyResponse>, callback?: grpc_1.requestCallback<PublicKeyResponse>): grpc_1.ClientUnaryCall => {
            return super.CreatePublicKey(message, metadata, options, callback);
        };
        QuerySelfInfo: GrpcUnaryServiceInterface<dependency_2.google.protobuf.Empty, QueryTenantInfoResponse> = (message: dependency_2.google.protobuf.Empty, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<QueryTenantInfoResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<QueryTenantInfoResponse>, callback?: grpc_1.requestCallback<QueryTenantInfoResponse>): grpc_1.ClientUnaryCall => {
            return super.QuerySelfInfo(message, metadata, options, callback);
        };
        UpdateNimInfo: GrpcUnaryServiceInterface<UpdateNimInfoRequest, dependency_2.google.protobuf.Empty> = (message: UpdateNimInfoRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<dependency_2.google.protobuf.Empty>, options?: grpc_1.CallOptions | grpc_1.requestCallback<dependency_2.google.protobuf.Empty>, callback?: grpc_1.requestCallback<dependency_2.google.protobuf.Empty>): grpc_1.ClientUnaryCall => {
            return super.UpdateNimInfo(message, metadata, options, callback);
        };
        ExportUsersList: GrpcUnaryServiceInterface<dependency_2.google.protobuf.Empty, dependency_2.google.protobuf.Empty> = (message: dependency_2.google.protobuf.Empty, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<dependency_2.google.protobuf.Empty>, options?: grpc_1.CallOptions | grpc_1.requestCallback<dependency_2.google.protobuf.Empty>, callback?: grpc_1.requestCallback<dependency_2.google.protobuf.Empty>): grpc_1.ClientUnaryCall => {
            return super.ExportUsersList(message, metadata, options, callback);
        };
        create_version: GrpcUnaryServiceInterface<VersionRequest, CreateVersionResponse> = (message: VersionRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<CreateVersionResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<CreateVersionResponse>, callback?: grpc_1.requestCallback<CreateVersionResponse>): grpc_1.ClientUnaryCall => {
            return super.create_version(message, metadata, options, callback);
        };
        update_version: GrpcUnaryServiceInterface<VersionRequest, UpdateVersionResponse> = (message: VersionRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<UpdateVersionResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<UpdateVersionResponse>, callback?: grpc_1.requestCallback<UpdateVersionResponse>): grpc_1.ClientUnaryCall => {
            return super.update_version(message, metadata, options, callback);
        };
        getallversion: GrpcUnaryServiceInterface<dependency_2.google.protobuf.Empty, GetVersionResponse> = (message: dependency_2.google.protobuf.Empty, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<GetVersionResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<GetVersionResponse>, callback?: grpc_1.requestCallback<GetVersionResponse>): grpc_1.ClientUnaryCall => {
            return super.getallversion(message, metadata, options, callback);
        };
        version: GrpcUnaryServiceInterface<dependency_2.google.protobuf.Empty, GetVersionResponse> = (message: dependency_2.google.protobuf.Empty, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<GetVersionResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<GetVersionResponse>, callback?: grpc_1.requestCallback<GetVersionResponse>): grpc_1.ClientUnaryCall => {
            return super.version(message, metadata, options, callback);
        };
        api_set: GrpcUnaryServiceInterface<TenantThirdSetting, dependency_2.google.protobuf.Empty> = (message: TenantThirdSetting, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<dependency_2.google.protobuf.Empty>, options?: grpc_1.CallOptions | grpc_1.requestCallback<dependency_2.google.protobuf.Empty>, callback?: grpc_1.requestCallback<dependency_2.google.protobuf.Empty>): grpc_1.ClientUnaryCall => {
            return super.api_set(message, metadata, options, callback);
        };
        LineGroupList: GrpcUnaryServiceInterface<LineGroupListRequest, LineGroupListResponse> = (message: LineGroupListRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<LineGroupListResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<LineGroupListResponse>, callback?: grpc_1.requestCallback<LineGroupListResponse>): grpc_1.ClientUnaryCall => {
            return super.LineGroupList(message, metadata, options, callback);
        };
        LineGroupCreate: GrpcUnaryServiceInterface<LineGroupCreateRequest, dependency_2.google.protobuf.Empty> = (message: LineGroupCreateRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<dependency_2.google.protobuf.Empty>, options?: grpc_1.CallOptions | grpc_1.requestCallback<dependency_2.google.protobuf.Empty>, callback?: grpc_1.requestCallback<dependency_2.google.protobuf.Empty>): grpc_1.ClientUnaryCall => {
            return super.LineGroupCreate(message, metadata, options, callback);
        };
        LineGroupUpdate: GrpcUnaryServiceInterface<LineGroupUpdateRequest, dependency_2.google.protobuf.Empty> = (message: LineGroupUpdateRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<dependency_2.google.protobuf.Empty>, options?: grpc_1.CallOptions | grpc_1.requestCallback<dependency_2.google.protobuf.Empty>, callback?: grpc_1.requestCallback<dependency_2.google.protobuf.Empty>): grpc_1.ClientUnaryCall => {
            return super.LineGroupUpdate(message, metadata, options, callback);
        };
        LineGroupDelete: GrpcUnaryServiceInterface<LineGroupDeleteRequest, dependency_2.google.protobuf.Empty> = (message: LineGroupDeleteRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<dependency_2.google.protobuf.Empty>, options?: grpc_1.CallOptions | grpc_1.requestCallback<dependency_2.google.protobuf.Empty>, callback?: grpc_1.requestCallback<dependency_2.google.protobuf.Empty>): grpc_1.ClientUnaryCall => {
            return super.LineGroupDelete(message, metadata, options, callback);
        };
        TenantWorkerQuery: GrpcUnaryServiceInterface<TenantWorkerQueryRequest, TenantWorkerQueryResponse> = (message: TenantWorkerQueryRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<TenantWorkerQueryResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<TenantWorkerQueryResponse>, callback?: grpc_1.requestCallback<TenantWorkerQueryResponse>): grpc_1.ClientUnaryCall => {
            return super.TenantWorkerQuery(message, metadata, options, callback);
        };
        TenantLogQuery: GrpcUnaryServiceInterface<TenantLogReq, TenantLogResp> = (message: TenantLogReq, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<TenantLogResp>, options?: grpc_1.CallOptions | grpc_1.requestCallback<TenantLogResp>, callback?: grpc_1.requestCallback<TenantLogResp>): grpc_1.ClientUnaryCall => {
            return super.TenantLogQuery(message, metadata, options, callback);
        };
        TenantRouteList: GrpcUnaryServiceInterface<TenantRouteListRequest, TenantRouteListResponse> = (message: TenantRouteListRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<TenantRouteListResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<TenantRouteListResponse>, callback?: grpc_1.requestCallback<TenantRouteListResponse>): grpc_1.ClientUnaryCall => {
            return super.TenantRouteList(message, metadata, options, callback);
        };
        TenantRouteCreate: GrpcUnaryServiceInterface<TenantRouteCreateRequest, dependency_2.google.protobuf.Empty> = (message: TenantRouteCreateRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<dependency_2.google.protobuf.Empty>, options?: grpc_1.CallOptions | grpc_1.requestCallback<dependency_2.google.protobuf.Empty>, callback?: grpc_1.requestCallback<dependency_2.google.protobuf.Empty>): grpc_1.ClientUnaryCall => {
            return super.TenantRouteCreate(message, metadata, options, callback);
        };
        TenantRouteUpdate: GrpcUnaryServiceInterface<TenantRouteUpdateRequest, dependency_2.google.protobuf.Empty> = (message: TenantRouteUpdateRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<dependency_2.google.protobuf.Empty>, options?: grpc_1.CallOptions | grpc_1.requestCallback<dependency_2.google.protobuf.Empty>, callback?: grpc_1.requestCallback<dependency_2.google.protobuf.Empty>): grpc_1.ClientUnaryCall => {
            return super.TenantRouteUpdate(message, metadata, options, callback);
        };
        TenantRouteDelete: GrpcUnaryServiceInterface<TenantRouteDeleteRequest, dependency_2.google.protobuf.Empty> = (message: TenantRouteDeleteRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<dependency_2.google.protobuf.Empty>, options?: grpc_1.CallOptions | grpc_1.requestCallback<dependency_2.google.protobuf.Empty>, callback?: grpc_1.requestCallback<dependency_2.google.protobuf.Empty>): grpc_1.ClientUnaryCall => {
            return super.TenantRouteDelete(message, metadata, options, callback);
        };
        TenantRoleList: GrpcUnaryServiceInterface<TenantRoleListRequest, TenantRoleListResponse> = (message: TenantRoleListRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<TenantRoleListResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<TenantRoleListResponse>, callback?: grpc_1.requestCallback<TenantRoleListResponse>): grpc_1.ClientUnaryCall => {
            return super.TenantRoleList(message, metadata, options, callback);
        };
        TenantRoleCreate: GrpcUnaryServiceInterface<TenantRoleCreateRequest, dependency_2.google.protobuf.Empty> = (message: TenantRoleCreateRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<dependency_2.google.protobuf.Empty>, options?: grpc_1.CallOptions | grpc_1.requestCallback<dependency_2.google.protobuf.Empty>, callback?: grpc_1.requestCallback<dependency_2.google.protobuf.Empty>): grpc_1.ClientUnaryCall => {
            return super.TenantRoleCreate(message, metadata, options, callback);
        };
        TenantRoleUpdate: GrpcUnaryServiceInterface<TenantRoleUpdateRequest, dependency_2.google.protobuf.Empty> = (message: TenantRoleUpdateRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<dependency_2.google.protobuf.Empty>, options?: grpc_1.CallOptions | grpc_1.requestCallback<dependency_2.google.protobuf.Empty>, callback?: grpc_1.requestCallback<dependency_2.google.protobuf.Empty>): grpc_1.ClientUnaryCall => {
            return super.TenantRoleUpdate(message, metadata, options, callback);
        };
        TenantRoleDelete: GrpcUnaryServiceInterface<TenantRoleDeleteRequest, dependency_2.google.protobuf.Empty> = (message: TenantRoleDeleteRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<dependency_2.google.protobuf.Empty>, options?: grpc_1.CallOptions | grpc_1.requestCallback<dependency_2.google.protobuf.Empty>, callback?: grpc_1.requestCallback<dependency_2.google.protobuf.Empty>): grpc_1.ClientUnaryCall => {
            return super.TenantRoleDelete(message, metadata, options, callback);
        };
        TenantManagerList: GrpcUnaryServiceInterface<TenantManagerListRequest, TenantManagerListResponse> = (message: TenantManagerListRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<TenantManagerListResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<TenantManagerListResponse>, callback?: grpc_1.requestCallback<TenantManagerListResponse>): grpc_1.ClientUnaryCall => {
            return super.TenantManagerList(message, metadata, options, callback);
        };
        TenantManagerCreate: GrpcUnaryServiceInterface<TenantManagerCreateRequest, dependency_2.google.protobuf.Empty> = (message: TenantManagerCreateRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<dependency_2.google.protobuf.Empty>, options?: grpc_1.CallOptions | grpc_1.requestCallback<dependency_2.google.protobuf.Empty>, callback?: grpc_1.requestCallback<dependency_2.google.protobuf.Empty>): grpc_1.ClientUnaryCall => {
            return super.TenantManagerCreate(message, metadata, options, callback);
        };
        TenantManagerUpdate: GrpcUnaryServiceInterface<TenantManagerUpdateRequest, dependency_2.google.protobuf.Empty> = (message: TenantManagerUpdateRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<dependency_2.google.protobuf.Empty>, options?: grpc_1.CallOptions | grpc_1.requestCallback<dependency_2.google.protobuf.Empty>, callback?: grpc_1.requestCallback<dependency_2.google.protobuf.Empty>): grpc_1.ClientUnaryCall => {
            return super.TenantManagerUpdate(message, metadata, options, callback);
        };
        TenantManagerDelete: GrpcUnaryServiceInterface<TenantManagerDeleteRequest, dependency_2.google.protobuf.Empty> = (message: TenantManagerDeleteRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<dependency_2.google.protobuf.Empty>, options?: grpc_1.CallOptions | grpc_1.requestCallback<dependency_2.google.protobuf.Empty>, callback?: grpc_1.requestCallback<dependency_2.google.protobuf.Empty>): grpc_1.ClientUnaryCall => {
            return super.TenantManagerDelete(message, metadata, options, callback);
        };
        TenantRoleRouteList: GrpcUnaryServiceInterface<TenantRoleRouteRequest, TenantRoleRouteResponse> = (message: TenantRoleRouteRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<TenantRoleRouteResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<TenantRoleRouteResponse>, callback?: grpc_1.requestCallback<TenantRoleRouteResponse>): grpc_1.ClientUnaryCall => {
            return super.TenantRoleRouteList(message, metadata, options, callback);
        };
        TenantRoleRouteUpdate: GrpcUnaryServiceInterface<TenantRoleRouteUpdateRequest, dependency_2.google.protobuf.Empty> = (message: TenantRoleRouteUpdateRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<dependency_2.google.protobuf.Empty>, options?: grpc_1.CallOptions | grpc_1.requestCallback<dependency_2.google.protobuf.Empty>, callback?: grpc_1.requestCallback<dependency_2.google.protobuf.Empty>): grpc_1.ClientUnaryCall => {
            return super.TenantRoleRouteUpdate(message, metadata, options, callback);
        };
        TenantManagerDisable: GrpcUnaryServiceInterface<TenantManagerDisableRequest, dependency_2.google.protobuf.Empty> = (message: TenantManagerDisableRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<dependency_2.google.protobuf.Empty>, options?: grpc_1.CallOptions | grpc_1.requestCallback<dependency_2.google.protobuf.Empty>, callback?: grpc_1.requestCallback<dependency_2.google.protobuf.Empty>): grpc_1.ClientUnaryCall => {
            return super.TenantManagerDisable(message, metadata, options, callback);
        };
        TenantManagerLogin: GrpcUnaryServiceInterface<TenantManagerLoginRequest, TenantManagerLoginResponse> = (message: TenantManagerLoginRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<TenantManagerLoginResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<TenantManagerLoginResponse>, callback?: grpc_1.requestCallback<TenantManagerLoginResponse>): grpc_1.ClientUnaryCall => {
            return super.TenantManagerLogin(message, metadata, options, callback);
        };
        GetTenantSystemSetting: GrpcUnaryServiceInterface<dependency_2.google.protobuf.Empty, GetTenantSystemSettingResponse> = (message: dependency_2.google.protobuf.Empty, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<GetTenantSystemSettingResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<GetTenantSystemSettingResponse>, callback?: grpc_1.requestCallback<GetTenantSystemSettingResponse>): grpc_1.ClientUnaryCall => {
            return super.GetTenantSystemSetting(message, metadata, options, callback);
        };
        SetTenantSystemSetting: GrpcUnaryServiceInterface<SetTenantSystemSettingRequest, dependency_2.google.protobuf.Empty> = (message: SetTenantSystemSettingRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<dependency_2.google.protobuf.Empty>, options?: grpc_1.CallOptions | grpc_1.requestCallback<dependency_2.google.protobuf.Empty>, callback?: grpc_1.requestCallback<dependency_2.google.protobuf.Empty>): grpc_1.ClientUnaryCall => {
            return super.SetTenantSystemSetting(message, metadata, options, callback);
        };
        Captcha: GrpcUnaryServiceInterface<dependency_2.google.protobuf.Empty, CaptchaResponse> = (message: dependency_2.google.protobuf.Empty, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<CaptchaResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<CaptchaResponse>, callback?: grpc_1.requestCallback<CaptchaResponse>): grpc_1.ClientUnaryCall => {
            return super.Captcha(message, metadata, options, callback);
        };
        WorkerSessionActivityLog: GrpcUnaryServiceInterface<WorkerSessionActivityLogRequest, WorkerSessionActivityLogResponse> = (message: WorkerSessionActivityLogRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<WorkerSessionActivityLogResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<WorkerSessionActivityLogResponse>, callback?: grpc_1.requestCallback<WorkerSessionActivityLogResponse>): grpc_1.ClientUnaryCall => {
            return super.WorkerSessionActivityLog(message, metadata, options, callback);
        };
        TenantQualityContentAdd: GrpcUnaryServiceInterface<AddQualityContentReq, dependency_2.google.protobuf.Empty> = (message: AddQualityContentReq, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<dependency_2.google.protobuf.Empty>, options?: grpc_1.CallOptions | grpc_1.requestCallback<dependency_2.google.protobuf.Empty>, callback?: grpc_1.requestCallback<dependency_2.google.protobuf.Empty>): grpc_1.ClientUnaryCall => {
            return super.TenantQualityContentAdd(message, metadata, options, callback);
        };
        TenantQualityContentUpdate: GrpcUnaryServiceInterface<UpdateQualityContentReq, dependency_2.google.protobuf.Empty> = (message: UpdateQualityContentReq, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<dependency_2.google.protobuf.Empty>, options?: grpc_1.CallOptions | grpc_1.requestCallback<dependency_2.google.protobuf.Empty>, callback?: grpc_1.requestCallback<dependency_2.google.protobuf.Empty>): grpc_1.ClientUnaryCall => {
            return super.TenantQualityContentUpdate(message, metadata, options, callback);
        };
        TenantQualityContentList: GrpcUnaryServiceInterface<dependency_2.google.protobuf.Empty, TenantQualityContentListResp> = (message: dependency_2.google.protobuf.Empty, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<TenantQualityContentListResp>, options?: grpc_1.CallOptions | grpc_1.requestCallback<TenantQualityContentListResp>, callback?: grpc_1.requestCallback<TenantQualityContentListResp>): grpc_1.ClientUnaryCall => {
            return super.TenantQualityContentList(message, metadata, options, callback);
        };
        TenantWarnSet: GrpcUnaryServiceInterface<TenantWarnParams, dependency_2.google.protobuf.Empty> = (message: TenantWarnParams, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<dependency_2.google.protobuf.Empty>, options?: grpc_1.CallOptions | grpc_1.requestCallback<dependency_2.google.protobuf.Empty>, callback?: grpc_1.requestCallback<dependency_2.google.protobuf.Empty>): grpc_1.ClientUnaryCall => {
            return super.TenantWarnSet(message, metadata, options, callback);
        };
        TenantWarnGet: GrpcUnaryServiceInterface<dependency_2.google.protobuf.Empty, TenantWarnParams> = (message: dependency_2.google.protobuf.Empty, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<TenantWarnParams>, options?: grpc_1.CallOptions | grpc_1.requestCallback<TenantWarnParams>, callback?: grpc_1.requestCallback<TenantWarnParams>): grpc_1.ClientUnaryCall => {
            return super.TenantWarnGet(message, metadata, options, callback);
        };
        TenantWarnNotifySet: GrpcUnaryServiceInterface<TenantWarnNotifyParams, dependency_2.google.protobuf.Empty> = (message: TenantWarnNotifyParams, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<dependency_2.google.protobuf.Empty>, options?: grpc_1.CallOptions | grpc_1.requestCallback<dependency_2.google.protobuf.Empty>, callback?: grpc_1.requestCallback<dependency_2.google.protobuf.Empty>): grpc_1.ClientUnaryCall => {
            return super.TenantWarnNotifySet(message, metadata, options, callback);
        };
        TenantWarnNotifyGet: GrpcUnaryServiceInterface<dependency_2.google.protobuf.Empty, TenantWarnNotifyParams> = (message: dependency_2.google.protobuf.Empty, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<TenantWarnNotifyParams>, options?: grpc_1.CallOptions | grpc_1.requestCallback<TenantWarnNotifyParams>, callback?: grpc_1.requestCallback<TenantWarnNotifyParams>): grpc_1.ClientUnaryCall => {
            return super.TenantWarnNotifyGet(message, metadata, options, callback);
        };
        TenantWarnRecordCreate: GrpcUnaryServiceInterface<WarnRecordReq, dependency_2.google.protobuf.Empty> = (message: WarnRecordReq, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<dependency_2.google.protobuf.Empty>, options?: grpc_1.CallOptions | grpc_1.requestCallback<dependency_2.google.protobuf.Empty>, callback?: grpc_1.requestCallback<dependency_2.google.protobuf.Empty>): grpc_1.ClientUnaryCall => {
            return super.TenantWarnRecordCreate(message, metadata, options, callback);
        };
        TenantWarnRecordQuery: GrpcUnaryServiceInterface<WarnRecordQueryReq, WarnRecordQueryResp> = (message: WarnRecordQueryReq, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<WarnRecordQueryResp>, options?: grpc_1.CallOptions | grpc_1.requestCallback<WarnRecordQueryResp>, callback?: grpc_1.requestCallback<WarnRecordQueryResp>): grpc_1.ClientUnaryCall => {
            return super.TenantWarnRecordQuery(message, metadata, options, callback);
        };
        ExportTenantWarnRecordQuery: GrpcUnaryServiceInterface<ExportWarnRecordQueryReq, dependency_2.google.protobuf.Empty> = (message: ExportWarnRecordQueryReq, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<dependency_2.google.protobuf.Empty>, options?: grpc_1.CallOptions | grpc_1.requestCallback<dependency_2.google.protobuf.Empty>, callback?: grpc_1.requestCallback<dependency_2.google.protobuf.Empty>): grpc_1.ClientUnaryCall => {
            return super.ExportTenantWarnRecordQuery(message, metadata, options, callback);
        };
    }
}
